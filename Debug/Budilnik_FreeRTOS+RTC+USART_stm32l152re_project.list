
Budilnik_FreeRTOS+RTC+USART_stm32l152re_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b214  0800b214  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b21c  0800b21c  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b220  0800b220  0001b220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800b224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000430c  20000144  0800b368  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004450  0800b368  00024450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c612  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004669  00000000  00000000  0003c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00040de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  000426e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbac  00000000  00000000  00043dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207d7  00000000  00000000  0006096c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd4f  00000000  00000000  00081143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ee92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b18  00000000  00000000  0011eee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000144 	.word	0x20000144
 800015c:	00000000 	.word	0x00000000
 8000160:	0800af54 	.word	0x0800af54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000148 	.word	0x20000148
 800017c:	0800af54 	.word	0x0800af54

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_uldivmod>:
 80001a4:	b953      	cbnz	r3, 80001bc <__aeabi_uldivmod+0x18>
 80001a6:	b94a      	cbnz	r2, 80001bc <__aeabi_uldivmod+0x18>
 80001a8:	2900      	cmp	r1, #0
 80001aa:	bf08      	it	eq
 80001ac:	2800      	cmpeq	r0, #0
 80001ae:	bf1c      	itt	ne
 80001b0:	f04f 31ff 	movne.w	r1, #4294967295
 80001b4:	f04f 30ff 	movne.w	r0, #4294967295
 80001b8:	f000 b976 	b.w	80004a8 <__aeabi_idiv0>
 80001bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c4:	f000 f806 	bl	80001d4 <__udivmoddi4>
 80001c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d0:	b004      	add	sp, #16
 80001d2:	4770      	bx	lr

080001d4 <__udivmoddi4>:
 80001d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d8:	9e08      	ldr	r6, [sp, #32]
 80001da:	460d      	mov	r5, r1
 80001dc:	4604      	mov	r4, r0
 80001de:	4688      	mov	r8, r1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d14d      	bne.n	8000280 <__udivmoddi4+0xac>
 80001e4:	428a      	cmp	r2, r1
 80001e6:	4694      	mov	ip, r2
 80001e8:	d968      	bls.n	80002bc <__udivmoddi4+0xe8>
 80001ea:	fab2 f282 	clz	r2, r2
 80001ee:	b152      	cbz	r2, 8000206 <__udivmoddi4+0x32>
 80001f0:	fa01 f302 	lsl.w	r3, r1, r2
 80001f4:	f1c2 0120 	rsb	r1, r2, #32
 80001f8:	fa20 f101 	lsr.w	r1, r0, r1
 80001fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000200:	ea41 0803 	orr.w	r8, r1, r3
 8000204:	4094      	lsls	r4, r2
 8000206:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800020a:	fbb8 f7f1 	udiv	r7, r8, r1
 800020e:	fa1f fe8c 	uxth.w	lr, ip
 8000212:	fb01 8817 	mls	r8, r1, r7, r8
 8000216:	fb07 f00e 	mul.w	r0, r7, lr
 800021a:	0c23      	lsrs	r3, r4, #16
 800021c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000220:	4298      	cmp	r0, r3
 8000222:	d90a      	bls.n	800023a <__udivmoddi4+0x66>
 8000224:	eb1c 0303 	adds.w	r3, ip, r3
 8000228:	f107 35ff 	add.w	r5, r7, #4294967295
 800022c:	f080 811e 	bcs.w	800046c <__udivmoddi4+0x298>
 8000230:	4298      	cmp	r0, r3
 8000232:	f240 811b 	bls.w	800046c <__udivmoddi4+0x298>
 8000236:	3f02      	subs	r7, #2
 8000238:	4463      	add	r3, ip
 800023a:	1a1b      	subs	r3, r3, r0
 800023c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000240:	fb01 3310 	mls	r3, r1, r0, r3
 8000244:	fb00 fe0e 	mul.w	lr, r0, lr
 8000248:	b2a4      	uxth	r4, r4
 800024a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024e:	45a6      	cmp	lr, r4
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x94>
 8000252:	eb1c 0404 	adds.w	r4, ip, r4
 8000256:	f100 33ff 	add.w	r3, r0, #4294967295
 800025a:	f080 8109 	bcs.w	8000470 <__udivmoddi4+0x29c>
 800025e:	45a6      	cmp	lr, r4
 8000260:	f240 8106 	bls.w	8000470 <__udivmoddi4+0x29c>
 8000264:	4464      	add	r4, ip
 8000266:	3802      	subs	r0, #2
 8000268:	2100      	movs	r1, #0
 800026a:	eba4 040e 	sub.w	r4, r4, lr
 800026e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000272:	b11e      	cbz	r6, 800027c <__udivmoddi4+0xa8>
 8000274:	2300      	movs	r3, #0
 8000276:	40d4      	lsrs	r4, r2
 8000278:	e9c6 4300 	strd	r4, r3, [r6]
 800027c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000280:	428b      	cmp	r3, r1
 8000282:	d908      	bls.n	8000296 <__udivmoddi4+0xc2>
 8000284:	2e00      	cmp	r6, #0
 8000286:	f000 80ee 	beq.w	8000466 <__udivmoddi4+0x292>
 800028a:	2100      	movs	r1, #0
 800028c:	e9c6 0500 	strd	r0, r5, [r6]
 8000290:	4608      	mov	r0, r1
 8000292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000296:	fab3 f183 	clz	r1, r3
 800029a:	2900      	cmp	r1, #0
 800029c:	d14a      	bne.n	8000334 <__udivmoddi4+0x160>
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d302      	bcc.n	80002a8 <__udivmoddi4+0xd4>
 80002a2:	4282      	cmp	r2, r0
 80002a4:	f200 80fc 	bhi.w	80004a0 <__udivmoddi4+0x2cc>
 80002a8:	1a84      	subs	r4, r0, r2
 80002aa:	eb65 0303 	sbc.w	r3, r5, r3
 80002ae:	2001      	movs	r0, #1
 80002b0:	4698      	mov	r8, r3
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d0e2      	beq.n	800027c <__udivmoddi4+0xa8>
 80002b6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ba:	e7df      	b.n	800027c <__udivmoddi4+0xa8>
 80002bc:	b902      	cbnz	r2, 80002c0 <__udivmoddi4+0xec>
 80002be:	deff      	udf	#255	; 0xff
 80002c0:	fab2 f282 	clz	r2, r2
 80002c4:	2a00      	cmp	r2, #0
 80002c6:	f040 8091 	bne.w	80003ec <__udivmoddi4+0x218>
 80002ca:	eba1 000c 	sub.w	r0, r1, ip
 80002ce:	2101      	movs	r1, #1
 80002d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002dc:	fb07 0013 	mls	r0, r7, r3, r0
 80002e0:	0c25      	lsrs	r5, r4, #16
 80002e2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e6:	fb0e f003 	mul.w	r0, lr, r3
 80002ea:	42a8      	cmp	r0, r5
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x12c>
 80002ee:	eb1c 0505 	adds.w	r5, ip, r5
 80002f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x12a>
 80002f8:	42a8      	cmp	r0, r5
 80002fa:	f200 80ce 	bhi.w	800049a <__udivmoddi4+0x2c6>
 80002fe:	4643      	mov	r3, r8
 8000300:	1a2d      	subs	r5, r5, r0
 8000302:	fbb5 f0f7 	udiv	r0, r5, r7
 8000306:	fb07 5510 	mls	r5, r7, r0, r5
 800030a:	fb0e fe00 	mul.w	lr, lr, r0
 800030e:	b2a4      	uxth	r4, r4
 8000310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x156>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x154>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 80b6 	bhi.w	8000494 <__udivmoddi4+0x2c0>
 8000328:	4628      	mov	r0, r5
 800032a:	eba4 040e 	sub.w	r4, r4, lr
 800032e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000332:	e79e      	b.n	8000272 <__udivmoddi4+0x9e>
 8000334:	f1c1 0720 	rsb	r7, r1, #32
 8000338:	408b      	lsls	r3, r1
 800033a:	fa22 fc07 	lsr.w	ip, r2, r7
 800033e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000342:	fa25 fa07 	lsr.w	sl, r5, r7
 8000346:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800034a:	fbba f8f9 	udiv	r8, sl, r9
 800034e:	fa20 f307 	lsr.w	r3, r0, r7
 8000352:	fb09 aa18 	mls	sl, r9, r8, sl
 8000356:	408d      	lsls	r5, r1
 8000358:	fa1f fe8c 	uxth.w	lr, ip
 800035c:	431d      	orrs	r5, r3
 800035e:	fa00 f301 	lsl.w	r3, r0, r1
 8000362:	fb08 f00e 	mul.w	r0, r8, lr
 8000366:	0c2c      	lsrs	r4, r5, #16
 8000368:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800036c:	42a0      	cmp	r0, r4
 800036e:	fa02 f201 	lsl.w	r2, r2, r1
 8000372:	d90b      	bls.n	800038c <__udivmoddi4+0x1b8>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f108 3aff 	add.w	sl, r8, #4294967295
 800037c:	f080 8088 	bcs.w	8000490 <__udivmoddi4+0x2bc>
 8000380:	42a0      	cmp	r0, r4
 8000382:	f240 8085 	bls.w	8000490 <__udivmoddi4+0x2bc>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	4464      	add	r4, ip
 800038c:	1a24      	subs	r4, r4, r0
 800038e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000392:	fb09 4410 	mls	r4, r9, r0, r4
 8000396:	fb00 fe0e 	mul.w	lr, r0, lr
 800039a:	b2ad      	uxth	r5, r5
 800039c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x1e2>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d26c      	bcs.n	8000488 <__udivmoddi4+0x2b4>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d96a      	bls.n	8000488 <__udivmoddi4+0x2b4>
 80003b2:	3802      	subs	r0, #2
 80003b4:	4464      	add	r4, ip
 80003b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ba:	fba0 9502 	umull	r9, r5, r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	42ac      	cmp	r4, r5
 80003c4:	46c8      	mov	r8, r9
 80003c6:	46ae      	mov	lr, r5
 80003c8:	d356      	bcc.n	8000478 <__udivmoddi4+0x2a4>
 80003ca:	d053      	beq.n	8000474 <__udivmoddi4+0x2a0>
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d069      	beq.n	80004a4 <__udivmoddi4+0x2d0>
 80003d0:	ebb3 0208 	subs.w	r2, r3, r8
 80003d4:	eb64 040e 	sbc.w	r4, r4, lr
 80003d8:	fa22 f301 	lsr.w	r3, r2, r1
 80003dc:	fa04 f707 	lsl.w	r7, r4, r7
 80003e0:	431f      	orrs	r7, r3
 80003e2:	40cc      	lsrs	r4, r1
 80003e4:	e9c6 7400 	strd	r7, r4, [r6]
 80003e8:	2100      	movs	r1, #0
 80003ea:	e747      	b.n	800027c <__udivmoddi4+0xa8>
 80003ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f0:	f1c2 0120 	rsb	r1, r2, #32
 80003f4:	fa25 f301 	lsr.w	r3, r5, r1
 80003f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000400:	4095      	lsls	r5, r2
 8000402:	430d      	orrs	r5, r1
 8000404:	fbb3 f1f7 	udiv	r1, r3, r7
 8000408:	fb07 3311 	mls	r3, r7, r1, r3
 800040c:	fa1f fe8c 	uxth.w	lr, ip
 8000410:	0c28      	lsrs	r0, r5, #16
 8000412:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000416:	fb01 f30e 	mul.w	r3, r1, lr
 800041a:	4283      	cmp	r3, r0
 800041c:	fa04 f402 	lsl.w	r4, r4, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x260>
 8000422:	eb1c 0000 	adds.w	r0, ip, r0
 8000426:	f101 38ff 	add.w	r8, r1, #4294967295
 800042a:	d22f      	bcs.n	800048c <__udivmoddi4+0x2b8>
 800042c:	4283      	cmp	r3, r0
 800042e:	d92d      	bls.n	800048c <__udivmoddi4+0x2b8>
 8000430:	3902      	subs	r1, #2
 8000432:	4460      	add	r0, ip
 8000434:	1ac0      	subs	r0, r0, r3
 8000436:	fbb0 f3f7 	udiv	r3, r0, r7
 800043a:	fb07 0013 	mls	r0, r7, r3, r0
 800043e:	b2ad      	uxth	r5, r5
 8000440:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000444:	fb03 f00e 	mul.w	r0, r3, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x28a>
 800044c:	eb1c 0505 	adds.w	r5, ip, r5
 8000450:	f103 38ff 	add.w	r8, r3, #4294967295
 8000454:	d216      	bcs.n	8000484 <__udivmoddi4+0x2b0>
 8000456:	42a8      	cmp	r0, r5
 8000458:	d914      	bls.n	8000484 <__udivmoddi4+0x2b0>
 800045a:	3b02      	subs	r3, #2
 800045c:	4465      	add	r5, ip
 800045e:	1a28      	subs	r0, r5, r0
 8000460:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000464:	e738      	b.n	80002d8 <__udivmoddi4+0x104>
 8000466:	4631      	mov	r1, r6
 8000468:	4630      	mov	r0, r6
 800046a:	e707      	b.n	800027c <__udivmoddi4+0xa8>
 800046c:	462f      	mov	r7, r5
 800046e:	e6e4      	b.n	800023a <__udivmoddi4+0x66>
 8000470:	4618      	mov	r0, r3
 8000472:	e6f9      	b.n	8000268 <__udivmoddi4+0x94>
 8000474:	454b      	cmp	r3, r9
 8000476:	d2a9      	bcs.n	80003cc <__udivmoddi4+0x1f8>
 8000478:	ebb9 0802 	subs.w	r8, r9, r2
 800047c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000480:	3801      	subs	r0, #1
 8000482:	e7a3      	b.n	80003cc <__udivmoddi4+0x1f8>
 8000484:	4643      	mov	r3, r8
 8000486:	e7ea      	b.n	800045e <__udivmoddi4+0x28a>
 8000488:	4628      	mov	r0, r5
 800048a:	e794      	b.n	80003b6 <__udivmoddi4+0x1e2>
 800048c:	4641      	mov	r1, r8
 800048e:	e7d1      	b.n	8000434 <__udivmoddi4+0x260>
 8000490:	46d0      	mov	r8, sl
 8000492:	e77b      	b.n	800038c <__udivmoddi4+0x1b8>
 8000494:	4464      	add	r4, ip
 8000496:	3802      	subs	r0, #2
 8000498:	e747      	b.n	800032a <__udivmoddi4+0x156>
 800049a:	3b02      	subs	r3, #2
 800049c:	4465      	add	r5, ip
 800049e:	e72f      	b.n	8000300 <__udivmoddi4+0x12c>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e706      	b.n	80002b2 <__udivmoddi4+0xde>
 80004a4:	4631      	mov	r1, r6
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0xa8>

080004a8 <__aeabi_idiv0>:
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop

080004ac <prvFirstTask>:

extern RTC_HandleTypeDef hrtc;
extern UART_HandleTypeDef huart2;

void prvFirstTask   ( void *pvParameters )
{
 80004ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004b0:	b099      	sub	sp, #100	; 0x64
 80004b2:	af04      	add	r7, sp, #16
 80004b4:	6078      	str	r0, [r7, #4]
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
char RTCTime[40];
int PrevSeconds=999;
 80004b6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80004ba:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(1){

		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD); 
 80004bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	4828      	ldr	r0, [pc, #160]	; (8000568 <prvFirstTask+0xbc>)
 80004c6:	f003 f8e3 	bl	8003690 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80004ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4825      	ldr	r0, [pc, #148]	; (8000568 <prvFirstTask+0xbc>)
 80004d4:	f002 ffe1 	bl	800349a <HAL_RTC_GetTime>
		
		
		sprintf( RTCTime, "RTC Time is %02d/%02d/%02d %02d:%02d:%02d \r\n", BCDToDec(sDate.Date), BCDToDec(sDate.Month), BCDToDec(sDate.Year),
 80004d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fe0b 	bl	80010f8 <BCDToDec>
 80004e2:	4680      	mov	r8, r0
 80004e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fe05 	bl	80010f8 <BCDToDec>
 80004ee:	4681      	mov	r9, r0
 80004f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fdff 	bl	80010f8 <BCDToDec>
 80004fa:	4604      	mov	r4, r0
 80004fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fdf9 	bl	80010f8 <BCDToDec>
 8000506:	4605      	mov	r5, r0
 8000508:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fdf3 	bl	80010f8 <BCDToDec>
 8000512:	4606      	mov	r6, r0
 8000514:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fded 	bl	80010f8 <BCDToDec>
 800051e:	4603      	mov	r3, r0
 8000520:	f107 000c 	add.w	r0, r7, #12
 8000524:	9303      	str	r3, [sp, #12]
 8000526:	9602      	str	r6, [sp, #8]
 8000528:	9501      	str	r5, [sp, #4]
 800052a:	9400      	str	r4, [sp, #0]
 800052c:	464b      	mov	r3, r9
 800052e:	4642      	mov	r2, r8
 8000530:	490e      	ldr	r1, [pc, #56]	; (800056c <prvFirstTask+0xc0>)
 8000532:	f00a f89b 	bl	800a66c <siprintf>
																			BCDToDec(sTime.Hours), BCDToDec(sTime.Minutes), BCDToDec(sTime.Seconds) );
		if( PrevSeconds==(int)sTime.Seconds ){
 8000536:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800053a:	461a      	mov	r2, r3
 800053c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800053e:	4293      	cmp	r3, r2
 8000540:	d006      	beq.n	8000550 <prvFirstTask+0xa4>
			
		}else{
			HAL_UART_Transmit(&huart2, (uint8_t *)RTCTime, 32, 40);
 8000542:	f107 010c 	add.w	r1, r7, #12
 8000546:	2328      	movs	r3, #40	; 0x28
 8000548:	2220      	movs	r2, #32
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <prvFirstTask+0xc4>)
 800054c:	f004 fb29 	bl	8004ba2 <HAL_UART_Transmit>
		}
		PrevSeconds=(int)sTime.Seconds;
 8000550:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
		
		memset( RTCTime, '\0', sizeof(RTCTime));
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f00a f87c 	bl	800a65c <memset>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD); 
 8000564:	e7aa      	b.n	80004bc <prvFirstTask+0x10>
 8000566:	bf00      	nop
 8000568:	200009c4 	.word	0x200009c4
 800056c:	0800af6c 	.word	0x0800af6c
 8000570:	20000abc 	.word	0x20000abc

08000574 <prvSoundTask>:
extern WPRESULT wp_open( FIL *file, const char *FileName, wp_format *format );
extern void wp_init (wp_format *format);
extern char wave_playback(const char *FileName);

void prvSoundTask ( void *pvParameters)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 800057c:	2000      	movs	r0, #0
 800057e:	f008 fce7 	bl	8008f50 <vTaskSuspend>

	vTaskSuspend(xHandle_1);
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <prvSoundTask+0x80>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f008 fce2 	bl	8008f50 <vTaskSuspend>
	vTaskPrioritySet( xHandle_1, tskIDLE_PRIORITY + 2 );
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <prvSoundTask+0x80>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f008 fc2e 	bl	8008df4 <vTaskPrioritySet>

	HAL_TIM_Base_Start_IT(&htim2);
 8000598:	4817      	ldr	r0, [pc, #92]	; (80005f8 <prvSoundTask+0x84>)
 800059a:	f003 ff3b 	bl	8004414 <HAL_TIM_Base_Start_IT>

	disk_initialize(SDFatFs.drv);
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <prvSoundTask+0x88>)
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fea6 	bl	80052f4 <disk_initialize>

	while(1){
		if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,1)!=FR_OK){
 80005a8:	2201      	movs	r2, #1
 80005aa:	4915      	ldr	r1, [pc, #84]	; (8000600 <prvSoundTask+0x8c>)
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <prvSoundTask+0x88>)
 80005ae:	f006 fbff 	bl	8006db0 <f_mount>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <prvSoundTask+0x4a>
			Error();
 80005b8:	f001 f968 	bl	800188c <Error>
 80005bc:	e013      	b.n	80005e6 <prvSoundTask+0x72>
	     }else{

	    	 HAL_UART_Transmit(&huart2,"ALARM !!! ALARM !!! ALARM !!!\r\n", 32, 100);
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	2220      	movs	r2, #32
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <prvSoundTask+0x90>)
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <prvSoundTask+0x94>)
 80005c6:	f004 faec 	bl	8004ba2 <HAL_UART_Transmit>
	         wp_init(&MyFormat);
	         wave_playback(str);
	         //vTaskResume(xHandle_2);*/

	         //vTaskSuspend(xHandle_2);
	         wp_open(&MyFile,"123.wav",&MyFormat);
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <prvSoundTask+0x98>)
 80005cc:	4910      	ldr	r1, [pc, #64]	; (8000610 <prvSoundTask+0x9c>)
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <prvSoundTask+0xa0>)
 80005d0:	f000 fafa 	bl	8000bc8 <wp_open>
	         wp_init(&MyFormat);
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <prvSoundTask+0x98>)
 80005d6:	f000 fc07 	bl	8000de8 <wp_init>
	         wave_playback("123.wav");
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <prvSoundTask+0x9c>)
 80005dc:	f000 fc90 	bl	8000f00 <wave_playback>
	         //vTaskResume(xHandle_2);

	         f_close(&MyFile);
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <prvSoundTask+0xa0>)
 80005e2:	f007 f805 	bl	80075f0 <f_close>
	     }
	     f_mount(NULL,(TCHAR const*)USER_Path,1); // Unmount
 80005e6:	2201      	movs	r2, #1
 80005e8:	4905      	ldr	r1, [pc, #20]	; (8000600 <prvSoundTask+0x8c>)
 80005ea:	2000      	movs	r0, #0
 80005ec:	f006 fbe0 	bl	8006db0 <f_mount>
		if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,1)!=FR_OK){
 80005f0:	e7da      	b.n	80005a8 <prvSoundTask+0x34>
 80005f2:	bf00      	nop
 80005f4:	20000b2c 	.word	0x20000b2c
 80005f8:	20000a3c 	.word	0x20000a3c
 80005fc:	20000b8c 	.word	0x20000b8c
 8000600:	200000b4 	.word	0x200000b4
 8000604:	0800af9c 	.word	0x0800af9c
 8000608:	20000abc 	.word	0x20000abc
 800060c:	20000160 	.word	0x20000160
 8000610:	0800afbc 	.word	0x0800afbc
 8000614:	20000dc0 	.word	0x20000dc0

08000618 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <vApplicationGetIdleTaskMemory+0x2c>)
 8000628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <vApplicationGetIdleTaskMemory+0x30>)
 800062e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000636:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000170 	.word	0x20000170
 8000648:	200001c4 	.word	0x200001c4

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f001 fc0e 	bl	8001e72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f899 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 fa5d 	bl	8000b18 <MX_GPIO_Init>
  MX_RTC_Init();
 800065e:	f000 f8f9 	bl	8000854 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000662:	f000 fa05 	bl	8000a70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fa2d 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800066a:	f004 fd07 	bl	800507c <MX_FATFS_Init>
  MX_SPI3_Init();
 800066e:	f000 f97d 	bl	800096c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000672:	f000 f9b1 	bl	80009d8 <MX_TIM2_Init>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, "Enter Start RTC Date & Time ", 29, 100);
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	221d      	movs	r2, #29
 800067a:	4933      	ldr	r1, [pc, #204]	; (8000748 <main+0xfc>)
 800067c:	4833      	ldr	r0, [pc, #204]	; (800074c <main+0x100>)
 800067e:	f004 fa90 	bl	8004ba2 <HAL_UART_Transmit>
  SetTime( &sDate, &sTime);
 8000682:	4933      	ldr	r1, [pc, #204]	; (8000750 <main+0x104>)
 8000684:	4833      	ldr	r0, [pc, #204]	; (8000754 <main+0x108>)
 8000686:	f000 fd4b 	bl	8001120 <SetTime>
  HAL_UART_Transmit(&huart2, "Enter Alarm RTC Date & Time ", 29, 100);
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	221d      	movs	r2, #29
 800068e:	4932      	ldr	r1, [pc, #200]	; (8000758 <main+0x10c>)
 8000690:	482e      	ldr	r0, [pc, #184]	; (800074c <main+0x100>)
 8000692:	f004 fa86 	bl	8004ba2 <HAL_UART_Transmit>
  SetTime( &sAlarmDate, &sAlarmTime);
 8000696:	4931      	ldr	r1, [pc, #196]	; (800075c <main+0x110>)
 8000698:	4831      	ldr	r0, [pc, #196]	; (8000760 <main+0x114>)
 800069a:	f000 fd41 	bl	8001120 <SetTime>

  sAlarm.AlarmTime=sAlarmTime;
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <main+0x118>)
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <main+0x110>)
 80006a2:	4614      	mov	r4, r2
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	682b      	ldr	r3, [r5, #0]
 80006ac:	6023      	str	r3, [r4, #0]
  sAlarm.AlarmMask=RTC_ALARMMASK_NONE;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <main+0x118>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask=RTC_ALARMSUBSECONDMASK_ALL;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <main+0x118>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel=RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x118>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay=sAlarmDate.Date;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <main+0x114>)
 80006c2:	789a      	ldrb	r2, [r3, #2]
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0x118>)
 80006c6:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm.Alarm=RTC_ALARM_A;
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <main+0x118>)
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80006d2:	2201      	movs	r2, #1
 80006d4:	491f      	ldr	r1, [pc, #124]	; (8000754 <main+0x108>)
 80006d6:	4824      	ldr	r0, [pc, #144]	; (8000768 <main+0x11c>)
 80006d8:	f002 ff3c 	bl	8003554 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80006dc:	2201      	movs	r2, #1
 80006de:	491c      	ldr	r1, [pc, #112]	; (8000750 <main+0x104>)
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <main+0x11c>)
 80006e2:	f002 fe26 	bl	8003332 <HAL_RTC_SetTime>

  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 80006e6:	2201      	movs	r2, #1
 80006e8:	491e      	ldr	r1, [pc, #120]	; (8000764 <main+0x118>)
 80006ea:	481f      	ldr	r0, [pc, #124]	; (8000768 <main+0x11c>)
 80006ec:	f003 f81e 	bl	800372c <HAL_RTC_SetAlarm_IT>

  /* Чтобы таски создались, надо заблокировать строки кода, создающие defaultTask !!! Потому, что
   * defaultTask занимает слишком много памяти в куче ( 2160 Байт ) и для моих тасков не остается
   * места !!!
   */
	  if( xTaskCreate(prvFirstTask, "First", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle_1) != pdPASS){
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <main+0x120>)
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	2300      	movs	r3, #0
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fe:	491c      	ldr	r1, [pc, #112]	; (8000770 <main+0x124>)
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <main+0x128>)
 8000702:	f008 fa49 	bl	8008b98 <xTaskCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d005      	beq.n	8000718 <main+0xcc>
		  HAL_UART_Transmit(&huart2, "FirstTask creating ERROR !!!\r\n", 30, 100 );
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	221e      	movs	r2, #30
 8000710:	4919      	ldr	r1, [pc, #100]	; (8000778 <main+0x12c>)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0x100>)
 8000714:	f004 fa45 	bl	8004ba2 <HAL_UART_Transmit>
	  }

	  if( xTaskCreate(prvSoundTask, "Sound", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle_Sound) != pdPASS){
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0x130>)
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2300      	movs	r3, #0
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2300      	movs	r3, #0
 8000722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000726:	4916      	ldr	r1, [pc, #88]	; (8000780 <main+0x134>)
 8000728:	4816      	ldr	r0, [pc, #88]	; (8000784 <main+0x138>)
 800072a:	f008 fa35 	bl	8008b98 <xTaskCreate>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d005      	beq.n	8000740 <main+0xf4>
		  HAL_UART_Transmit(&huart2, "SoundTask creating ERROR !!!\r\n", 30, 100 );
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	221e      	movs	r2, #30
 8000738:	4913      	ldr	r1, [pc, #76]	; (8000788 <main+0x13c>)
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <main+0x100>)
 800073c:	f004 fa31 	bl	8004ba2 <HAL_UART_Transmit>
	  }


	  vTaskStartScheduler();
 8000740:	f008 fd44 	bl	80091cc <vTaskStartScheduler>

  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0xf8>
 8000746:	bf00      	nop
 8000748:	0800afc4 	.word	0x0800afc4
 800074c:	20000abc 	.word	0x20000abc
 8000750:	20000b34 	.word	0x20000b34
 8000754:	20000b5c 	.word	0x20000b5c
 8000758:	0800afe4 	.word	0x0800afe4
 800075c:	20000b48 	.word	0x20000b48
 8000760:	20000b60 	.word	0x20000b60
 8000764:	20000b64 	.word	0x20000b64
 8000768:	200009c4 	.word	0x200009c4
 800076c:	20000b2c 	.word	0x20000b2c
 8000770:	0800b004 	.word	0x0800b004
 8000774:	080004ad 	.word	0x080004ad
 8000778:	0800b00c 	.word	0x0800b00c
 800077c:	20000b30 	.word	0x20000b30
 8000780:	0800b02c 	.word	0x0800b02c
 8000784:	08000575 	.word	0x08000575
 8000788:	0800b034 	.word	0x0800b034

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b096      	sub	sp, #88	; 0x58
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f009 ff5e 	bl	800a65c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xc4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007c2:	4a23      	ldr	r2, [pc, #140]	; (8000850 <SystemClock_Config+0xc4>)
 80007c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007ca:	230a      	movs	r3, #10
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ce:	2301      	movs	r3, #1
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d2:	2310      	movs	r3, #16
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007de:	2300      	movs	r3, #0
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80007e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80007e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fe5c 	bl	80024b0 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007fe:	f000 fdf7 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2101      	movs	r1, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f977 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000828:	f000 fde2 	bl	80013f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800082c:	2301      	movs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000834:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fc1d 	bl	8003078 <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000844:	f000 fdd4 	bl	80013f0 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40007000 	.word	0x40007000

08000854 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2228      	movs	r2, #40	; 0x28
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f009 fef1 	bl	800a65c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800087a:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <MX_RTC_Init+0x110>)
 800087c:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <MX_RTC_Init+0x114>)
 800087e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_RTC_Init+0x110>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <MX_RTC_Init+0x110>)
 8000888:	227f      	movs	r2, #127	; 0x7f
 800088a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088c:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_RTC_Init+0x110>)
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <MX_RTC_Init+0x110>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_RTC_Init+0x110>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <MX_RTC_Init+0x110>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a4:	482f      	ldr	r0, [pc, #188]	; (8000964 <MX_RTC_Init+0x110>)
 80008a6:	f002 fcc9 	bl	800323c <HAL_RTC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fd9e 	bl	80013f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_RTC_Init+0x110>)
 80008d8:	f002 fd2b 	bl	8003332 <HAL_RTC_SetTime>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80008e2:	f000 fd85 	bl	80013f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000902:	2201      	movs	r2, #1
 8000904:	4619      	mov	r1, r3
 8000906:	4817      	ldr	r0, [pc, #92]	; (8000964 <MX_RTC_Init+0x110>)
 8000908:	f002 fe24 	bl	8003554 <HAL_RTC_SetDate>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000912:	f000 fd6d 	bl	80013f0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000916:	2300      	movs	r3, #0
 8000918:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800091a:	2300      	movs	r3, #0
 800091c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800091e:	2300      	movs	r3, #0
 8000920:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800093a:	2301      	movs	r3, #1
 800093c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_RTC_Init+0x110>)
 800094e:	f002 feed 	bl	800372c <HAL_RTC_SetAlarm_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000958:	f000 fd4a 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3740      	adds	r7, #64	; 0x40
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200009c4 	.word	0x200009c4
 8000968:	40002800 	.word	0x40002800

0800096c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI3_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI3_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009be:	f003 f8d6 	bl	8003b6e <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80009c8:	f000 fd12 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200009e4 	.word	0x200009e4
 80009d4:	40003c00 	.word	0x40003c00

080009d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_TIM2_Init+0x94>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_TIM2_Init+0x94>)
 80009fe:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000a02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a1e:	f003 fcb9 	bl	8004394 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a28:	f000 fce2 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a3a:	f003 fe19 	bl	8004670 <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a44:	f000 fcd4 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a56:	f003 fff9 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 fcc6 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000a3c 	.word	0x20000a3c

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_USART1_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa8:	f004 f82e 	bl	8004b08 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f000 fc9d 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000a7c 	.word	0x20000a7c
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_USART2_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000afc:	f004 f804 	bl	8004b08 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 fc73 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000abc 	.word	0x20000abc
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_GPIO_Init+0xa0>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <MX_GPIO_Init+0xa0>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_GPIO_Init+0xa0>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_GPIO_Init+0xa0>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <MX_GPIO_Init+0xa0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0xa0>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	21c0      	movs	r1, #192	; 0xc0
 8000b62:	4816      	ldr	r0, [pc, #88]	; (8000bbc <MX_GPIO_Init+0xa4>)
 8000b64:	f001 fc6a 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0xa8>)
 8000b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0xac>)
 8000b7e:	f001 facd 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b82:	23c0      	movs	r3, #192	; 0xc0
 8000b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	4619      	mov	r1, r3
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <MX_GPIO_Init+0xa4>)
 8000b9a:	f001 fabf 	bl	800211c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	2028      	movs	r0, #40	; 0x28
 8000ba4:	f001 fa4f 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba8:	2028      	movs	r0, #40	; 0x28
 8000baa:	f001 fa68 	bl	800207e <HAL_NVIC_EnableIRQ>

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <wp_open>:

/* USER CODE BEGIN 4 */

WPRESULT wp_open( FIL *file, const char *FileName, wp_format *format )
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b098      	sub	sp, #96	; 0x60
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  unsigned char res;                          //dlya chraneniya resultata
  unsigned char buff[64];                     //bufer dlya zagolovka faila
  unsigned char cnt;                          //kolichestvo prochitannych bait
  unsigned long i;                            //wspom. peremennaya

  res = f_open ( file,FileName, FA_OPEN_EXISTING|FA_READ );
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f006 f94d 	bl	8006e78 <f_open>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if(res) return WP_ERROR_FILE;
 8000be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <wp_open+0x28>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e0f5      	b.n	8000ddc <wp_open+0x214>
  res = f_read ( file, &buff[0], 64, (UINT *)&cnt );
 8000bf0:	f107 0317 	add.w	r3, r7, #23
 8000bf4:	f107 0118 	add.w	r1, r7, #24
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f006 fb01 	bl	8007202 <f_read>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if(res || cnt!=64) return WP_ERROR_FILE;
 8000c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <wp_open+0x4c>
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b40      	cmp	r3, #64	; 0x40
 8000c12:	d001      	beq.n	8000c18 <wp_open+0x50>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e0e1      	b.n	8000ddc <wp_open+0x214>

  if(buff[0]!='R' || buff[1]!='I' || buff[2]!='F' || buff[3]!='F')     res = 2;
 8000c18:	7e3b      	ldrb	r3, [r7, #24]
 8000c1a:	2b52      	cmp	r3, #82	; 0x52
 8000c1c:	d108      	bne.n	8000c30 <wp_open+0x68>
 8000c1e:	7e7b      	ldrb	r3, [r7, #25]
 8000c20:	2b49      	cmp	r3, #73	; 0x49
 8000c22:	d105      	bne.n	8000c30 <wp_open+0x68>
 8000c24:	7ebb      	ldrb	r3, [r7, #26]
 8000c26:	2b46      	cmp	r3, #70	; 0x46
 8000c28:	d102      	bne.n	8000c30 <wp_open+0x68>
 8000c2a:	7efb      	ldrb	r3, [r7, #27]
 8000c2c:	2b46      	cmp	r3, #70	; 0x46
 8000c2e:	d002      	beq.n	8000c36 <wp_open+0x6e>
 8000c30:	2302      	movs	r3, #2
 8000c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if(buff[8]!='W' || buff[9]!='A' || buff[10]!='V' || buff[11]!='E')   res = 2;
 8000c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c3a:	2b57      	cmp	r3, #87	; 0x57
 8000c3c:	d10b      	bne.n	8000c56 <wp_open+0x8e>
 8000c3e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c42:	2b41      	cmp	r3, #65	; 0x41
 8000c44:	d107      	bne.n	8000c56 <wp_open+0x8e>
 8000c46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c4a:	2b56      	cmp	r3, #86	; 0x56
 8000c4c:	d103      	bne.n	8000c56 <wp_open+0x8e>
 8000c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c52:	2b45      	cmp	r3, #69	; 0x45
 8000c54:	d002      	beq.n	8000c5c <wp_open+0x94>
 8000c56:	2302      	movs	r3, #2
 8000c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if(buff[12]!='f' || buff[13]!='m' || buff[14]!='t' || buff[15]!=' ') res = 2;
 8000c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c60:	2b66      	cmp	r3, #102	; 0x66
 8000c62:	d10b      	bne.n	8000c7c <wp_open+0xb4>
 8000c64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c68:	2b6d      	cmp	r3, #109	; 0x6d
 8000c6a:	d107      	bne.n	8000c7c <wp_open+0xb4>
 8000c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c70:	2b74      	cmp	r3, #116	; 0x74
 8000c72:	d103      	bne.n	8000c7c <wp_open+0xb4>
 8000c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	d002      	beq.n	8000c82 <wp_open+0xba>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  //bayty 20,21  - 1 i 0
  if(buff[20]!=1 || buff[21]!=0) res = 2;
 8000c82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d103      	bne.n	8000c92 <wp_open+0xca>
 8000c8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <wp_open+0xd0>
 8000c92:	2302      	movs	r3, #2
 8000c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  //wychislit razmer chanka "fmt "
  i = buff[16] | (buff[17]<<8) | (buff[18]<<16) | (buff[19]<<24);
 8000c98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	431a      	orrs	r2, r3
 8000cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cb2:	061b      	lsls	r3, r3, #24
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	65bb      	str	r3, [r7, #88]	; 0x58

  //posle chanka "fmt " dolgen sledovat chank "data"
  if(buff[20+i]!='d' || buff[21+i]!='a' || buff[22+i]!='t' || buff[23+i]!='a') res = 2;
 8000cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cba:	3314      	adds	r3, #20
 8000cbc:	3360      	adds	r3, #96	; 0x60
 8000cbe:	443b      	add	r3, r7
 8000cc0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cc4:	2b64      	cmp	r3, #100	; 0x64
 8000cc6:	d117      	bne.n	8000cf8 <wp_open+0x130>
 8000cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cca:	3315      	adds	r3, #21
 8000ccc:	3360      	adds	r3, #96	; 0x60
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cd4:	2b61      	cmp	r3, #97	; 0x61
 8000cd6:	d10f      	bne.n	8000cf8 <wp_open+0x130>
 8000cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cda:	3316      	adds	r3, #22
 8000cdc:	3360      	adds	r3, #96	; 0x60
 8000cde:	443b      	add	r3, r7
 8000ce0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ce4:	2b74      	cmp	r3, #116	; 0x74
 8000ce6:	d107      	bne.n	8000cf8 <wp_open+0x130>
 8000ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cea:	3317      	adds	r3, #23
 8000cec:	3360      	adds	r3, #96	; 0x60
 8000cee:	443b      	add	r3, r7
 8000cf0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cf4:	2b61      	cmp	r3, #97	; 0x61
 8000cf6:	d002      	beq.n	8000cfe <wp_open+0x136>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if(res==2)
 8000cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d104      	bne.n	8000d10 <wp_open+0x148>
  {
    f_close(file);
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f006 fc72 	bl	80075f0 <f_close>
    return WP_ERROR_FILE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e065      	b.n	8000ddc <wp_open+0x214>
  }

  //                    zagruzit format dannych
  format->Channels       = buff[22];
 8000d10:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	701a      	strb	r2, [r3, #0]
  format->SamplesPerSec  = buff[24] | (buff[25]<<8) | (buff[26]<<16) | (buff[27]<<24);
 8000d18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d1c:	b21a      	sxth	r2, r3
 8000d1e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d3a:	061b      	lsls	r3, r3, #24
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	805a      	strh	r2, [r3, #2]
  format->AvgBytesPerSec = buff[28] | (buff[29]<<8) | (buff[30]<<16) | (buff[31]<<24);
 8000d48:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d6a:	061b      	lsls	r3, r3, #24
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	819a      	strh	r2, [r3, #12]
  format->BitsPerSample  = buff[34] | (buff[35]<<8);
 8000d78:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	711a      	strb	r2, [r3, #4]
  format->Size           = buff[24+i]|(buff[25+i]<<8)|(buff[26+i]<<16)|(buff[27+i]<<24);
 8000d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d92:	3318      	adds	r3, #24
 8000d94:	3360      	adds	r3, #96	; 0x60
 8000d96:	443b      	add	r3, r7
 8000d98:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000da0:	3319      	adds	r3, #25
 8000da2:	3360      	adds	r3, #96	; 0x60
 8000da4:	443b      	add	r3, r7
 8000da6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	431a      	orrs	r2, r3
 8000dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db0:	331a      	adds	r3, #26
 8000db2:	3360      	adds	r3, #96	; 0x60
 8000db4:	443b      	add	r3, r7
 8000db6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc0:	331b      	adds	r3, #27
 8000dc2:	3360      	adds	r3, #96	; 0x60
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dca:	061b      	lsls	r3, r3, #24
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]

  //failovyi ukazatel na nachalo dannych
  //f_lseek(file,i+28);
  f_close(&MyFile);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <wp_open+0x21c>)
 8000dd6:	f006 fc0b 	bl	80075f0 <f_close>
  return WP_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3760      	adds	r7, #96	; 0x60
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000dc0 	.word	0x20000dc0

08000de8 <wp_init>:

void wp_init (wp_format *format)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
//??????????? ?????? ????? ???? ??? ?????? ?????? ?? ???
//RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;            //???????????? ????? GPIOA
RCC->AHBENR |= RCC_AHBENR_GPIOAEN;             // IO port A clock enabled
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <wp_init+0xfc>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	4a3b      	ldr	r2, [pc, #236]	; (8000ee4 <wp_init+0xfc>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	61d3      	str	r3, [r2, #28]
RCC->APB1ENR |= RCC_APB1ENR_DACEN;             //DAC interface clock enabled
 8000dfc:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <wp_init+0xfc>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	4a38      	ldr	r2, [pc, #224]	; (8000ee4 <wp_init+0xfc>)
 8000e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e06:	6253      	str	r3, [r2, #36]	; 0x24
DAC->CR      |= DAC_CR_DMAEN1;                 //DAC channel1 DMA mode enabled
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <wp_init+0x100>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <wp_init+0x100>)
 8000e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e12:	6013      	str	r3, [r2, #0]
DAC->CR      |= DAC_CR_BOFF1;                  //DAC channel1 output buffer disabled
 8000e14:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <wp_init+0x100>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <wp_init+0x100>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6013      	str	r3, [r2, #0]
//DAC->CR      &=~DAC_CR_BOFF1;
DAC->CR      |= DAC_CR_EN1;                    //DAC channel1 enabled
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <wp_init+0x100>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <wp_init+0x100>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6013      	str	r3, [r2, #0]
//????????? ?????? ????? ??? ??? ??????????? ?????? ?? ??????
//? ????????????? ??????? ?????? ??????? ?????? ????:
RCC->AHBENR         |= RCC_AHBENR_DMA1EN;      //DMA1 clock enabled
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <wp_init+0xfc>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <wp_init+0xfc>)
 8000e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e36:	61d3      	str	r3, [r2, #28]
DMA1_Channel2->CPAR  = (uint32_t)&DAC->DHR8R1; //Base address of the peripheral data register from which the data will be read
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <wp_init+0x104>)
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <wp_init+0x108>)
 8000e3c:	609a      	str	r2, [r3, #8]
												// Address of DAC channel1 8-bit right aligned data holding register
DMA1_Channel2->CMAR  = (uint32_t)&DAC_Buff[0]; //Base address of the memory area from which the data will be read.
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <wp_init+0x104>)
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <wp_init+0x10c>)
 8000e42:	60da      	str	r2, [r3, #12]
DMA1_Channel2->CCR  |=  DMA_CCR_DIR;          //Data transfer direction - read from memory
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <wp_init+0x104>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <wp_init+0x104>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CNDTR =  512;                   //Number of data to transfer
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <wp_init+0x104>)
 8000e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e56:	605a      	str	r2, [r3, #4]
DMA1_Channel2->CCR  &= ~DMA_CCR_PINC;         //Peripheral increment mode disabled
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <wp_init+0x104>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a23      	ldr	r2, [pc, #140]	; (8000eec <wp_init+0x104>)
 8000e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e62:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR  |=  DMA_CCR_MINC;         //Memory increment mode enabled
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <wp_init+0x104>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a20      	ldr	r2, [pc, #128]	; (8000eec <wp_init+0x104>)
 8000e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6e:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR  &= ~DMA_CCR_PSIZE;        //Peripheral size - 8 bit
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <wp_init+0x104>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <wp_init+0x104>)
 8000e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e7a:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR  &= ~DMA_CCR_MSIZE;        //Memory size - 8 bit
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <wp_init+0x104>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <wp_init+0x104>)
 8000e82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e86:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR  |=  DMA_CCR_CIRC;         //Circular mode enabled
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <wp_init+0x104>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <wp_init+0x104>)
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR  |=  DMA_CCR_PL;           //Channel priority level - very high
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <wp_init+0x104>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <wp_init+0x104>)
 8000e9a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e9e:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR  |=  DMA_CCR_EN;           //Channel enabled
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <wp_init+0x104>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <wp_init+0x104>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]
//?????? ???????? ?????????? ???????? ????? ??? ????? ??????????? ?? TIM6
RCC->APB1ENR        |=  RCC_APB1ENR_TIM6EN;    //Timer 6 clock enabled
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <wp_init+0xfc>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <wp_init+0xfc>)
 8000eb2:	f043 0310 	orr.w	r3, r3, #16
 8000eb6:	6253      	str	r3, [r2, #36]	; 0x24
TIM6->PSC            =  0;                     //Prescaler value - 8000 ???
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <wp_init+0x110>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
TIM6->ARR            =  (uint32_t)32000000/ format->SamplesPerSec; // Auto-reload value
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	885b      	ldrh	r3, [r3, #2]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <wp_init+0x110>)
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <wp_init+0x114>)
 8000ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
//TIM6->ARR            = (uint32_t)459; // before 32000000/44100
TIM6->DIER          |=  TIM_DIER_UDE; // Update DMA request enabled.
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <wp_init+0x110>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <wp_init+0x110>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	60d3      	str	r3, [r2, #12]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007400 	.word	0x40007400
 8000eec:	4002601c 	.word	0x4002601c
 8000ef0:	40007410 	.word	0x40007410
 8000ef4:	20000ff0 	.word	0x20000ff0
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	01e84800 	.word	0x01e84800

08000f00 <wave_playback>:

char wave_playback(const char *FileName)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  FRESULT res;                                //??? ????????????? ????????? ??????????
  //FIL file;                                   //???????? ??????
  UINT cnt;                                   //?????????? ??????? ??????????? ????

  memset(DAC_Buff,'\0',sizeof(DAC_Buff));
 8000f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4837      	ldr	r0, [pc, #220]	; (8000fec <wave_playback+0xec>)
 8000f10:	f009 fba4 	bl	800a65c <memset>

  res = f_open( &MyFile, FileName, FA_OPEN_EXISTING|FA_READ );   //??????? ???? FileName ??? ??????
 8000f14:	2201      	movs	r2, #1
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4835      	ldr	r0, [pc, #212]	; (8000ff0 <wave_playback+0xf0>)
 8000f1a:	f005 ffad 	bl	8006e78 <f_open>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
  if(res) return 1;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <wave_playback+0x2c>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e05b      	b.n	8000fe4 <wave_playback+0xe4>
  res = f_lseek(&MyFile,0x2c);                  //??????????? ????????? ?? ?????? ???????? ??????
 8000f2c:	212c      	movs	r1, #44	; 0x2c
 8000f2e:	4830      	ldr	r0, [pc, #192]	; (8000ff0 <wave_playback+0xf0>)
 8000f30:	f006 fb8d 	bl	800764e <f_lseek>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
  if(res) return 2;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <wave_playback+0x42>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e050      	b.n	8000fe4 <wave_playback+0xe4>
  f_read (&MyFile,&DAC_Buff[0],512,&cnt);       //????????? ????? ???? ???????
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	4928      	ldr	r1, [pc, #160]	; (8000fec <wave_playback+0xec>)
 8000f4c:	4828      	ldr	r0, [pc, #160]	; (8000ff0 <wave_playback+0xf0>)
 8000f4e:	f006 f958 	bl	8007202 <f_read>
  if(res) return 3;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <wave_playback+0x5c>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e043      	b.n	8000fe4 <wave_playback+0xe4>
  TIM6->CR1 |= TIM_CR1_CEN;                   //Counter enable
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <wave_playback+0xf4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <wave_playback+0xf4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

  //                        ???????????????
  while(1)
  {
     while(!(DMA1->ISR & DMA_ISR_HTIF2)) {}   //Channel 2 Half Transfer flag
 8000f68:	bf00      	nop
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <wave_playback+0xf8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <wave_playback+0x6a>
     f_read (&MyFile,&DAC_Buff[0],256,&cnt);    //????????? ?? ???????
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <wave_playback+0xec>)
 8000f80:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <wave_playback+0xf0>)
 8000f82:	f006 f93e 	bl	8007202 <f_read>
     DMA1->IFCR |= DMA_ISR_HTIF2;             //???????? ????
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <wave_playback+0xf8>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <wave_playback+0xf8>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6053      	str	r3, [r2, #4]
     if(cnt<256)break;                        //???? ????? ?????
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2bff      	cmp	r3, #255	; 0xff
 8000f96:	d918      	bls.n	8000fca <wave_playback+0xca>

     while(!(DMA1->ISR & DMA_ISR_TCIF2)) {}   //Channel 2 Transfer Complete flag
 8000f98:	bf00      	nop
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <wave_playback+0xf8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f9      	beq.n	8000f9a <wave_playback+0x9a>
     f_read (&MyFile,&DAC_Buff[256],256,&cnt);  //????????? ?? ???????
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <wave_playback+0xfc>)
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <wave_playback+0xf0>)
 8000fb2:	f006 f926 	bl	8007202 <f_read>
     DMA1->IFCR |= DMA_ISR_TCIF2;             //???????? ????
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <wave_playback+0xf8>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <wave_playback+0xf8>)
 8000fbc:	f043 0320 	orr.w	r3, r3, #32
 8000fc0:	6053      	str	r3, [r2, #4]
     if(cnt<256)break;                        //???? ????? ?????
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2bff      	cmp	r3, #255	; 0xff
 8000fc6:	d902      	bls.n	8000fce <wave_playback+0xce>
     while(!(DMA1->ISR & DMA_ISR_HTIF2)) {}   //Channel 2 Half Transfer flag
 8000fc8:	e7ce      	b.n	8000f68 <wave_playback+0x68>
     if(cnt<256)break;                        //???? ????? ?????
 8000fca:	bf00      	nop
 8000fcc:	e000      	b.n	8000fd0 <wave_playback+0xd0>
     if(cnt<256)break;                        //???? ????? ?????
 8000fce:	bf00      	nop
  }

  TIM6->CR1 &= ~TIM_CR1_CEN;                  //Counter disable
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <wave_playback+0xf4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <wave_playback+0xf4>)
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]
  f_close(&MyFile);                             //??????? ????
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <wave_playback+0xf0>)
 8000fde:	f006 fb07 	bl	80075f0 <f_close>
  return 0;                                   //???????? ?????????? ?-??
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000ff0 	.word	0x20000ff0
 8000ff0:	20000dc0 	.word	0x20000dc0
 8000ff4:	40001000 	.word	0x40001000
 8000ff8:	40026000 	.word	0x40026000
 8000ffc:	200010f0 	.word	0x200010f0

08001000 <ParamToArray>:

void ParamToArray( char *pParam )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
int count,num=0,ParamLength;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
char *pStr=NULL, *pPrev=NULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    pStr=pPrev=pParam;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	617b      	str	r3, [r7, #20]
    ParamLength=strlen(pParam);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f8b9 	bl	8000194 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	60fb      	str	r3, [r7, #12]
    for(count=0; count<ParamLength; count++){
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e027      	b.n	800107c <ParamToArray+0x7c>
      if(*pStr!=' ' && *pStr!='/' && *pStr!=':'){
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b20      	cmp	r3, #32
 8001032:	d00b      	beq.n	800104c <ParamToArray+0x4c>
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b2f      	cmp	r3, #47	; 0x2f
 800103a:	d007      	beq.n	800104c <ParamToArray+0x4c>
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b3a      	cmp	r3, #58	; 0x3a
 8001042:	d003      	beq.n	800104c <ParamToArray+0x4c>
          pStr++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e014      	b.n	8001076 <ParamToArray+0x76>
      }else{
          *pStr='\0';
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
          strcpy(TimeArray[num],pPrev);
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <ParamToArray+0x90>)
 800105c:	4413      	add	r3, r2
 800105e:	6939      	ldr	r1, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f009 fb23 	bl	800a6ac <strcpy>
          pStr++;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
          pPrev=pStr;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
          num++;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	3301      	adds	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
    for(count=0; count<ParamLength; count++){
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbd3      	blt.n	800102c <ParamToArray+0x2c>
      }
    }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000afc 	.word	0x20000afc

08001094 <DecToBCD>:
uint8_t DecToBCD( int num){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	return (uint8_t)((num%10)+(num-(num%10))/10*16);
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <DecToBCD+0x60>)
 80010a0:	fb83 1302 	smull	r1, r3, r3, r2
 80010a4:	1099      	asrs	r1, r3, #2
 80010a6:	17d3      	asrs	r3, r2, #31
 80010a8:	1ac9      	subs	r1, r1, r3
 80010aa:	460b      	mov	r3, r1
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	1ad1      	subs	r1, r2, r3
 80010b4:	b2c8      	uxtb	r0, r1
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <DecToBCD+0x60>)
 80010ba:	fb83 2301 	smull	r2, r3, r3, r1
 80010be:	109a      	asrs	r2, r3, #2
 80010c0:	17cb      	asrs	r3, r1, #31
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	1aca      	subs	r2, r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <DecToBCD+0x60>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1092      	asrs	r2, r2, #2
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4403      	add	r3, r0
 80010e6:	b2db      	uxtb	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	66666667 	.word	0x66666667

080010f8 <BCDToDec>:

int BCDToDec( uint8_t num){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	return (int)((num%16)+(num-(num%16))/16*10);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 010f 	and.w	r1, r3, #15
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	111a      	asrs	r2, r3, #4
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	440b      	add	r3, r1
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SetTime>:

void SetTime( RTC_DateTypeDef *pDate, RTC_TimeTypeDef *pTime ){
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
char ch;
HAL_StatusTypeDef status;
int count=0, num=0, flag;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]

	do{
		memset( Param, '\0', sizeof(Param));
 8001132:	2214      	movs	r2, #20
 8001134:	2100      	movs	r1, #0
 8001136:	489e      	ldr	r0, [pc, #632]	; (80013b0 <SetTime+0x290>)
 8001138:	f009 fa90 	bl	800a65c <memset>
		ch='\0';
 800113c:	2300      	movs	r3, #0
 800113e:	72bb      	strb	r3, [r7, #10]
		flag=0;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
		count=0;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  		HAL_UART_Transmit(&huart2, "in form <dd/mm/yy hh:mm:ss> : ", 29, 100);
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	221d      	movs	r2, #29
 800114c:	4999      	ldr	r1, [pc, #612]	; (80013b4 <SetTime+0x294>)
 800114e:	489a      	ldr	r0, [pc, #616]	; (80013b8 <SetTime+0x298>)
 8001150:	f003 fd27 	bl	8004ba2 <HAL_UART_Transmit>

		while(ch!='\r'){
 8001154:	e02b      	b.n	80011ae <SetTime+0x8e>
			status=HAL_UART_Receive( &huart2, (uint8_t *)&ch, 1, 100);
 8001156:	f107 010a 	add.w	r1, r7, #10
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	2201      	movs	r2, #1
 800115e:	4896      	ldr	r0, [pc, #600]	; (80013b8 <SetTime+0x298>)
 8001160:	f003 fdb8 	bl	8004cd4 <HAL_UART_Receive>
 8001164:	4603      	mov	r3, r0
 8001166:	72fb      	strb	r3, [r7, #11]
			if(status==HAL_OK){
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d11f      	bne.n	80011ae <SetTime+0x8e>
				HAL_UART_Transmit( &huart2, (uint8_t *)&ch, 1, 100);
 800116e:	f107 010a 	add.w	r1, r7, #10
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	2201      	movs	r2, #1
 8001176:	4890      	ldr	r0, [pc, #576]	; (80013b8 <SetTime+0x298>)
 8001178:	f003 fd13 	bl	8004ba2 <HAL_UART_Transmit>
				if( ch==127 && count>0) {
 800117c:	7abb      	ldrb	r3, [r7, #10]
 800117e:	2b7f      	cmp	r3, #127	; 0x7f
 8001180:	d106      	bne.n	8001190 <SetTime+0x70>
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd03      	ble.n	8001190 <SetTime+0x70>
					count--;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3b01      	subs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e00e      	b.n	80011ae <SetTime+0x8e>
				}else{
					if( count>=0 && ch!='\r'){
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <SetTime+0x8e>
 8001196:	7abb      	ldrb	r3, [r7, #10]
 8001198:	2b0d      	cmp	r3, #13
 800119a:	d008      	beq.n	80011ae <SetTime+0x8e>
						Param[count]=ch;
 800119c:	7ab9      	ldrb	r1, [r7, #10]
 800119e:	4a84      	ldr	r2, [pc, #528]	; (80013b0 <SetTime+0x290>)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	4413      	add	r3, r2
 80011a4:	460a      	mov	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
						count++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
		while(ch!='\r'){
 80011ae:	7abb      	ldrb	r3, [r7, #10]
 80011b0:	2b0d      	cmp	r3, #13
 80011b2:	d1d0      	bne.n	8001156 <SetTime+0x36>
					}
				}
			}
		}

		Param[count]=' ';
 80011b4:	4a7e      	ldr	r2, [pc, #504]	; (80013b0 <SetTime+0x290>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	4413      	add	r3, r2
 80011ba:	2220      	movs	r2, #32
 80011bc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "\n", 1, 100);
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	2201      	movs	r2, #1
 80011c2:	497e      	ldr	r1, [pc, #504]	; (80013bc <SetTime+0x29c>)
 80011c4:	487c      	ldr	r0, [pc, #496]	; (80013b8 <SetTime+0x298>)
 80011c6:	f003 fcec 	bl	8004ba2 <HAL_UART_Transmit>

		ParamToArray(Param);
 80011ca:	4879      	ldr	r0, [pc, #484]	; (80013b0 <SetTime+0x290>)
 80011cc:	f7ff ff18 	bl	8001000 <ParamToArray>

		for( count=0; count<6; count++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e0c5      	b.n	8001362 <SetTime+0x242>
	  		for( num=0; num<61; num++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e0bb      	b.n	8001354 <SetTime+0x234>
		  		if( (strcmp(TimeArray[count],Numbers[num]))==0 ){
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	4a76      	ldr	r2, [pc, #472]	; (80013c0 <SetTime+0x2a0>)
 80011e6:	1898      	adds	r0, r3, r2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <SetTime+0x2a4>)
 80011f2:	4413      	add	r3, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7fe ffc3 	bl	8000180 <strcmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 809d 	bne.w	800133c <SetTime+0x21c>
					switch(count){
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2b05      	cmp	r3, #5
 8001206:	f200 80a2 	bhi.w	800134e <SetTime+0x22e>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <SetTime+0xf0>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001229 	.word	0x08001229
 8001214:	08001257 	.word	0x08001257
 8001218:	08001285 	.word	0x08001285
 800121c:	080012b3 	.word	0x080012b3
 8001220:	080012e1 	.word	0x080012e1
 8001224:	0800130f 	.word	0x0800130f
						case 0:  pDate->Date=DecToBCD(num);
 8001228:	6938      	ldr	r0, [r7, #16]
 800122a:	f7ff ff33 	bl	8001094 <DecToBCD>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	709a      	strb	r2, [r3, #2]
								 if(num>=1 && num<=31 ){
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dd05      	ble.n	8001248 <SetTime+0x128>
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b1f      	cmp	r3, #31
 8001240:	dc02      	bgt.n	8001248 <SetTime+0x128>
									 flag=1;
 8001242:	2301      	movs	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	e003      	b.n	8001250 <SetTime+0x130>
								 }else{
									 flag=0;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
									 count=6;
 800124c:	2306      	movs	r3, #6
 800124e:	617b      	str	r3, [r7, #20]
								 }
								 num=61;
 8001250:	233d      	movs	r3, #61	; 0x3d
 8001252:	613b      	str	r3, [r7, #16]
						break;
 8001254:	e07b      	b.n	800134e <SetTime+0x22e>
						case 1:  pDate->Month=DecToBCD(num);
 8001256:	6938      	ldr	r0, [r7, #16]
 8001258:	f7ff ff1c 	bl	8001094 <DecToBCD>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	705a      	strb	r2, [r3, #1]
								 if(num>=1 && num<=12 ){
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dd05      	ble.n	8001276 <SetTime+0x156>
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	dc02      	bgt.n	8001276 <SetTime+0x156>
									 flag=1;
 8001270:	2301      	movs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e003      	b.n	800127e <SetTime+0x15e>
								 }else{
									 flag=0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
									 count=6;
 800127a:	2306      	movs	r3, #6
 800127c:	617b      	str	r3, [r7, #20]
								 }
								 num=61;
 800127e:	233d      	movs	r3, #61	; 0x3d
 8001280:	613b      	str	r3, [r7, #16]
						break;
 8001282:	e064      	b.n	800134e <SetTime+0x22e>
						case 2:  pDate->Year=DecToBCD(num);
 8001284:	6938      	ldr	r0, [r7, #16]
 8001286:	f7ff ff05 	bl	8001094 <DecToBCD>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	70da      	strb	r2, [r3, #3]
								 if(num>=0 && num<=59 ){
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db05      	blt.n	80012a4 <SetTime+0x184>
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b3b      	cmp	r3, #59	; 0x3b
 800129c:	dc02      	bgt.n	80012a4 <SetTime+0x184>
									 flag=1;
 800129e:	2301      	movs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e003      	b.n	80012ac <SetTime+0x18c>
								 }else{
									 flag=0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
									 count=6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	617b      	str	r3, [r7, #20]
								 }
								 num=61;
 80012ac:	233d      	movs	r3, #61	; 0x3d
 80012ae:	613b      	str	r3, [r7, #16]
						break;
 80012b0:	e04d      	b.n	800134e <SetTime+0x22e>
						case 3:  pTime->Hours=DecToBCD(num);
 80012b2:	6938      	ldr	r0, [r7, #16]
 80012b4:	f7ff feee 	bl	8001094 <DecToBCD>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	701a      	strb	r2, [r3, #0]
								 if(num>=0 && num<=23 ){
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db05      	blt.n	80012d2 <SetTime+0x1b2>
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b17      	cmp	r3, #23
 80012ca:	dc02      	bgt.n	80012d2 <SetTime+0x1b2>
									 flag=1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e003      	b.n	80012da <SetTime+0x1ba>
								 }else{
									 flag=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
									 count=6;
 80012d6:	2306      	movs	r3, #6
 80012d8:	617b      	str	r3, [r7, #20]
								 }
								 num=61;
 80012da:	233d      	movs	r3, #61	; 0x3d
 80012dc:	613b      	str	r3, [r7, #16]
						break;
 80012de:	e036      	b.n	800134e <SetTime+0x22e>
						case 4:  pTime->Minutes=DecToBCD(num);
 80012e0:	6938      	ldr	r0, [r7, #16]
 80012e2:	f7ff fed7 	bl	8001094 <DecToBCD>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	705a      	strb	r2, [r3, #1]
								 if(num>=0 && num<=59 ){
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db05      	blt.n	8001300 <SetTime+0x1e0>
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b3b      	cmp	r3, #59	; 0x3b
 80012f8:	dc02      	bgt.n	8001300 <SetTime+0x1e0>
									 flag=1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e003      	b.n	8001308 <SetTime+0x1e8>
								 }else{
									 flag=0;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
									 count=6;
 8001304:	2306      	movs	r3, #6
 8001306:	617b      	str	r3, [r7, #20]
								 }
								 num=61;
 8001308:	233d      	movs	r3, #61	; 0x3d
 800130a:	613b      	str	r3, [r7, #16]
						break;
 800130c:	e01f      	b.n	800134e <SetTime+0x22e>
						case 5:  pTime->Seconds=DecToBCD(num);
 800130e:	6938      	ldr	r0, [r7, #16]
 8001310:	f7ff fec0 	bl	8001094 <DecToBCD>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	709a      	strb	r2, [r3, #2]
								 if(num>=0 && num<=59 ){
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db05      	blt.n	800132e <SetTime+0x20e>
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b3b      	cmp	r3, #59	; 0x3b
 8001326:	dc02      	bgt.n	800132e <SetTime+0x20e>
									 flag=1;
 8001328:	2301      	movs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e003      	b.n	8001336 <SetTime+0x216>
								 }else{
									 flag=0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
									 count=6;
 8001332:	2306      	movs	r3, #6
 8001334:	617b      	str	r3, [r7, #20]
								 }
								 num=61;
 8001336:	233d      	movs	r3, #61	; 0x3d
 8001338:	613b      	str	r3, [r7, #16]
						break;
 800133a:	e008      	b.n	800134e <SetTime+0x22e>
					}
				}else if( num==60 ){ flag=0; num=61; count=6; }
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b3c      	cmp	r3, #60	; 0x3c
 8001340:	d105      	bne.n	800134e <SetTime+0x22e>
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	233d      	movs	r3, #61	; 0x3d
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	2306      	movs	r3, #6
 800134c:	617b      	str	r3, [r7, #20]
	  		for( num=0; num<61; num++){
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3301      	adds	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b3c      	cmp	r3, #60	; 0x3c
 8001358:	f77f af40 	ble.w	80011dc <SetTime+0xbc>
		for( count=0; count<6; count++){
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b05      	cmp	r3, #5
 8001366:	f77f af36 	ble.w	80011d6 <SetTime+0xb6>
			}
		}
		if( !flag ) HAL_UART_Transmit( &huart2, "\r\n WRONG TIME OR DATE !!!\r\n", 28, 40);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <SetTime+0x25c>
 8001370:	2328      	movs	r3, #40	; 0x28
 8001372:	221c      	movs	r2, #28
 8001374:	4914      	ldr	r1, [pc, #80]	; (80013c8 <SetTime+0x2a8>)
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <SetTime+0x298>)
 8001378:	f003 fc13 	bl	8004ba2 <HAL_UART_Transmit>
	}while( !flag );
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f43f aed7 	beq.w	8001132 <SetTime+0x12>

	pDate->WeekDay = RTC_WEEKDAY_MONDAY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
	pTime->TimeFormat = 0x0;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	70da      	strb	r2, [r3, #3]
	pTime->SubSeconds = 0x0;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
	pTime->SecondFraction = 0x0;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
	pTime->DayLightSaving = 0x0;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
	pTime->StoreOperation = 0x0;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000b14 	.word	0x20000b14
 80013b4:	0800b054 	.word	0x0800b054
 80013b8:	20000abc 	.word	0x20000abc
 80013bc:	0800b074 	.word	0x0800b074
 80013c0:	20000afc 	.word	0x20000afc
 80013c4:	20000000 	.word	0x20000000
 80013c8:	0800b078 	.word	0x0800b078

080013cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013de:	f000 fd61 	bl	8001ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <SD_cmd>:
#define CMD55 (0x40+55) // APP_CMD 
#define CMD58 (0x40+58) // READ_OCR 
//-------------------------------------------------- 

static uint8_t SD_cmd (uint8_t cmd, uint32_t arg) 
{ 
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res; 
  
  // ACMD<n> is the command sequense of CMD55-CMD<n> 
  if (cmd & 0x80) 
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da0e      	bge.n	800142e <SD_cmd+0x32>
  { 
      cmd &= 0x7F; 
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001416:	71fb      	strb	r3, [r7, #7]
      res = SD_cmd(CMD55, 0); 
 8001418:	2100      	movs	r1, #0
 800141a:	2077      	movs	r0, #119	; 0x77
 800141c:	f7ff ffee 	bl	80013fc <SD_cmd>
 8001420:	4603      	mov	r3, r0
 8001422:	73bb      	strb	r3, [r7, #14]
      if (res > 1) return res; 
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d901      	bls.n	800142e <SD_cmd+0x32>
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	e049      	b.n	80014c2 <SD_cmd+0xc6>
  }
  
  // Select the card 
  SS_SD_DESELECT(); 
 800142e:	2201      	movs	r2, #1
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	4826      	ldr	r0, [pc, #152]	; (80014cc <SD_cmd+0xd0>)
 8001434:	f001 f802 	bl	800243c <HAL_GPIO_WritePin>
  SPI_ReceiveByte(); 
 8001438:	f000 fa61 	bl	80018fe <SPI_ReceiveByte>
  SS_SD_SELECT(); 
 800143c:	2200      	movs	r2, #0
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	4822      	ldr	r0, [pc, #136]	; (80014cc <SD_cmd+0xd0>)
 8001442:	f000 fffb 	bl	800243c <HAL_GPIO_WritePin>
  SPI_ReceiveByte(); 
 8001446:	f000 fa5a 	bl	80018fe <SPI_ReceiveByte>
  
  // Send a command packet 
  SPI_SendByte(cmd); // Start + Command index 
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fa49 	bl	80018e4 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24] 
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	0e1b      	lsrs	r3, r3, #24
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fa43 	bl	80018e4 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16] 
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fa3d 	bl	80018e4 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8] 
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fa37 	bl	80018e4 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fa32 	bl	80018e4 <SPI_SendByte>
  
  n = 0x01; // Dummy CRC + Stop 
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0) 
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b40      	cmp	r3, #64	; 0x40
 8001488:	d101      	bne.n	800148e <SD_cmd+0x92>
 800148a:	2395      	movs	r3, #149	; 0x95
 800148c:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA) 
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b48      	cmp	r3, #72	; 0x48
 8001492:	d101      	bne.n	8001498 <SD_cmd+0x9c>
 8001494:	2387      	movs	r3, #135	; 0x87
 8001496:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n); 
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fa22 	bl	80018e4 <SPI_SendByte>
  
  // Receive a command response 
  n = 10; // Wait for a valid response in timeout of 10 attempts 
 80014a0:	230a      	movs	r3, #10
 80014a2:	73fb      	strb	r3, [r7, #15]
  do { 
    res = SPI_ReceiveByte(); 
 80014a4:	f000 fa2b 	bl	80018fe <SPI_ReceiveByte>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n); 
 80014ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da05      	bge.n	80014c0 <SD_cmd+0xc4>
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f1      	bne.n	80014a4 <SD_cmd+0xa8>
  
  
  return res; 
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
} 
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020000 	.word	0x40020000

080014d0 <SD_PowerOn>:

void SD_PowerOn(void) 
{ 
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  Timer1 = 0; 
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SD_PowerOn+0x20>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	801a      	strh	r2, [r3, #0]
  while(Timer1<2); // Gdem 20 msec dlja stabilizazii naprjagenija
 80014da:	bf00      	nop
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SD_PowerOn+0x20>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d9fa      	bls.n	80014dc <SD_PowerOn+0xc>
} 
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000b28 	.word	0x20000b28

080014f4 <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba) 
{ 
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint8_t result; 
  uint16_t cnt;
  
  result=SD_cmd (CMD17, lba); //CMD17 datasheet str 50 i 96
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	2051      	movs	r0, #81	; 0x51
 8001502:	f7ff ff7b 	bl	80013fc <SD_cmd>
 8001506:	4603      	mov	r3, r0
 8001508:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 5; //wyity, esli resultat ne 0x00
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SD_Read_Block+0x20>
 8001510:	2305      	movs	r3, #5
 8001512:	e02f      	b.n	8001574 <SD_Read_Block+0x80>
  
  SPI_Release(); 
 8001514:	f000 fa00 	bl	8001918 <SPI_Release>
  cnt=0; 
 8001518:	2300      	movs	r3, #0
 800151a:	81fb      	strh	r3, [r7, #14]
  do{ //gdem nachala bloka 
    result=SPI_ReceiveByte(); 
 800151c:	f000 f9ef 	bl	80018fe <SPI_ReceiveByte>
 8001520:	4603      	mov	r3, r0
 8001522:	737b      	strb	r3, [r7, #13]
    cnt++; 
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	3301      	adds	r3, #1
 8001528:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFE)&&(cnt<0xFFFF) ); 
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	2bfe      	cmp	r3, #254	; 0xfe
 800152e:	d004      	beq.n	800153a <SD_Read_Block+0x46>
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001536:	4293      	cmp	r3, r2
 8001538:	d1f0      	bne.n	800151c <SD_Read_Block+0x28>
  if (cnt>=0xFFFF) return 5; 
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <SD_Read_Block+0x54>
 8001544:	2305      	movs	r3, #5
 8001546:	e015      	b.n	8001574 <SD_Read_Block+0x80>
  for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //poluchaem bayty bloka iz shiny w bufer
 8001548:	2300      	movs	r3, #0
 800154a:	81fb      	strh	r3, [r7, #14]
 800154c:	e009      	b.n	8001562 <SD_Read_Block+0x6e>
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	18d4      	adds	r4, r2, r3
 8001554:	f000 f9d3 	bl	80018fe <SPI_ReceiveByte>
 8001558:	4603      	mov	r3, r0
 800155a:	7023      	strb	r3, [r4, #0]
 800155c:	89fb      	ldrh	r3, [r7, #14]
 800155e:	3301      	adds	r3, #1
 8001560:	81fb      	strh	r3, [r7, #14]
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001568:	d3f1      	bcc.n	800154e <SD_Read_Block+0x5a>
  SPI_Release(); //propuskaem kontrolnuyu summu 
 800156a:	f000 f9d5 	bl	8001918 <SPI_Release>
  SPI_Release();
 800156e:	f000 f9d3 	bl	8001918 <SPI_Release>
  
  return 0; 
 8001572:	2300      	movs	r3, #0
} 
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}

0800157c <SD_Write_Block>:

uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba) 
{ 
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint8_t result; 
  uint16_t cnt; 
  result=SD_cmd(CMD24,lba); //CMD24 datasheet str 51 i 97-98 
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	2058      	movs	r0, #88	; 0x58
 800158a:	f7ff ff37 	bl	80013fc <SD_cmd>
 800158e:	4603      	mov	r3, r0
 8001590:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 6; //wyity, esli resultat ne 0x00 
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SD_Write_Block+0x20>
 8001598:	2306      	movs	r3, #6
 800159a:	e03d      	b.n	8001618 <SD_Write_Block+0x9c>
  SPI_Release(); 
 800159c:	f000 f9bc 	bl	8001918 <SPI_Release>
  SPI_SendByte (0xFE); //nachalo bufera
 80015a0:	20fe      	movs	r0, #254	; 0xfe
 80015a2:	f000 f99f 	bl	80018e4 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); //dannye 
 80015a6:	2300      	movs	r3, #0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	e009      	b.n	80015c0 <SD_Write_Block+0x44>
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f995 	bl	80018e4 <SPI_SendByte>
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	3301      	adds	r3, #1
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c6:	d3f1      	bcc.n	80015ac <SD_Write_Block+0x30>
  SPI_Release(); //propustim kontrolnuyu summu 
 80015c8:	f000 f9a6 	bl	8001918 <SPI_Release>
  SPI_Release(); 
 80015cc:	f000 f9a4 	bl	8001918 <SPI_Release>
  result=SPI_ReceiveByte(); 
 80015d0:	f000 f995 	bl	80018fe <SPI_ReceiveByte>
 80015d4:	4603      	mov	r3, r0
 80015d6:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) return 6; //wyity, esli resultat ne 0x05 (datasheet str 111) 
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	f003 0305 	and.w	r3, r3, #5
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d001      	beq.n	80015e6 <SD_Write_Block+0x6a>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e018      	b.n	8001618 <SD_Write_Block+0x9c>
  cnt=0; 
 80015e6:	2300      	movs	r3, #0
 80015e8:	81fb      	strh	r3, [r7, #14]
  do { // gdem okonchanuya sostoyaniya BUSY 
    result=SPI_ReceiveByte(); 
 80015ea:	f000 f988 	bl	80018fe <SPI_ReceiveByte>
 80015ee:	4603      	mov	r3, r0
 80015f0:	737b      	strb	r3, [r7, #13]
    cnt++; 
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	3301      	adds	r3, #1
 80015f6:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) ); 
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d004      	beq.n	8001608 <SD_Write_Block+0x8c>
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001604:	4293      	cmp	r3, r2
 8001606:	d1f0      	bne.n	80015ea <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6; 
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <SD_Write_Block+0x9a>
 8001612:	2306      	movs	r3, #6
 8001614:	e000      	b.n	8001618 <SD_Write_Block+0x9c>
  return 0; 
 8001616:	2300      	movs	r3, #0
} 
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <sd_ini>:

uint8_t sd_ini(void) 
{ 
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af02      	add	r7, sp, #8
  uint8_t ocr[4]; 
  int16_t tmr; 
  uint32_t temp;
  
  //LD_OFF; 
  sdinfo.type = 0;
 8001626:	4b92      	ldr	r3, [pc, #584]	; (8001870 <sd_ini+0x250>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
  
  SD_CARDDETECT();
 800162c:	2201      	movs	r2, #1
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	4890      	ldr	r0, [pc, #576]	; (8001874 <sd_ini+0x254>)
 8001632:	f000 ff03 	bl	800243c <HAL_GPIO_WritePin>
  
  temp = hspi3.Init.BaudRatePrescaler; 
 8001636:	4b90      	ldr	r3, [pc, #576]	; (8001878 <sd_ini+0x258>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	60bb      	str	r3, [r7, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;    
 800163c:	4b8e      	ldr	r3, [pc, #568]	; (8001878 <sd_ini+0x258>)
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	61da      	str	r2, [r3, #28]
  HAL_SPI_Init(&hspi3);
 8001642:	488d      	ldr	r0, [pc, #564]	; (8001878 <sd_ini+0x258>)
 8001644:	f002 fa93 	bl	8003b6e <HAL_SPI_Init>
  SS_SD_DESELECT(); 
 8001648:	2201      	movs	r2, #1
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	4889      	ldr	r0, [pc, #548]	; (8001874 <sd_ini+0x254>)
 800164e:	f000 fef5 	bl	800243c <HAL_GPIO_WritePin>
  for(i=0;i<10;i++) //80 impulsov (ne menee 74) datasheet str 91 
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e004      	b.n	8001662 <sd_ini+0x42>
      SPI_Release(); 
 8001658:	f000 f95e 	bl	8001918 <SPI_Release>
  for(i=0;i<10;i++) //80 impulsov (ne menee 74) datasheet str 91 
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d9f7      	bls.n	8001658 <sd_ini+0x38>
  hspi3.Init.BaudRatePrescaler = temp; 
 8001668:	4a83      	ldr	r2, [pc, #524]	; (8001878 <sd_ini+0x258>)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	61d3      	str	r3, [r2, #28]
  HAL_SPI_Init(&hspi3); 
 800166e:	4882      	ldr	r0, [pc, #520]	; (8001878 <sd_ini+0x258>)
 8001670:	f002 fa7d 	bl	8003b6e <HAL_SPI_Init>
  SS_SD_SELECT(); 
 8001674:	2200      	movs	r2, #0
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	487e      	ldr	r0, [pc, #504]	; (8001874 <sd_ini+0x254>)
 800167a:	f000 fedf 	bl	800243c <HAL_GPIO_WritePin>
  //SPI_SendByte(0x35); 
  //SPI_SendByte(0x53); 
  while( SD_cmd(CMD0, 0) != 1);
 800167e:	bf00      	nop
 8001680:	2100      	movs	r1, #0
 8001682:	2040      	movs	r0, #64	; 0x40
 8001684:	f7ff feba 	bl	80013fc <SD_cmd>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d1f8      	bne.n	8001680 <sd_ini+0x60>
  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state 
 800168e:	2100      	movs	r1, #0
 8001690:	2040      	movs	r0, #64	; 0x40
 8001692:	f7ff feb3 	bl	80013fc <SD_cmd>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 80c0 	bne.w	800181e <sd_ini+0x1fe>
  {
    SPI_Release(); 
 800169e:	f000 f93b 	bl	8001918 <SPI_Release>
    if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2 
 80016a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80016a6:	2048      	movs	r0, #72	; 0x48
 80016a8:	f7ff fea8 	bl	80013fc <SD_cmd>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f040 808c 	bne.w	80017cc <sd_ini+0x1ac>
    {
      for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte(); 
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e00c      	b.n	80016d4 <sd_ini+0xb4>
 80016ba:	7bfc      	ldrb	r4, [r7, #15]
 80016bc:	f000 f91f 	bl	80018fe <SPI_ReceiveByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	f104 0310 	add.w	r3, r4, #16
 80016c8:	443b      	add	r3, r7
 80016ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d9ef      	bls.n	80016ba <sd_ini+0x9a>
      sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]); 
 80016da:	793b      	ldrb	r3, [r7, #4]
 80016dc:	4619      	mov	r1, r3
 80016de:	797b      	ldrb	r3, [r7, #5]
 80016e0:	4618      	mov	r0, r3
 80016e2:	79bb      	ldrb	r3, [r7, #6]
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	4963      	ldr	r1, [pc, #396]	; (800187c <sd_ini+0x25c>)
 80016f0:	4863      	ldr	r0, [pc, #396]	; (8001880 <sd_ini+0x260>)
 80016f2:	f008 ffbb 	bl	800a66c <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80016f6:	4862      	ldr	r0, [pc, #392]	; (8001880 <sd_ini+0x260>)
 80016f8:	f7fe fd4c 	bl	8000194 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	495e      	ldr	r1, [pc, #376]	; (8001880 <sd_ini+0x260>)
 8001706:	485f      	ldr	r0, [pc, #380]	; (8001884 <sd_ini+0x264>)
 8001708:	f003 fa4b 	bl	8004ba2 <HAL_UART_Transmit>
      
      // Get trailing return value of R7 resp 
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V 
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b01      	cmp	r3, #1
 8001710:	f040 8087 	bne.w	8001822 <sd_ini+0x202>
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2baa      	cmp	r3, #170	; 0xaa
 8001718:	f040 8083 	bne.w	8001822 <sd_ini+0x202>
      {
        for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--) ; // Wait for leaving idle state (ACMD41 with HCS bit)
 800171c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001720:	81bb      	strh	r3, [r7, #12]
 8001722:	e005      	b.n	8001730 <sd_ini+0x110>
 8001724:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	81bb      	strh	r3, [r7, #12]
 8001730:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <sd_ini+0x128>
 8001738:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800173c:	20e9      	movs	r0, #233	; 0xe9
 800173e:	f7ff fe5d 	bl	80013fc <SD_cmd>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ed      	bne.n	8001724 <sd_ini+0x104>
        if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR 
 8001748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d068      	beq.n	8001822 <sd_ini+0x202>
 8001750:	2100      	movs	r1, #0
 8001752:	207a      	movs	r0, #122	; 0x7a
 8001754:	f7ff fe52 	bl	80013fc <SD_cmd>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d161      	bne.n	8001822 <sd_ini+0x202>
          for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e00c      	b.n	800177e <sd_ini+0x15e>
 8001764:	7bfc      	ldrb	r4, [r7, #15]
 8001766:	f000 f8ca 	bl	80018fe <SPI_ReceiveByte>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	f104 0310 	add.w	r3, r4, #16
 8001772:	443b      	add	r3, r7
 8001774:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	3301      	adds	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d9ef      	bls.n	8001764 <sd_ini+0x144>
          sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]); 
 8001784:	793b      	ldrb	r3, [r7, #4]
 8001786:	4619      	mov	r1, r3
 8001788:	797b      	ldrb	r3, [r7, #5]
 800178a:	4618      	mov	r0, r3
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	9201      	str	r2, [sp, #4]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4603      	mov	r3, r0
 8001796:	460a      	mov	r2, r1
 8001798:	4938      	ldr	r1, [pc, #224]	; (800187c <sd_ini+0x25c>)
 800179a:	4839      	ldr	r0, [pc, #228]	; (8001880 <sd_ini+0x260>)
 800179c:	f008 ff66 	bl	800a66c <siprintf>
          HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000); 
 80017a0:	4837      	ldr	r0, [pc, #220]	; (8001880 <sd_ini+0x260>)
 80017a2:	f7fe fcf7 	bl	8000194 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	4934      	ldr	r1, [pc, #208]	; (8001880 <sd_ini+0x260>)
 80017b0:	4834      	ldr	r0, [pc, #208]	; (8001884 <sd_ini+0x264>)
 80017b2:	f003 f9f6 	bl	8004ba2 <HAL_UART_Transmit>
          sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80017b6:	793b      	ldrb	r3, [r7, #4]
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <sd_ini+0x1a4>
 80017c0:	220c      	movs	r2, #12
 80017c2:	e000      	b.n	80017c6 <sd_ini+0x1a6>
 80017c4:	2204      	movs	r2, #4
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <sd_ini+0x250>)
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e02a      	b.n	8001822 <sd_ini+0x202>
        }
      }
    } 
    else //SDv1 or MMCv3 
    {
      if (SD_cmd(ACMD41, 0) <= 1) 
 80017cc:	2100      	movs	r1, #0
 80017ce:	20e9      	movs	r0, #233	; 0xe9
 80017d0:	f7ff fe14 	bl	80013fc <SD_cmd>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d805      	bhi.n	80017e6 <sd_ini+0x1c6>
      { 
        sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1 
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <sd_ini+0x250>)
 80017dc:	2202      	movs	r2, #2
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	23e9      	movs	r3, #233	; 0xe9
 80017e2:	73bb      	strb	r3, [r7, #14]
 80017e4:	e004      	b.n	80017f0 <sd_ini+0x1d0>
      } 
      else 
      { 
        sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3 
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <sd_ini+0x250>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	2341      	movs	r3, #65	; 0x41
 80017ee:	73bb      	strb	r3, [r7, #14]
      } 
      for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state 
 80017f0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80017f4:	81bb      	strh	r3, [r7, #12]
 80017f6:	e005      	b.n	8001804 <sd_ini+0x1e4>
 80017f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29b      	uxth	r3, r3
 8001802:	81bb      	strh	r3, [r7, #12]
 8001804:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00a      	beq.n	8001822 <sd_ini+0x202>
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fdf3 	bl	80013fc <SD_cmd>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ed      	bne.n	80017f8 <sd_ini+0x1d8>
 800181c:	e001      	b.n	8001822 <sd_ini+0x202>
      //sdinfo.type = 0;
    } 
  } 
  else 
  { 
    return 1; 
 800181e:	2301      	movs	r3, #1
 8001820:	e022      	b.n	8001868 <sd_ini+0x248>
  }
  if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512 - YA IZMENIL - CHAN PISHET, CHTO DLYA RABOTY S FATFS RAZMER BLOCKA DOLGEN BYT 512 BYTES !!!
 8001822:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <sd_ini+0x21a>
 800182a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182e:	2050      	movs	r0, #80	; 0x50
 8001830:	f7ff fde4 	bl	80013fc <SD_cmd>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <sd_ini+0x220>
      sdinfo.type = 0;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <sd_ini+0x250>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
  sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type); 
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <sd_ini+0x250>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	490f      	ldr	r1, [pc, #60]	; (8001888 <sd_ini+0x268>)
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <sd_ini+0x260>)
 800184c:	f008 ff0e 	bl	800a66c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000); 
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <sd_ini+0x260>)
 8001852:	f7fe fc9f 	bl	8000194 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <sd_ini+0x260>)
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <sd_ini+0x264>)
 8001862:	f003 f99e 	bl	8004ba2 <HAL_UART_Transmit>
  return 0; 
 8001866:	2300      	movs	r3, #0
} 
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	200011f0 	.word	0x200011f0
 8001874:	40020000 	.word	0x40020000
 8001878:	200009e4 	.word	0x200009e4
 800187c:	0800b094 	.word	0x0800b094
 8001880:	200011f4 	.word	0x200011f4
 8001884:	20000abc 	.word	0x20000abc
 8001888:	0800b0b8 	.word	0x0800b0b8

0800188c <Error>:

void Error (void) 
{ 
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, "\r\n ERROR !!!\r\n", 14, 100);
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	220e      	movs	r2, #14
 8001894:	4902      	ldr	r1, [pc, #8]	; (80018a0 <Error+0x14>)
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <Error+0x18>)
 8001898:	f003 f983 	bl	8004ba2 <HAL_UART_Transmit>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	0800b0cc 	.word	0x0800b0cc
 80018a4:	20000abc 	.word	0x20000abc

080018a8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) 
{ 
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0; 
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi3,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK) 
 80018b6:	f107 020f 	add.w	r2, r7, #15
 80018ba:	1df9      	adds	r1, r7, #7
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <SPIx_WriteRead+0x38>)
 80018c6:	f002 f9db 	bl	8003c80 <HAL_SPI_TransmitReceive>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SPIx_WriteRead+0x2c>
  { 
    Error(); 
 80018d0:	f7ff ffdc 	bl	800188c <Error>
  } 
  return receivedbyte; 
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
} 
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200009e4 	.word	0x200009e4

080018e4 <SPI_SendByte>:

//----------------------------------------------- 
void SPI_SendByte(uint8_t bt) 
{ 
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt); 
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ffd9 	bl	80018a8 <SPIx_WriteRead>
} 
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <SPI_ReceiveByte>:
//----------------------------------------------- 
uint8_t SPI_ReceiveByte(void) 
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF); 
 8001904:	20ff      	movs	r0, #255	; 0xff
 8001906:	f7ff ffcf 	bl	80018a8 <SPIx_WriteRead>
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  return bt; 
 800190e:	79fb      	ldrb	r3, [r7, #7]
} 
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <SPI_Release>:
//----------------------------------------------- 
void SPI_Release(void) 
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF); 
 800191c:	20ff      	movs	r0, #255	; 0xff
 800191e:	f7ff ffc3 	bl	80018a8 <SPIx_WriteRead>
} 
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}

08001926 <SPI_wait_ready>:
//----------------------------------------------- 
uint8_t SPI_wait_ready(void) 
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
  uint8_t res; 
  uint16_t cnt; 
  cnt=0; 
 800192c:	2300      	movs	r3, #0
 800192e:	80fb      	strh	r3, [r7, #6]
  do { //gdem okonchaniya sostoyaniya BUSY 
    res=SPI_ReceiveByte(); 
 8001930:	f7ff ffe5 	bl	80018fe <SPI_ReceiveByte>
 8001934:	4603      	mov	r3, r0
 8001936:	717b      	strb	r3, [r7, #5]
    cnt++; 
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	3301      	adds	r3, #1
 800193c:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) ); 
 800193e:	797b      	ldrb	r3, [r7, #5]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d004      	beq.n	800194e <SPI_wait_ready+0x28>
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194a:	4293      	cmp	r3, r2
 800194c:	d1f0      	bne.n	8001930 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1; 
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <SPI_wait_ready+0x36>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <SPI_wait_ready+0x38>
  return res; 
 800195c:	797b      	ldrb	r3, [r7, #5]
} 
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_MspInit+0x58>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_MspInit+0x58>)
 8001974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001978:	6253      	str	r3, [r2, #36]	; 0x24
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_MspInit+0x58>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_MspInit+0x58>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_MspInit+0x58>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_MspInit+0x58>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_MspInit+0x58>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_MspInit+0x58>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6253      	str	r3, [r2, #36]	; 0x24
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_MspInit+0x58>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_RTC_MspInit+0x30>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10a      	bne.n	80019ec <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_RTC_MspInit+0x34>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 8, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2108      	movs	r1, #8
 80019e0:	2029      	movs	r0, #41	; 0x29
 80019e2:	f000 fb30 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019e6:	2029      	movs	r0, #41	; 0x29
 80019e8:	f000 fb49 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40002800 	.word	0x40002800
 80019f8:	424706d8 	.word	0x424706d8

080019fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_SPI_MspInit+0x8c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d130      	bne.n	8001a80 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_SPI_MspInit+0x90>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <HAL_SPI_MspInit+0x90>)
 8001a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a28:	6253      	str	r3, [r2, #36]	; 0x24
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_SPI_MspInit+0x90>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_SPI_MspInit+0x90>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_SPI_MspInit+0x90>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_SPI_MspInit+0x90>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a60:	2306      	movs	r3, #6
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4809      	ldr	r0, [pc, #36]	; (8001a90 <HAL_SPI_MspInit+0x94>)
 8001a6c:	f000 fb56 	bl	800211c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	202f      	movs	r0, #47	; 0x2f
 8001a76:	f000 fae6 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a7a:	202f      	movs	r0, #47	; 0x2f
 8001a7c:	f000 faff 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40003c00 	.word	0x40003c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020800 	.word	0x40020800

08001a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa4:	d113      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_TIM_Base_MspInit+0x44>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_TIM_Base_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_TIM_Base_MspInit+0x44>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	201c      	movs	r0, #28
 8001ac4:	f000 fabf 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac8:	201c      	movs	r0, #28
 8001aca:	f000 fad8 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_UART_MspInit+0xd8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d129      	bne.n	8001b52 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b40:	2307      	movs	r3, #7
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <HAL_UART_MspInit+0xe0>)
 8001b4c:	f000 fae6 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b50:	e02c      	b.n	8001bac <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_UART_MspInit+0xe4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d127      	bne.n	8001bac <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	6253      	str	r3, [r2, #36]	; 0x24
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	61d3      	str	r3, [r2, #28]
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_UART_MspInit+0xdc>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_UART_MspInit+0xe0>)
 8001ba8:	f000 fab8 	bl	800211c <HAL_GPIO_Init>
}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40004400 	.word	0x40004400

08001bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM9_IRQn, TickPriority ,0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f000 fa34 	bl	8002046 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8001bde:	2019      	movs	r0, #25
 8001be0:	f000 fa4d 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_InitTick+0x9c>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_InitTick+0x9c>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_InitTick+0x9c>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f9a6 	bl	8002f58 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c0c:	f001 f990 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 8001c10:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_InitTick+0xa0>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9b      	lsrs	r3, r3, #18
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000 / 1000) - 1;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c42:	f002 fba7 	bl	8004394 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c4e:	f002 fbe1 	bl	8004414 <HAL_TIM_Base_Start_IT>
 8001c52:	4603      	mov	r3, r0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	20001230 	.word	0x20001230
 8001c6c:	40010800 	.word	0x40010800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <HardFault_Handler+0x4>

08001c82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <MemManage_Handler+0x4>

08001c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <BusFault_Handler+0x4>

08001c8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <UsageFault_Handler+0x4>

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <TIM9_IRQHandler>:

/**
  * @brief This function handles TIM9 global interrupt.
  */
void TIM9_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM9_IRQHandler+0x10>)
 8001ca6:	f002 fc07 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM9_IRQn 1 */

  /* USER CODE END TIM9_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20001230 	.word	0x20001230

08001cb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  Timer1++;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <TIM2_IRQHandler+0x1c>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <TIM2_IRQHandler+0x1c>)
 8001cc4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc6:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <TIM2_IRQHandler+0x20>)
 8001cc8:	f002 fbf6 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000b28 	.word	0x20000b28
 8001cd4:	20000a3c 	.word	0x20000a3c

08001cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
BaseType_t checkIfYieldRequired=pdFALSE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]

	//if(GPIO_Pin==GPIO_PIN_13){ //Нажата User Button
		checkIfYieldRequired=xTaskResumeFromISR(xHandle_1);
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <EXTI15_10_IRQHandler+0x60>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f007 f9fe 	bl	80090e8 <xTaskResumeFromISR>
 8001cec:	6078      	str	r0, [r7, #4]
		portYIELD_FROM_ISR(checkIfYieldRequired);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <EXTI15_10_IRQHandler+0x2c>
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <EXTI15_10_IRQHandler+0x64>)
 8001cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	f3bf 8f6f 	isb	sy

		DMA1_Channel2->CCR  &=  ~DMA_CCR_EN; // DMA disable
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <EXTI15_10_IRQHandler+0x68>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <EXTI15_10_IRQHandler+0x68>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]
		DAC->CR      &= ~DAC_CR_EN1; //DAC channel1 disable
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <EXTI15_10_IRQHandler+0x6c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <EXTI15_10_IRQHandler+0x6c>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]
		TIM6->CR1 &= ~TIM_CR1_CEN; //Counter disable
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <EXTI15_10_IRQHandler+0x70>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <EXTI15_10_IRQHandler+0x70>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]
    //}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d2c:	f000 fb9e 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000b2c 	.word	0x20000b2c
 8001d3c:	e000ed04 	.word	0xe000ed04
 8001d40:	4002601c 	.word	0x4002601c
 8001d44:	40007400 	.word	0x40007400
 8001d48:	40001000 	.word	0x40001000

08001d4c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  BaseType_t checkIfYieldRequired1, checkIfYieldRequired2;

  checkIfYieldRequired2=xTaskResumeFromISR(xHandle_Sound);
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <RTC_Alarm_IRQHandler+0x38>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f007 f9c6 	bl	80090e8 <xTaskResumeFromISR>
 8001d5c:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired2);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <RTC_Alarm_IRQHandler+0x28>
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <RTC_Alarm_IRQHandler+0x3c>)
 8001d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	f3bf 8f6f 	isb	sy


  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <RTC_Alarm_IRQHandler+0x40>)
 8001d76:	f001 fe11 	bl	800399c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000b30 	.word	0x20000b30
 8001d88:	e000ed04 	.word	0xe000ed04
 8001d8c:	200009c4 	.word	0x200009c4

08001d90 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <SPI3_IRQHandler+0x10>)
 8001d96:	f002 f915 	bl	8003fc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200009e4 	.word	0x200009e4

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f008 fc0a 	bl	800a5ec <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <_sbrk+0x64>)
 8001df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20014000 	.word	0x20014000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20001270 	.word	0x20001270
 8001e0c:	20004450 	.word	0x20004450

08001e10 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <SystemInit+0x14>)
 8001e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e2a:	e003      	b.n	8001e34 <LoopCopyDataInit>

08001e2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e32:	3104      	adds	r1, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e34:	480a      	ldr	r0, [pc, #40]	; (8001e60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e3c:	d3f6      	bcc.n	8001e2c <CopyDataInit>
  ldr r2, =_sbss
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e40:	e002      	b.n	8001e48 <LoopFillZerobss>

08001e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e44:	f842 3b04 	str.w	r3, [r2], #4

08001e48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e4c:	d3f9      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4e:	f7ff ffdf 	bl	8001e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f008 fbd1 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7fe fbf9 	bl	800064c <main>
  bx lr
 8001e5a:	4770      	bx	lr
  ldr r3, =_sidata
 8001e5c:	0800b224 	.word	0x0800b224
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e64:	20000144 	.word	0x20000144
  ldr r2, =_sbss
 8001e68:	20000144 	.word	0x20000144
  ldr r3, = _ebss
 8001e6c:	20004450 	.word	0x20004450

08001e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_IRQHandler>

08001e72 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f8d7 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fe9e 	bl	8001bc4 <HAL_InitTick>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	e001      	b.n	8001e98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e94:	f7ff fd68 	bl	8001968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e98:	79fb      	ldrb	r3, [r7, #7]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20001274 	.word	0x20001274
 8001ec4:	200000c0 	.word	0x200000c0

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20001274 	.word	0x20001274

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4906      	ldr	r1, [pc, #24]	; (8001f74 <__NVIC_EnableIRQ+0x34>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff4f 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff64 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ffb2 	bl	8001fcc <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff81 	bl	8001f78 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff57 	bl	8001f40 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d005      	beq.n	80020be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2204      	movs	r2, #4
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e029      	b.n	8002112 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 020e 	bic.w	r2, r2, #14
 80020cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 021c 	and.w	r2, r3, #28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
    }
  }
  return status;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002132:	e160      	b.n	80023f6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8152 	beq.w	80023f0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d00b      	beq.n	800216c <HAL_GPIO_Init+0x50>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002160:	2b11      	cmp	r3, #17
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b12      	cmp	r3, #18
 800216a:	d130      	bne.n	80021ce <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80021a2:	2201      	movs	r2, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 0201 	and.w	r2, r3, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0xf2>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b12      	cmp	r3, #18
 800220c:	d123      	bne.n	8002256 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80ac 	beq.w	80023f0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_GPIO_Init+0x2f8>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_GPIO_Init+0x2f8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_GPIO_Init+0x2f8>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80022b0:	4a59      	ldr	r2, [pc, #356]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_GPIO_Init+0x300>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d025      	beq.n	8002328 <HAL_GPIO_Init+0x20c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_GPIO_Init+0x304>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d01f      	beq.n	8002324 <HAL_GPIO_Init+0x208>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a4f      	ldr	r2, [pc, #316]	; (8002424 <HAL_GPIO_Init+0x308>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d019      	beq.n	8002320 <HAL_GPIO_Init+0x204>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_GPIO_Init+0x200>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a4d      	ldr	r2, [pc, #308]	; (800242c <HAL_GPIO_Init+0x310>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1fc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <HAL_GPIO_Init+0x314>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1f8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x318>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1f4>
 800230c:	2306      	movs	r3, #6
 800230e:	e00c      	b.n	800232a <HAL_GPIO_Init+0x20e>
 8002310:	2307      	movs	r3, #7
 8002312:	e00a      	b.n	800232a <HAL_GPIO_Init+0x20e>
 8002314:	2305      	movs	r3, #5
 8002316:	e008      	b.n	800232a <HAL_GPIO_Init+0x20e>
 8002318:	2304      	movs	r3, #4
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x20e>
 800231c:	2303      	movs	r3, #3
 800231e:	e004      	b.n	800232a <HAL_GPIO_Init+0x20e>
 8002320:	2302      	movs	r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x20e>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_GPIO_Init+0x20e>
 8002328:	2300      	movs	r3, #0
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800233a:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_GPIO_Init+0x31c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800236c:	4a32      	ldr	r2, [pc, #200]	; (8002438 <HAL_GPIO_Init+0x31c>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_GPIO_Init+0x31c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002396:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_GPIO_Init+0x31c>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239c:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_GPIO_Init+0x31c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_GPIO_Init+0x31c>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_GPIO_Init+0x31c>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <HAL_GPIO_Init+0x31c>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	f47f ae97 	bne.w	8002134 <HAL_GPIO_Init+0x18>
  }
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40010000 	.word	0x40010000
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f806 	bl	800249c <HAL_GPIO_EXTI_Callback>
  }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e31d      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c2:	4b94      	ldr	r3, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024cc:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07b      	beq.n	80025da <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d006      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x5e>
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d10b      	bne.n	800250e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4b87      	ldr	r3, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d06a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x128>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d166      	bne.n	80025d8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e2f7      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x74>
 8002516:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7e      	ldr	r2, [pc, #504]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e02d      	b.n	8002580 <HAL_RCC_OscConfig+0xd0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x96>
 800252c:	4b79      	ldr	r3, [pc, #484]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a78      	ldr	r2, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a75      	ldr	r2, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0xd0>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xb8>
 800254e:	4b71      	ldr	r3, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a70      	ldr	r2, [pc, #448]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6d      	ldr	r2, [pc, #436]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd0>
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a66      	ldr	r2, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fc9e 	bl	8001ec8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fc9a 	bl	8001ec8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e2ad      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe0>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fc8a 	bl	8001ec8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fc86 	bl	8001ec8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e299      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x108>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d05a      	beq.n	800269c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_OscConfig+0x176>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x160>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d001      	beq.n	8002610 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e276      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	493d      	ldr	r1, [pc, #244]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002624:	e03a      	b.n	800269c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d020      	beq.n	8002670 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_RCC_OscConfig+0x268>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fc48 	bl	8001ec8 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7ff fc44 	bl	8001ec8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e257      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	492a      	ldr	r1, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
 800266e:	e015      	b.n	800269c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_OscConfig+0x268>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7ff fc27 	bl	8001ec8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7ff fc23 	bl	8001ec8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e236      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80b8 	beq.w	800281a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d170      	bne.n	8002792 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x218>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e21a      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d921      	bls.n	800271c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fc6b 	bl	8002fb8 <RCC_SetFlashLatencyFromMSIRange>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e208      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4906      	ldr	r1, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	4901      	ldr	r1, [pc, #4]	; (8002714 <HAL_RCC_OscConfig+0x264>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
 8002712:	e020      	b.n	8002756 <HAL_RCC_OscConfig+0x2a6>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271c:	4b99      	ldr	r3, [pc, #612]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4996      	ldr	r1, [pc, #600]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272e:	4b95      	ldr	r3, [pc, #596]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	4991      	ldr	r1, [pc, #580]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fc36 	bl	8002fb8 <RCC_SetFlashLatencyFromMSIRange>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1d3      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	0b5b      	lsrs	r3, r3, #13
 800275c:	3301      	adds	r3, #1
 800275e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002766:	4a87      	ldr	r2, [pc, #540]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002768:	6892      	ldr	r2, [r2, #8]
 800276a:	0912      	lsrs	r2, r2, #4
 800276c:	f002 020f 	and.w	r2, r2, #15
 8002770:	4985      	ldr	r1, [pc, #532]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002772:	5c8a      	ldrb	r2, [r1, r2]
 8002774:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002776:	4a85      	ldr	r2, [pc, #532]	; (800298c <HAL_RCC_OscConfig+0x4dc>)
 8002778:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800277a:	4b85      	ldr	r3, [pc, #532]	; (8002990 <HAL_RCC_OscConfig+0x4e0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fa20 	bl	8001bc4 <HAL_InitTick>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d045      	beq.n	800281a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	e1b5      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d029      	beq.n	80027ee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800279a:	4b7e      	ldr	r3, [pc, #504]	; (8002994 <HAL_RCC_OscConfig+0x4e4>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fb92 	bl	8001ec8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7ff fb8e 	bl	8001ec8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1a1      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027ba:	4b72      	ldr	r3, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c6:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	496c      	ldr	r1, [pc, #432]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	4967      	ldr	r1, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ee:	4b69      	ldr	r3, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x4e4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff fb68 	bl	8001ec8 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027fc:	f7ff fb64 	bl	8001ec8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e177      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d030      	beq.n	8002888 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7ff fb48 	bl	8001ec8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff fb44 	bl	8001ec8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e157      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284e:	4b4d      	ldr	r3, [pc, #308]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x38c>
 800285a:	e015      	b.n	8002888 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4b4e      	ldr	r3, [pc, #312]	; (8002998 <HAL_RCC_OscConfig+0x4e8>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fb31 	bl	8001ec8 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff fb2d 	bl	8001ec8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e140      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80b5 	beq.w	8002a00 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	4a36      	ldr	r2, [pc, #216]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6253      	str	r3, [r2, #36]	; 0x24
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x4ec>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x4ec>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x4ec>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7ff faf5 	bl	8001ec8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7ff faf1 	bl	8001ec8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e104      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x4ec>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x466>
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6353      	str	r3, [r2, #52]	; 0x34
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x4c2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x488>
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002928:	6353      	str	r3, [r2, #52]	; 0x34
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	4a15      	ldr	r2, [pc, #84]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002934:	6353      	str	r3, [r2, #52]	; 0x34
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x4c2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x4aa>
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294a:	6353      	str	r3, [r2, #52]	; 0x34
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002956:	6353      	str	r3, [r2, #52]	; 0x34
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x4c2>
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002964:	6353      	str	r3, [r2, #52]	; 0x34
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	4a06      	ldr	r2, [pc, #24]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 800296c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002970:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff faa5 	bl	8001ec8 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002980:	e019      	b.n	80029b6 <HAL_RCC_OscConfig+0x506>
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	0800b148 	.word	0x0800b148
 800298c:	200000b8 	.word	0x200000b8
 8002990:	200000bc 	.word	0x200000bc
 8002994:	42470020 	.word	0x42470020
 8002998:	42470680 	.word	0x42470680
 800299c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7ff fa92 	bl	8001ec8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0a3      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4f0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c4:	f7ff fa80 	bl	8001ec8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7ff fa7c 	bl	8001ec8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e08d      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	4a43      	ldr	r2, [pc, #268]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d079      	beq.n	8002afc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d056      	beq.n	8002abc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d13b      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x65c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7ff fa54 	bl	8001ec8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7ff fa50 	bl	8001ec8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e063      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	4319      	orrs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	492b      	ldr	r1, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCC_OscConfig+0x65c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7ff fa2f 	bl	8001ec8 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff fa2b 	bl	8001ec8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e03e      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x5be>
 8002a8c:	e036      	b.n	8002afc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <HAL_RCC_OscConfig+0x65c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fa18 	bl	8001ec8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7ff fa14 	bl	8001ec8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e027      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x5ec>
 8002aba:	e01f      	b.n	8002afc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e01a      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_RCC_OscConfig+0x658>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470060 	.word	0x42470060

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e11a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b8f      	ldr	r3, [pc, #572]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d919      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x34>
 8002b38:	4b8a      	ldr	r3, [pc, #552]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a89      	ldr	r2, [pc, #548]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 0201 	bic.w	r2, r3, #1
 8002b4c:	4985      	ldr	r1, [pc, #532]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b54:	4b83      	ldr	r3, [pc, #524]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0f9      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b72:	4b7d      	ldr	r3, [pc, #500]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	497a      	ldr	r1, [pc, #488]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808e 	beq.w	8002cae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d121      	bne.n	8002bea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0d7      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb2:	4b6d      	ldr	r3, [pc, #436]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d115      	bne.n	8002bea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0cb      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bca:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0bf      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0b7      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b5f      	ldr	r3, [pc, #380]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	495c      	ldr	r1, [pc, #368]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7ff f964 	bl	8001ec8 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7ff f95c 	bl	8001ec8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e09b      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c22:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xfc>
 8002c2e:	e03e      	b.n	8002cae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d112      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3a:	f7ff f945 	bl	8001ec8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e084      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c50:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x12a>
 8002c5c:	e027      	b.n	8002cae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d11d      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7ff f92e 	bl	8001ec8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e06d      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x158>
 8002c8a:	e010      	b.n	8002cae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7ff f91c 	bl	8001ec8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e05b      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ee      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d219      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1be>
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	4923      	ldr	r1, [pc, #140]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e034      	b.n	8002d5a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4917      	ldr	r1, [pc, #92]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490f      	ldr	r1, [pc, #60]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f823 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCC_ClockConfig+0x258>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490b      	ldr	r1, [pc, #44]	; (8002d6c <HAL_RCC_ClockConfig+0x25c>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff38 	bl	8001bc4 <HAL_InitTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	0800b148 	.word	0x0800b148
 8002d70:	200000b8 	.word	0x200000b8
 8002d74:	200000bc 	.word	0x200000bc

08002d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d7c:	b08e      	sub	sp, #56	; 0x38
 8002d7e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d80:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x34>
 8002d90:	2b0c      	cmp	r3, #12
 8002d92:	f200 8092 	bhi.w	8002eba <HAL_RCC_GetSysClockFreq+0x142>
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x28>
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x2e>
 8002d9e:	e08c      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x170>)
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002da4:	e097      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da6:	4b51      	ldr	r3, [pc, #324]	; (8002eec <HAL_RCC_GetSysClockFreq+0x174>)
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002daa:	e094      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	f003 020f 	and.w	r2, r3, #15
 8002db4:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x178>)
 8002db6:	5c9b      	ldrb	r3, [r3, r2]
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	0d9b      	lsrs	r3, r3, #22
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d021      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	61fa      	str	r2, [r7, #28]
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_RCC_GetSysClockFreq+0x174>)
 8002ddc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002de0:	464a      	mov	r2, r9
 8002de2:	fb03 f202 	mul.w	r2, r3, r2
 8002de6:	2300      	movs	r3, #0
 8002de8:	4644      	mov	r4, r8
 8002dea:	fb04 f303 	mul.w	r3, r4, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	4a3e      	ldr	r2, [pc, #248]	; (8002eec <HAL_RCC_GetSysClockFreq+0x174>)
 8002df2:	4644      	mov	r4, r8
 8002df4:	fba4 0102 	umull	r0, r1, r4, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2200      	movs	r2, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	617a      	str	r2, [r7, #20]
 8002e04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e08:	f7fd f9cc 	bl	80001a4 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
 8002e14:	e04e      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	469a      	mov	sl, r3
 8002e1c:	4693      	mov	fp, r2
 8002e1e:	4652      	mov	r2, sl
 8002e20:	465b      	mov	r3, fp
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	0159      	lsls	r1, r3, #5
 8002e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e30:	0150      	lsls	r0, r2, #5
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	ebb2 080a 	subs.w	r8, r2, sl
 8002e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e52:	ebb2 0408 	subs.w	r4, r2, r8
 8002e56:	eb63 0509 	sbc.w	r5, r3, r9
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	00eb      	lsls	r3, r5, #3
 8002e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e68:	00e2      	lsls	r2, r4, #3
 8002e6a:	4614      	mov	r4, r2
 8002e6c:	461d      	mov	r5, r3
 8002e6e:	eb14 030a 	adds.w	r3, r4, sl
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	eb45 030b 	adc.w	r3, r5, fp
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e86:	4629      	mov	r1, r5
 8002e88:	028b      	lsls	r3, r1, #10
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4604      	mov	r4, r0
 8002e90:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002e94:	4601      	mov	r1, r0
 8002e96:	028a      	lsls	r2, r1, #10
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	60fa      	str	r2, [r7, #12]
 8002ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea8:	f7fd f97c 	bl	80001a4 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002eb8:	e00d      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0b5b      	lsrs	r3, r3, #13
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	016e3600 	.word	0x016e3600
 8002ef0:	0800b13c 	.word	0x0800b13c

08002ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	200000b8 	.word	0x200000b8

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f0c:	f7ff fff2 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	0800b158 	.word	0x0800b158

08002f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f34:	f7ff ffde 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	0adb      	lsrs	r3, r3, #11
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4903      	ldr	r1, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	0800b158 	.word	0x0800b158

08002f58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	220f      	movs	r2, #15
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_GetClockConfig+0x58>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCC_GetClockConfig+0x58>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_GetClockConfig+0x58>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_RCC_GetClockConfig+0x58>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	601a      	str	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d12c      	bne.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e016      	b.n	8003016 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6253      	str	r3, [r2, #36]	; 0x24
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003008:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003014:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800301c:	d105      	bne.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003024:	d101      	bne.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003026:	2301      	movs	r3, #1
 8003028:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 0201 	bic.w	r2, r3, #1
 8003044:	490b      	ldr	r1, [pc, #44]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	40023c00 	.word	0x40023c00

08003078 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80c6 	beq.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b64      	ldr	r3, [pc, #400]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b61      	ldr	r3, [pc, #388]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	4a60      	ldr	r2, [pc, #384]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6253      	str	r3, [r2, #36]	; 0x24
 80030b6:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe fef3 	bl	8001ec8 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe feef 	bl	8001ec8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e097      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800310c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d106      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	429a      	cmp	r2, r3
 8003128:	d00f      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003136:	d108      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003138:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003144:	d101      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06e      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003152:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d041      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d005      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10c      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	429a      	cmp	r2, r3
 8003180:	d02d      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d027      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003196:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80031a4:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d014      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fe88 	bl	8001ec8 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fe84 	bl	8001ec8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e02a      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ee      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031ea:	d10a      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800320e:	4908      	ldr	r1, [pc, #32]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003210:	4313      	orrs	r3, r2
 8003212:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003224:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	40007000 	.word	0x40007000
 8003238:	424706dc 	.word	0x424706dc

0800323c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06d      	b.n	800332a <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7f5b      	ldrb	r3, [r3, #29]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fbb0 	bl	80019c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	22ca      	movs	r2, #202	; 0xca
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2253      	movs	r2, #83	; 0x53
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fc0a 	bl	8003a94 <RTC_EnterInitMode>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	22ff      	movs	r2, #255	; 0xff
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2204      	movs	r2, #4
 8003292:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e048      	b.n	800332a <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032aa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6919      	ldr	r1, [r3, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	041a      	lsls	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	22ff      	movs	r2, #255	; 0xff
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003332:	b590      	push	{r4, r7, lr}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	7f1b      	ldrb	r3, [r3, #28]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_RTC_SetTime+0x18>
 8003346:	2302      	movs	r3, #2
 8003348:	e0a3      	b.n	8003492 <HAL_RTC_SetTime+0x160>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2202      	movs	r2, #2
 8003354:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d126      	bne.n	80033aa <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fbb7 	bl	8003ae8 <RTC_ByteToBcd2>
 800337a:	4603      	mov	r3, r0
 800337c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fbb0 	bl	8003ae8 <RTC_ByteToBcd2>
 8003388:	4603      	mov	r3, r0
 800338a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800338c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fba8 	bl	8003ae8 <RTC_ByteToBcd2>
 8003398:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800339a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	78db      	ldrb	r3, [r3, #3]
 80033a2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e018      	b.n	80033dc <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80033ca:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80033d0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	22ca      	movs	r2, #202	; 0xca
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2253      	movs	r2, #83	; 0x53
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fb51 	bl	8003a94 <RTC_EnterInitMode>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2204      	movs	r2, #4
 8003404:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e040      	b.n	8003492 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800341a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800342e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003456:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 faee 	bl	8003a3a <HAL_RTC_WaitForSynchro>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e00a      	b.n	8003492 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}

0800349a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80034ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d11a      	bne.n	800354a <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fb04 	bl	8003b26 <RTC_Bcd2ToByte>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fafb 	bl	8003b26 <RTC_Bcd2ToByte>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	789b      	ldrb	r3, [r3, #2]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 faf2 	bl	8003b26 <RTC_Bcd2ToByte>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	7f1b      	ldrb	r3, [r3, #28]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_RTC_SetDate+0x18>
 8003568:	2302      	movs	r3, #2
 800356a:	e08d      	b.n	8003688 <HAL_RTC_SetDate+0x134>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2202      	movs	r2, #2
 8003576:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10e      	bne.n	800359c <HAL_RTC_SetDate+0x48>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	330a      	adds	r3, #10
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d11c      	bne.n	80035dc <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	78db      	ldrb	r3, [r3, #3]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fa9e 	bl	8003ae8 <RTC_ByteToBcd2>
 80035ac:	4603      	mov	r3, r0
 80035ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fa97 	bl	8003ae8 <RTC_ByteToBcd2>
 80035ba:	4603      	mov	r3, r0
 80035bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80035be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	789b      	ldrb	r3, [r3, #2]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa8f 	bl	8003ae8 <RTC_ByteToBcd2>
 80035ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80035cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00e      	b.n	80035fa <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	78db      	ldrb	r3, [r3, #3]
 80035e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80035e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80035ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	22ca      	movs	r2, #202	; 0xca
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2253      	movs	r2, #83	; 0x53
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fa42 	bl	8003a94 <RTC_EnterInitMode>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2204      	movs	r2, #4
 8003622:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e02c      	b.n	8003688 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003638:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800363c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364c:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f9f3 	bl	8003a3a <HAL_RTC_WaitForSynchro>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2204      	movs	r2, #4
 8003666:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00a      	b.n	8003688 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}

08003690 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	0b5b      	lsrs	r3, r3, #13
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11a      	bne.n	8003720 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fa19 	bl	8003b26 <RTC_Bcd2ToByte>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa10 	bl	8003b26 <RTC_Bcd2ToByte>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	789b      	ldrb	r3, [r3, #2]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fa07 	bl	8003b26 <RTC_Bcd2ToByte>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	7f1b      	ldrb	r3, [r3, #28]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_RTC_SetAlarm_IT+0x24>
 800374c:	2302      	movs	r3, #2
 800374e:	e11f      	b.n	8003990 <HAL_RTC_SetAlarm_IT+0x264>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2202      	movs	r2, #2
 800375a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d137      	bne.n	80037d2 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f9b4 	bl	8003ae8 <RTC_ByteToBcd2>
 8003780:	4603      	mov	r3, r0
 8003782:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f9ad 	bl	8003ae8 <RTC_ByteToBcd2>
 800378e:	4603      	mov	r3, r0
 8003790:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003792:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	789b      	ldrb	r3, [r3, #2]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f9a5 	bl	8003ae8 <RTC_ByteToBcd2>
 800379e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80037a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	78db      	ldrb	r3, [r3, #3]
 80037a8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80037aa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f997 	bl	8003ae8 <RTC_ByteToBcd2>
 80037ba:	4603      	mov	r3, r0
 80037bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80037be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80037c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e023      	b.n	800381a <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80037f2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80037f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	78db      	ldrb	r3, [r3, #3]
 80037fe:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003800:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003808:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800380a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003810:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003816:	4313      	orrs	r3, r2
 8003818:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	22ca      	movs	r2, #202	; 0xca
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2253      	movs	r2, #83	; 0x53
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	d148      	bne.n	80038d2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800384e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003860:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003862:	f7fe fb31 	bl	8001ec8 <HAL_GetTick>
 8003866:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003868:	e013      	b.n	8003892 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800386a:	f7fe fb2d 	bl	8001ec8 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003878:	d90b      	bls.n	8003892 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2203      	movs	r2, #3
 8003886:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e07e      	b.n	8003990 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0e4      	beq.n	800386a <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	e047      	b.n	8003962 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038e0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f462 7220 	orn	r2, r2, #640	; 0x280
 80038f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80038f4:	f7fe fae8 	bl	8001ec8 <HAL_GetTick>
 80038f8:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80038fa:	e013      	b.n	8003924 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038fc:	f7fe fae4 	bl	8001ec8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800390a:	d90b      	bls.n	8003924 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2203      	movs	r2, #3
 8003918:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e035      	b.n	8003990 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0e4      	beq.n	80038fc <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003950:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003960:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	22ff      	movs	r2, #255	; 0xff
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3724      	adds	r7, #36	; 0x24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	40010400 	.word	0x40010400

0800399c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d012      	beq.n	80039d8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f831 	bl	8003a28 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80039d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d012      	beq.n	8003a0c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8b1 	bl	8003b5c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003a0a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a12:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	775a      	strb	r2, [r3, #29]
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40010400 	.word	0x40010400

08003a28 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11c      	bne.n	8003a8a <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a60:	f7fe fa32 	bl	8001ec8 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a66:	e009      	b.n	8003a7c <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a68:	f7fe fa2e 	bl	8001ec8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a76:	d901      	bls.n	8003a7c <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e007      	b.n	8003a8c <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ee      	beq.n	8003a68 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d119      	bne.n	8003ade <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ab4:	f7fe fa08 	bl	8001ec8 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003aba:	e009      	b.n	8003ad0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003abc:	f7fe fa04 	bl	8001ec8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aca:	d901      	bls.n	8003ad0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e007      	b.n	8003ae0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ee      	beq.n	8003abc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003afa:	e005      	b.n	8003b08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	3b0a      	subs	r3, #10
 8003b06:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	d8f6      	bhi.n	8003afc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	7afb      	ldrb	r3, [r7, #11]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b2db      	uxtb	r3, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	b2db      	uxtb	r3, r3
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e07b      	b.n	8003c78 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b90:	d009      	beq.n	8003ba6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	61da      	str	r2, [r3, #28]
 8003b98:	e005      	b.n	8003ba6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7fd ff1b 	bl	80019fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bdc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	f003 0104 	and.w	r1, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f003 0210 	and.w	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x26>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e18a      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x33c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cae:	f7fe f90b 	bl	8001ec8 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d00f      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x70>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd6:	d107      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x68>
 8003ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d003      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cee:	e15b      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x82>
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d08:	e14e      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d003      	beq.n	8003d1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2205      	movs	r2, #5
 8003d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	887a      	ldrh	r2, [r7, #2]
 8003d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d007      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7a:	d178      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x10a>
 8003d84:	8b7b      	ldrh	r3, [r7, #26]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d166      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dae:	e053      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d11b      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x176>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d016      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x176>
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d113      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d119      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x1b8>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e38:	f7fe f846 	bl	8001ec8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d807      	bhi.n	8003e58 <HAL_SPI_TransmitReceive+0x1d8>
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d003      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e56:	e0a7      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1a6      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x130>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1a1      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x130>
 8003e6c:	e07c      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_TransmitReceive+0x1fc>
 8003e76:	8b7b      	ldrh	r3, [r7, #26]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d16b      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea2:	e057      	b.n	8003f54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d11c      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x26c>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x26c>
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d114      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d119      	bne.n	8003f2e <HAL_SPI_TransmitReceive+0x2ae>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d014      	beq.n	8003f2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f2e:	f7fd ffcb 	bl	8001ec8 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d803      	bhi.n	8003f46 <HAL_SPI_TransmitReceive+0x2c6>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x2cc>
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f52:	e029      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1a2      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x224>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d19d      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f9cf 	bl	8004310 <SPI_EndRxTxTransaction>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d006      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f84:	e010      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	e000      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3730      	adds	r7, #48	; 0x30
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
    return;
 8004006:	e0d7      	b.n	80041b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_SPI_IRQHandler+0x66>
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	09db      	lsrs	r3, r3, #7
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
    return;
 8004028:	e0c6      	b.n	80041b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_SPI_IRQHandler+0x8c>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80b4 	beq.w	80041b8 <HAL_SPI_IRQHandler+0x1f4>
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80ad 	beq.w	80041b8 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d023      	beq.n	80040b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d011      	beq.n	800409a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	e00b      	b.n	80040b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]
        return;
 80040b0:	e082      	b.n	80041b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d014      	beq.n	80040e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0208 	orr.w	r2, r3, #8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04f      	beq.n	80041b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004124:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_SPI_IRQHandler+0x17e>
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d034      	beq.n	80041ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0203 	bic.w	r2, r2, #3
 8004150:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_SPI_IRQHandler+0x1fc>)
 8004160:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd ff97 	bl	800209a <HAL_DMA_Abort_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418a:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <HAL_SPI_IRQHandler+0x1fc>)
 800418c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd ff81 	bl	800209a <HAL_DMA_Abort_IT>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80041aa:	e003      	b.n	80041b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f809 	bl	80041c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041b2:	e000      	b.n	80041b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80041b4:	bf00      	nop
    return;
 80041b6:	bf00      	nop
  }
}
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	080041d7 	.word	0x080041d7

080041c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff ffe7 	bl	80041c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004210:	f7fd fe5a 	bl	8001ec8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004220:	f7fd fe52 	bl	8001ec8 <HAL_GetTick>
 8004224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004226:	4b39      	ldr	r3, [pc, #228]	; (800430c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	0d1b      	lsrs	r3, r3, #20
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004236:	e054      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d050      	beq.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004240:	f7fd fe42 	bl	8001ec8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d13d      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d111      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d004      	beq.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d107      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429c:	d10f      	bne.n	80042be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e017      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3b01      	subs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d19b      	bne.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200000b8 	.word	0x200000b8

08004310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <SPI_EndRxTxTransaction+0x7c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <SPI_EndRxTxTransaction+0x80>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0d5b      	lsrs	r3, r3, #21
 8004328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d112      	bne.n	8004362 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2200      	movs	r2, #0
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff ff5a 	bl	8004200 <SPI_WaitFlagStateUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00f      	b.n	8004382 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3b01      	subs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d0f2      	beq.n	8004362 <SPI_EndRxTxTransaction+0x52>
 800437c:	e000      	b.n	8004380 <SPI_EndRxTxTransaction+0x70>
        break;
 800437e:	bf00      	nop
  }

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200000b8 	.word	0x200000b8
 8004390:	165e9f81 	.word	0x165e9f81

08004394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e031      	b.n	800440a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd fb6a 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 fa34 	bl	8004840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e03a      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x58>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_TIM_Base_Start_IT+0x98>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x58>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x58>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40010800 	.word	0x40010800

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d122      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11b      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0202 	mvn.w	r2, #2
 80044e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f985 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f978 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f987 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0204 	mvn.w	r2, #4
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f95b 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f94e 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f95d 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b08      	cmp	r3, #8
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f931 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f924 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f933 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d122      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d11b      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0210 	mvn.w	r2, #16
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2208      	movs	r2, #8
 80045e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f907 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8fa 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f909 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0201 	mvn.w	r2, #1
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fec8 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8e3 	bl	800482e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x18>
 8004684:	2302      	movs	r3, #2
 8004686:	e0b3      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x180>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d03e      	beq.n	8004740 <HAL_TIM_ConfigClockSource+0xd0>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	f200 8087 	bhi.w	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	f000 8085 	beq.w	80047dc <HAL_TIM_ConfigClockSource+0x16c>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d87f      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 80046d8:	2b70      	cmp	r3, #112	; 0x70
 80046da:	d01a      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0xa2>
 80046dc:	2b70      	cmp	r3, #112	; 0x70
 80046de:	d87b      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d050      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x116>
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d877      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d03c      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xf6>
 80046ec:	2b50      	cmp	r3, #80	; 0x50
 80046ee:	d873      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d058      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0x136>
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d86f      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d064      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x156>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d86b      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d060      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x156>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d867      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d05c      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x156>
 800470c:	2b10      	cmp	r3, #16
 800470e:	d05a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004710:	e062      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f000 f974 	bl	8004a0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004734:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	609a      	str	r2, [r3, #8]
      break;
 800473e:	e04e      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f000 f95d 	bl	8004a0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004762:	609a      	str	r2, [r3, #8]
      break;
 8004764:	e03b      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f8d4 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2150      	movs	r1, #80	; 0x50
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f92b 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004784:	e02b      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	461a      	mov	r2, r3
 8004794:	f000 f8f2 	bl	800497c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2160      	movs	r1, #96	; 0x60
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f91b 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80047a4:	e01b      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f000 f8b4 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f90b 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80047c4:	e00b      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f000 f902 	bl	80049da <TIM_ITRx_SetConfig>
        break;
 80047d6:	e002      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047d8:	bf00      	nop
 80047da:	e000      	b.n	80047de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <TIM_Base_SetConfig+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a2a      	ldr	r2, [pc, #168]	; (800490c <TIM_Base_SetConfig+0xcc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a29      	ldr	r2, [pc, #164]	; (8004910 <TIM_Base_SetConfig+0xd0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a28      	ldr	r2, [pc, #160]	; (8004914 <TIM_Base_SetConfig+0xd4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_Base_SetConfig+0xc8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <TIM_Base_SetConfig+0xcc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <TIM_Base_SetConfig+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <TIM_Base_SetConfig+0xd4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <TIM_Base_SetConfig+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a17      	ldr	r2, [pc, #92]	; (800491c <TIM_Base_SetConfig+0xdc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010800 	.word	0x40010800
 8004918:	40010c00 	.word	0x40010c00
 800491c:	40011000 	.word	0x40011000

08004920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 030a 	bic.w	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	021a      	lsls	r2, r3, #8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	609a      	str	r2, [r3, #8]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e046      	b.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40010800 	.word	0x40010800

08004b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e03f      	b.n	8004b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc ffd4 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9b1 	bl	8004eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af02      	add	r7, sp, #8
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	f040 8083 	bne.w	8004cca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_UART_Transmit+0x2e>
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e07b      	b.n	8004ccc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Transmit+0x40>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e074      	b.n	8004ccc <HAL_UART_Transmit+0x12a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2221      	movs	r2, #33	; 0x21
 8004bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bf8:	f7fd f966 	bl	8001ec8 <HAL_GetTick>
 8004bfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c12:	e042      	b.n	8004c9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d122      	bne.n	8004c72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f8f2 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e042      	b.n	8004ccc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3302      	adds	r3, #2
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	e017      	b.n	8004c9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	e013      	b.n	8004c9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f8cf 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e01f      	b.n	8004ccc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	60ba      	str	r2, [r7, #8]
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1b7      	bne.n	8004c14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f8b6 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	f040 8090 	bne.w	8004e16 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_Receive+0x2e>
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e088      	b.n	8004e18 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Receive+0x40>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e081      	b.n	8004e18 <HAL_UART_Receive+0x144>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2222      	movs	r2, #34	; 0x22
 8004d26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd f8cd 	bl	8001ec8 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d44:	e05c      	b.n	8004e00 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5c:	d12b      	bne.n	8004db6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2120      	movs	r1, #32
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f859 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e04f      	b.n	8004e18 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10c      	bne.n	8004d9e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	e030      	b.n	8004e00 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3301      	adds	r3, #1
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	e024      	b.n	8004e00 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f82d 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e023      	b.n	8004e18 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d108      	bne.n	8004dea <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	60ba      	str	r2, [r7, #8]
 8004de4:	b2ca      	uxtb	r2, r1
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e00a      	b.n	8004e00 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	1c59      	adds	r1, r3, #1
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d19d      	bne.n	8004d46 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e000      	b.n	8004e18 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e30:	e02c      	b.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d028      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e40:	f7fd f842 	bl	8001ec8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d21d      	bcs.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e00f      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d0c3      	beq.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ef4:	f023 030c 	bic.w	r3, r3, #12
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	430b      	orrs	r3, r1
 8004f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a55      	ldr	r2, [pc, #340]	; (8005074 <UART_SetConfig+0x1c0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d103      	bne.n	8004f2a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f22:	f7fe f805 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	e002      	b.n	8004f30 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f2a:	f7fd ffed 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8004f2e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f38:	d14c      	bne.n	8004fd4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009a      	lsls	r2, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	4a49      	ldr	r2, [pc, #292]	; (8005078 <UART_SetConfig+0x1c4>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	0119      	lsls	r1, r3, #4
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009a      	lsls	r2, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f70:	4b41      	ldr	r3, [pc, #260]	; (8005078 <UART_SetConfig+0x1c4>)
 8004f72:	fba3 0302 	umull	r0, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2064      	movs	r0, #100	; 0x64
 8004f7a:	fb00 f303 	mul.w	r3, r0, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	3332      	adds	r3, #50	; 0x32
 8004f84:	4a3c      	ldr	r2, [pc, #240]	; (8005078 <UART_SetConfig+0x1c4>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f92:	4419      	add	r1, r3
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009a      	lsls	r2, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004faa:	4b33      	ldr	r3, [pc, #204]	; (8005078 <UART_SetConfig+0x1c4>)
 8004fac:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	2064      	movs	r0, #100	; 0x64
 8004fb4:	fb00 f303 	mul.w	r3, r0, r3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	3332      	adds	r3, #50	; 0x32
 8004fbe:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <UART_SetConfig+0x1c4>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	f003 0207 	and.w	r2, r3, #7
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	440a      	add	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fd2:	e04a      	b.n	800506a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	441a      	add	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	4a23      	ldr	r2, [pc, #140]	; (8005078 <UART_SetConfig+0x1c4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	0119      	lsls	r1, r3, #4
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009a      	lsls	r2, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	fbb2 f2f3 	udiv	r2, r2, r3
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <UART_SetConfig+0x1c4>)
 800500c:	fba3 0302 	umull	r0, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	2064      	movs	r0, #100	; 0x64
 8005014:	fb00 f303 	mul.w	r3, r0, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	3332      	adds	r3, #50	; 0x32
 800501e:	4a16      	ldr	r2, [pc, #88]	; (8005078 <UART_SetConfig+0x1c4>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502a:	4419      	add	r1, r3
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009a      	lsls	r2, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <UART_SetConfig+0x1c4>)
 8005044:	fba3 0302 	umull	r0, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2064      	movs	r0, #100	; 0x64
 800504c:	fb00 f303 	mul.w	r3, r0, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	3332      	adds	r3, #50	; 0x32
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <UART_SetConfig+0x1c4>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	440a      	add	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
}
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40013800 	.word	0x40013800
 8005078:	51eb851f 	.word	0x51eb851f

0800507c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005080:	4904      	ldr	r1, [pc, #16]	; (8005094 <MX_FATFS_Init+0x18>)
 8005082:	4805      	ldr	r0, [pc, #20]	; (8005098 <MX_FATFS_Init+0x1c>)
 8005084:	f002 fd80 	bl	8007b88 <FATFS_LinkDriver>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <MX_FATFS_Init+0x20>)
 800508e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2000127c 	.word	0x2000127c
 8005098:	200000c8 	.word	0x200000c8
 800509c:	20001278 	.word	0x20001278

080050a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80050a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
	...

080050b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <USER_initialize+0x4c>)
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2,(uint8_t*)"USER_initialize\r\n",17,0x1000);
 80050c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c4:	2211      	movs	r2, #17
 80050c6:	490e      	ldr	r1, [pc, #56]	; (8005100 <USER_initialize+0x50>)
 80050c8:	480e      	ldr	r0, [pc, #56]	; (8005104 <USER_initialize+0x54>)
 80050ca:	f7ff fd6a 	bl	8004ba2 <HAL_UART_Transmit>
    SD_PowerOn();
 80050ce:	f7fc f9ff 	bl	80014d0 <SD_PowerOn>
    if(sd_ini()==0) {Stat &= ~STA_NOINIT;} //sbrosim status STA_NOINIT
 80050d2:	f7fc faa5 	bl	8001620 <sd_ini>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <USER_initialize+0x3c>
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <USER_initialize+0x4c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <USER_initialize+0x4c>)
 80050ea:	701a      	strb	r2, [r3, #0]

    return Stat;
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <USER_initialize+0x4c>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200000c4 	.word	0x200000c4
 8005100:	0800b0dc 	.word	0x0800b0dc
 8005104:	20000abc 	.word	0x20000abc

08005108 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;

    if (pdrv) return STA_NOINIT;
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <USER_status+0x14>
 8005118:	2301      	movs	r3, #1
 800511a:	e002      	b.n	8005122 <USER_status+0x1a>

    return Stat;
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <USER_status+0x24>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	200000c4 	.word	0x200000c4

08005130 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4603      	mov	r3, r0
 800513e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if (pdrv || !count) return RES_PARERR;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <USER_read+0x1c>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <USER_read+0x20>
 800514c:	2304      	movs	r3, #4
 800514e:	e01c      	b.n	800518a <USER_read+0x5a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <USER_read+0x64>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <USER_read+0x32>
 800515e:	2303      	movs	r3, #3
 8005160:	e013      	b.n	800518a <USER_read+0x5a>
	//if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
	sector *= 512;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	025b      	lsls	r3, r3, #9
 8005166:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <USER_read+0x4a>
	{
	    SD_Read_Block(buff,sector); //read block to buffer
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	68b8      	ldr	r0, [r7, #8]
 8005172:	f7fc f9bf 	bl	80014f4 <SD_Read_Block>
	    count = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 800517a:	f7fc fbcd 	bl	8001918 <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END READ */
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	200000c4 	.word	0x200000c4

08005198 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4603      	mov	r3, r0
 80051a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	if (pdrv || !count) return RES_PARERR;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <USER_write+0x1c>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <USER_write+0x20>
 80051b4:	2304      	movs	r3, #4
 80051b6:	e025      	b.n	8005204 <USER_write+0x6c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <USER_write+0x74>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <USER_write+0x32>
 80051c6:	2303      	movs	r3, #3
 80051c8:	e01c      	b.n	8005204 <USER_write+0x6c>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <USER_write+0x74>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <USER_write+0x44>
 80051d8:	2302      	movs	r3, #2
 80051da:	e013      	b.n	8005204 <USER_write+0x6c>
	//if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
	sector *= 512;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	025b      	lsls	r3, r3, #9
 80051e0:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d105      	bne.n	80051f4 <USER_write+0x5c>
	{
	    SD_Write_Block((BYTE*)buff,sector); //??????? ???? ? ?????
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	68b8      	ldr	r0, [r7, #8]
 80051ec:	f7fc f9c6 	bl	800157c <SD_Write_Block>
	    count = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 80051f4:	f7fc fb90 	bl	8001918 <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200000c4 	.word	0x200000c4

08005210 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	603a      	str	r2, [r7, #0]
 800521a:	71fb      	strb	r3, [r7, #7]
 800521c:	460b      	mov	r3, r1
 800521e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]

    if (pdrv) return RES_PARERR;
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <USER_ioctl+0x1e>
 800522a:	2304      	movs	r3, #4
 800522c:	e040      	b.n	80052b0 <USER_ioctl+0xa0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800522e:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <USER_ioctl+0xa8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <USER_ioctl+0x30>
 800523c:	2303      	movs	r3, #3
 800523e:	e037      	b.n	80052b0 <USER_ioctl+0xa0>
    res = RES_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
    switch (cmd){
 8005244:	79bb      	ldrb	r3, [r7, #6]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d82b      	bhi.n	80052a2 <USER_ioctl+0x92>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <USER_ioctl+0x40>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005289 	.word	0x08005289
 8005254:	0800526f 	.word	0x0800526f
 8005258:	08005261 	.word	0x08005261
 800525c:	0800527d 	.word	0x0800527d
        case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
             *(WORD*)buff = 512;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005266:	801a      	strh	r2, [r3, #0]
             res = RES_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
        break;
 800526c:	e01d      	b.n	80052aa <USER_ioctl+0x9a>
        case GET_SECTOR_COUNT :
             *(DWORD*)buff = 4194304;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005274:	601a      	str	r2, [r3, #0]
             res = RES_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
        break;
 800527a:	e016      	b.n	80052aa <USER_ioctl+0x9a>
        case GET_BLOCK_SIZE :
             *(DWORD*)buff = 1;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
             res = RES_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
        break;
 8005286:	e010      	b.n	80052aa <USER_ioctl+0x9a>
        case CTRL_SYNC:
             SS_SD_SELECT();
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	; 0x80
 800528c:	480b      	ldr	r0, [pc, #44]	; (80052bc <USER_ioctl+0xac>)
 800528e:	f7fd f8d5 	bl	800243c <HAL_GPIO_WritePin>
             if (SPI_wait_ready() == 0xFF)
 8005292:	f7fc fb48 	bl	8001926 <SPI_wait_ready>
 8005296:	4603      	mov	r3, r0
 8005298:	2bff      	cmp	r3, #255	; 0xff
 800529a:	d105      	bne.n	80052a8 <USER_ioctl+0x98>
                res = RES_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
        break;
 80052a0:	e002      	b.n	80052a8 <USER_ioctl+0x98>
        default:
            res = RES_PARERR;
 80052a2:	2304      	movs	r3, #4
 80052a4:	73fb      	strb	r3, [r7, #15]
 80052a6:	e000      	b.n	80052aa <USER_ioctl+0x9a>
        break;
 80052a8:	bf00      	nop
    }
    SPI_Release();
 80052aa:	f7fc fb35 	bl	8001918 <SPI_Release>

    return res;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]

    //return res;
  /* USER CODE END IOCTL */
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	200000c4 	.word	0x200000c4
 80052bc:	40020000 	.word	0x40020000

080052c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <disk_status+0x30>)
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	79fa      	ldrb	r2, [r7, #7]
 80052d8:	4905      	ldr	r1, [pc, #20]	; (80052f0 <disk_status+0x30>)
 80052da:	440a      	add	r2, r1
 80052dc:	7a12      	ldrb	r2, [r2, #8]
 80052de:	4610      	mov	r0, r2
 80052e0:	4798      	blx	r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	200012a8 	.word	0x200012a8

080052f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	4a0d      	ldr	r2, [pc, #52]	; (800533c <disk_initialize+0x48>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d111      	bne.n	8005330 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <disk_initialize+0x48>)
 8005310:	2101      	movs	r1, #1
 8005312:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <disk_initialize+0x48>)
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	79fa      	ldrb	r2, [r7, #7]
 8005322:	4906      	ldr	r1, [pc, #24]	; (800533c <disk_initialize+0x48>)
 8005324:	440a      	add	r2, r1
 8005326:	7a12      	ldrb	r2, [r2, #8]
 8005328:	4610      	mov	r0, r2
 800532a:	4798      	blx	r3
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200012a8 	.word	0x200012a8

08005340 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	4a0a      	ldr	r2, [pc, #40]	; (800537c <disk_read+0x3c>)
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	689c      	ldr	r4, [r3, #8]
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	4a07      	ldr	r2, [pc, #28]	; (800537c <disk_read+0x3c>)
 8005360:	4413      	add	r3, r2
 8005362:	7a18      	ldrb	r0, [r3, #8]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	47a0      	blx	r4
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
}
 8005372:	4618      	mov	r0, r3
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}
 800537a:	bf00      	nop
 800537c:	200012a8 	.word	0x200012a8

08005380 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <disk_write+0x3c>)
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68dc      	ldr	r4, [r3, #12]
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	4a07      	ldr	r2, [pc, #28]	; (80053bc <disk_write+0x3c>)
 80053a0:	4413      	add	r3, r2
 80053a2:	7a18      	ldrb	r0, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	47a0      	blx	r4
 80053ac:	4603      	mov	r3, r0
 80053ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd90      	pop	{r4, r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200012a8 	.word	0x200012a8

080053c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	603a      	str	r2, [r7, #0]
 80053ca:	71fb      	strb	r3, [r7, #7]
 80053cc:	460b      	mov	r3, r1
 80053ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <disk_ioctl+0x38>)
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	79fa      	ldrb	r2, [r7, #7]
 80053de:	4906      	ldr	r1, [pc, #24]	; (80053f8 <disk_ioctl+0x38>)
 80053e0:	440a      	add	r2, r1
 80053e2:	7a10      	ldrb	r0, [r2, #8]
 80053e4:	79b9      	ldrb	r1, [r7, #6]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200012a8 	.word	0x200012a8

080053fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3301      	adds	r3, #1
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800540c:	89fb      	ldrh	r3, [r7, #14]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	b21a      	sxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b21b      	sxth	r3, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	b21b      	sxth	r3, r3
 800541c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800541e:	89fb      	ldrh	r3, [r7, #14]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3303      	adds	r3, #3
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	3202      	adds	r2, #2
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	3201      	adds	r2, #1
 8005450:	7812      	ldrb	r2, [r2, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
	return rv;
 8005462:	68fb      	ldr	r3, [r7, #12]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	887a      	ldrh	r2, [r7, #2]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	1c53      	adds	r3, r2, #1
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	6179      	str	r1, [r7, #20]
 800551e:	7812      	ldrb	r2, [r2, #0]
 8005520:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3b01      	subs	r3, #1
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f1      	bne.n	8005512 <mem_cpy+0x1a>
	}
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	617a      	str	r2, [r7, #20]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f3      	bne.n	8005548 <mem_set+0x10>
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800556c:	b480      	push	{r7}
 800556e:	b089      	sub	sp, #36	; 0x24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	61ba      	str	r2, [r7, #24]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	1acb      	subs	r3, r1, r3
 8005598:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3b01      	subs	r3, #1
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <mem_cmp+0x40>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0eb      	beq.n	8005584 <mem_cmp+0x18>

	return r;
 80055ac:	697b      	ldr	r3, [r7, #20]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3724      	adds	r7, #36	; 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80055c2:	e002      	b.n	80055ca <chk_chr+0x12>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <chk_chr+0x26>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	4293      	cmp	r3, r2
 80055dc:	d1f2      	bne.n	80055c4 <chk_chr+0xc>
	return *str;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	781b      	ldrb	r3, [r3, #0]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <lock_fs+0x22>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 fafd 	bl	8007bfe <ff_req_grant>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <lock_fs+0x22>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <lock_fs+0x24>
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00d      	beq.n	8005646 <unlock_fs+0x2e>
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	2b0c      	cmp	r3, #12
 800562e:	d00a      	beq.n	8005646 <unlock_fs+0x2e>
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	2b0b      	cmp	r3, #11
 8005634:	d007      	beq.n	8005646 <unlock_fs+0x2e>
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d004      	beq.n	8005646 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4618      	mov	r0, r3
 8005642:	f002 faf1 	bl	8007c28 <ff_rel_grant>
	}
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e029      	b.n	80056b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <chk_lock+0xb0>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	4413      	add	r3, r2
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01d      	beq.n	80056ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005672:	4a23      	ldr	r2, [pc, #140]	; (8005700 <chk_lock+0xb0>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	4413      	add	r3, r2
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d116      	bne.n	80056b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <chk_lock+0xb0>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4413      	add	r3, r2
 800568c:	3304      	adds	r3, #4
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005694:	429a      	cmp	r2, r3
 8005696:	d10c      	bne.n	80056b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <chk_lock+0xb0>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	4413      	add	r3, r2
 80056a0:	3308      	adds	r3, #8
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d102      	bne.n	80056b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80056ac:	e007      	b.n	80056be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d9d2      	bls.n	8005664 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d109      	bne.n	80056d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <chk_lock+0x80>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d101      	bne.n	80056d4 <chk_lock+0x84>
 80056d0:	2300      	movs	r3, #0
 80056d2:	e010      	b.n	80056f6 <chk_lock+0xa6>
 80056d4:	2312      	movs	r3, #18
 80056d6:	e00e      	b.n	80056f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d108      	bne.n	80056f0 <chk_lock+0xa0>
 80056de:	4a08      	ldr	r2, [pc, #32]	; (8005700 <chk_lock+0xb0>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4413      	add	r3, r2
 80056e6:	330c      	adds	r3, #12
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ee:	d101      	bne.n	80056f4 <chk_lock+0xa4>
 80056f0:	2310      	movs	r3, #16
 80056f2:	e000      	b.n	80056f6 <chk_lock+0xa6>
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	20001288 	.word	0x20001288

08005704 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	e002      	b.n	8005716 <enq_lock+0x12>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3301      	adds	r3, #1
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d806      	bhi.n	800572a <enq_lock+0x26>
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <enq_lock+0x3c>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	4413      	add	r3, r2
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f2      	bne.n	8005710 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b02      	cmp	r3, #2
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	20001288 	.word	0x20001288

08005744 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e01f      	b.n	8005794 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005754:	4a41      	ldr	r2, [pc, #260]	; (800585c <inc_lock+0x118>)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	4413      	add	r3, r2
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d113      	bne.n	800578e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005766:	4a3d      	ldr	r2, [pc, #244]	; (800585c <inc_lock+0x118>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	4413      	add	r3, r2
 800576e:	3304      	adds	r3, #4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005776:	429a      	cmp	r2, r3
 8005778:	d109      	bne.n	800578e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800577a:	4a38      	ldr	r2, [pc, #224]	; (800585c <inc_lock+0x118>)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4413      	add	r3, r2
 8005782:	3308      	adds	r3, #8
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800578a:	429a      	cmp	r2, r3
 800578c:	d006      	beq.n	800579c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d9dc      	bls.n	8005754 <inc_lock+0x10>
 800579a:	e000      	b.n	800579e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800579c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d132      	bne.n	800580a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e002      	b.n	80057b0 <inc_lock+0x6c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d806      	bhi.n	80057c4 <inc_lock+0x80>
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <inc_lock+0x118>)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	4413      	add	r3, r2
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f2      	bne.n	80057aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d101      	bne.n	80057ce <inc_lock+0x8a>
 80057ca:	2300      	movs	r3, #0
 80057cc:	e040      	b.n	8005850 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4922      	ldr	r1, [pc, #136]	; (800585c <inc_lock+0x118>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	440b      	add	r3, r1
 80057da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	491e      	ldr	r1, [pc, #120]	; (800585c <inc_lock+0x118>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	440b      	add	r3, r1
 80057e8:	3304      	adds	r3, #4
 80057ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	491a      	ldr	r1, [pc, #104]	; (800585c <inc_lock+0x118>)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	440b      	add	r3, r1
 80057f8:	3308      	adds	r3, #8
 80057fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80057fc:	4a17      	ldr	r2, [pc, #92]	; (800585c <inc_lock+0x118>)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	4413      	add	r3, r2
 8005804:	330c      	adds	r3, #12
 8005806:	2200      	movs	r2, #0
 8005808:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <inc_lock+0xe0>
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <inc_lock+0x118>)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	4413      	add	r3, r2
 8005818:	330c      	adds	r3, #12
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <inc_lock+0xe0>
 8005820:	2300      	movs	r3, #0
 8005822:	e015      	b.n	8005850 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d108      	bne.n	800583c <inc_lock+0xf8>
 800582a:	4a0c      	ldr	r2, [pc, #48]	; (800585c <inc_lock+0x118>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	4413      	add	r3, r2
 8005832:	330c      	adds	r3, #12
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	e001      	b.n	8005840 <inc_lock+0xfc>
 800583c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005840:	4906      	ldr	r1, [pc, #24]	; (800585c <inc_lock+0x118>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	440b      	add	r3, r1
 8005848:	330c      	adds	r3, #12
 800584a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20001288 	.word	0x20001288

08005860 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3b01      	subs	r3, #1
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d825      	bhi.n	80058c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <dec_lock+0x70>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	4413      	add	r3, r2
 800587c:	330c      	adds	r3, #12
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005888:	d101      	bne.n	800588e <dec_lock+0x2e>
 800588a:	2300      	movs	r3, #0
 800588c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800588e:	89fb      	ldrh	r3, [r7, #14]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <dec_lock+0x3a>
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	3b01      	subs	r3, #1
 8005898:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800589a:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <dec_lock+0x70>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	4413      	add	r3, r2
 80058a2:	330c      	adds	r3, #12
 80058a4:	89fa      	ldrh	r2, [r7, #14]
 80058a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80058a8:	89fb      	ldrh	r3, [r7, #14]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <dec_lock+0x5a>
 80058ae:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <dec_lock+0x70>)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	4413      	add	r3, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	737b      	strb	r3, [r7, #13]
 80058be:	e001      	b.n	80058c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80058c0:	2302      	movs	r3, #2
 80058c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80058c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	20001288 	.word	0x20001288

080058d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e010      	b.n	8005904 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80058e2:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <clear_lock+0x44>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	4413      	add	r3, r2
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d105      	bne.n	80058fe <clear_lock+0x2a>
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <clear_lock+0x44>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	4413      	add	r3, r2
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d9eb      	bls.n	80058e2 <clear_lock+0xe>
	}
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20001288 	.word	0x20001288

0800591c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d034      	beq.n	800599a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7858      	ldrb	r0, [r3, #1]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005940:	2301      	movs	r3, #1
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	f7ff fd1c 	bl	8005380 <disk_write>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <sync_window+0x38>
			res = FR_DISK_ERR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
 8005952:	e022      	b.n	800599a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	1ad2      	subs	r2, r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	429a      	cmp	r2, r3
 8005968:	d217      	bcs.n	800599a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	789b      	ldrb	r3, [r3, #2]
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	e010      	b.n	8005994 <sync_window+0x78>
					wsect += fs->fsize;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	7858      	ldrb	r0, [r3, #1]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005986:	2301      	movs	r3, #1
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	f7ff fcf9 	bl	8005380 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	3b01      	subs	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d8eb      	bhi.n	8005972 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d01b      	beq.n	80059f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ffad 	bl	800591c <sync_window>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d113      	bne.n	80059f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7858      	ldrb	r0, [r3, #1]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059d6:	2301      	movs	r3, #1
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	f7ff fcb1 	bl	8005340 <disk_read>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ff87 	bl	800591c <sync_window>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d158      	bne.n	8005aca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d148      	bne.n	8005ab2 <sync_fs+0xb2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	791b      	ldrb	r3, [r3, #4]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d144      	bne.n	8005ab2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3334      	adds	r3, #52	; 0x34
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fd80 	bl	8005538 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3334      	adds	r3, #52	; 0x34
 8005a3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a40:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fd12 	bl	800546e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3334      	adds	r3, #52	; 0x34
 8005a4e:	4921      	ldr	r1, [pc, #132]	; (8005ad4 <sync_fs+0xd4>)
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fd26 	bl	80054a2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3334      	adds	r3, #52	; 0x34
 8005a5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a5e:	491e      	ldr	r1, [pc, #120]	; (8005ad8 <sync_fs+0xd8>)
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fd1e 	bl	80054a2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3334      	adds	r3, #52	; 0x34
 8005a6a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f7ff fd14 	bl	80054a2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3334      	adds	r3, #52	; 0x34
 8005a7e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7ff fd0a 	bl	80054a2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	7858      	ldrb	r0, [r3, #1]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f7ff fc6a 	bl	8005380 <disk_write>
			fs->fsi_flag = 0;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fc80 	bl	80053c0 <disk_ioctl>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <sync_fs+0xca>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	41615252 	.word	0x41615252
 8005ad8:	61417272 	.word	0x61417272

08005adc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	3b02      	subs	r3, #2
 8005aea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	3b02      	subs	r3, #2
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d301      	bcc.n	8005afc <clust2sect+0x20>
 8005af8:	2300      	movs	r3, #0
 8005afa:	e008      	b.n	8005b0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	895b      	ldrh	r3, [r3, #10]
 8005b00:	461a      	mov	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	fb03 f202 	mul.w	r2, r3, r2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4413      	add	r3, r2
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d904      	bls.n	8005b38 <get_fat+0x20>
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <get_fat+0x26>
		val = 1;	/* Internal error */
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e08f      	b.n	8005c5e <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d062      	beq.n	8005c12 <get_fat+0xfa>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	dc7c      	bgt.n	8005c4a <get_fat+0x132>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d002      	beq.n	8005b5a <get_fat+0x42>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d042      	beq.n	8005bde <get_fat+0xc6>
 8005b58:	e077      	b.n	8005c4a <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	0a5b      	lsrs	r3, r3, #9
 8005b70:	4413      	add	r3, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	6938      	ldr	r0, [r7, #16]
 8005b76:	f7ff ff15 	bl	80059a4 <move_window>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d167      	bne.n	8005c50 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	60fa      	str	r2, [r7, #12]
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b92:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6938      	ldr	r0, [r7, #16]
 8005ba2:	f7ff feff 	bl	80059a4 <move_window>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d153      	bne.n	8005c54 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <get_fat+0xbc>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	e002      	b.n	8005bda <get_fat+0xc2>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	617b      	str	r3, [r7, #20]
			break;
 8005bdc:	e03f      	b.n	8005c5e <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	4413      	add	r3, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	6938      	ldr	r0, [r7, #16]
 8005bec:	f7ff feda 	bl	80059a4 <move_window>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d130      	bne.n	8005c58 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c04:	4413      	add	r3, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fbf8 	bl	80053fc <ld_word>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	617b      	str	r3, [r7, #20]
			break;
 8005c10:	e025      	b.n	8005c5e <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	09db      	lsrs	r3, r3, #7
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6938      	ldr	r0, [r7, #16]
 8005c20:	f7ff fec0 	bl	80059a4 <move_window>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d118      	bne.n	8005c5c <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c38:	4413      	add	r3, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fbf5 	bl	800542a <ld_dword>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c46:	617b      	str	r3, [r7, #20]
			break;
 8005c48:	e009      	b.n	8005c5e <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e006      	b.n	8005c5e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c50:	bf00      	nop
 8005c52:	e004      	b.n	8005c5e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c54:	bf00      	nop
 8005c56:	e002      	b.n	8005c5e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c5c:	bf00      	nop
		}
	}

	return val;
 8005c5e:	697b      	ldr	r3, [r7, #20]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b089      	sub	sp, #36	; 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005c74:	2302      	movs	r3, #2
 8005c76:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	f240 80d2 	bls.w	8005e24 <put_fat+0x1bc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	f080 80cc 	bcs.w	8005e24 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	f000 8096 	beq.w	8005dc2 <put_fat+0x15a>
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	f300 80cd 	bgt.w	8005e36 <put_fat+0x1ce>
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d002      	beq.n	8005ca6 <put_fat+0x3e>
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d06e      	beq.n	8005d82 <put_fat+0x11a>
 8005ca4:	e0c7      	b.n	8005e36 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	0a5b      	lsrs	r3, r3, #9
 8005cbc:	4413      	add	r3, r2
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fe6f 	bl	80059a4 <move_window>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cca:	7ffb      	ldrb	r3, [r7, #31]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 80ab 	bne.w	8005e28 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	1c59      	adds	r1, r3, #1
 8005cdc:	61b9      	str	r1, [r7, #24]
 8005cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce2:	4413      	add	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <put_fat+0xa4>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	b25a      	sxtb	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	b25b      	sxtb	r3, r3
 8005d04:	4313      	orrs	r3, r2
 8005d06:	b25b      	sxtb	r3, r3
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e001      	b.n	8005d10 <put_fat+0xa8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	0a5b      	lsrs	r3, r3, #9
 8005d22:	4413      	add	r3, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f7ff fe3c 	bl	80059a4 <move_window>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d30:	7ffb      	ldrb	r3, [r7, #31]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d17a      	bne.n	8005e2c <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	4413      	add	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <put_fat+0xf0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	e00e      	b.n	8005d76 <put_fat+0x10e>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f023 030f 	bic.w	r3, r3, #15
 8005d62:	b25a      	sxtb	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	4313      	orrs	r3, r2
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	70da      	strb	r2, [r3, #3]
			break;
 8005d80:	e059      	b.n	8005e36 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	4413      	add	r3, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fe08 	bl	80059a4 <move_window>
 8005d94:	4603      	mov	r3, r0
 8005d96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d98:	7ffb      	ldrb	r3, [r7, #31]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d148      	bne.n	8005e30 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005dac:	4413      	add	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	b292      	uxth	r2, r2
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fb5a 	bl	800546e <st_word>
			fs->wflag = 1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	70da      	strb	r2, [r3, #3]
			break;
 8005dc0:	e039      	b.n	8005e36 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	4413      	add	r3, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fde8 	bl	80059a4 <move_window>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d12a      	bne.n	8005e34 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005df2:	4413      	add	r3, r2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fb18 	bl	800542a <ld_dword>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e00:	4323      	orrs	r3, r4
 8005e02:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005e12:	4413      	add	r3, r2
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fb43 	bl	80054a2 <st_dword>
			fs->wflag = 1;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	70da      	strb	r2, [r3, #3]
			break;
 8005e22:	e008      	b.n	8005e36 <put_fat+0x1ce>
		}
	}
 8005e24:	bf00      	nop
 8005e26:	e006      	b.n	8005e36 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005e28:	bf00      	nop
 8005e2a:	e004      	b.n	8005e36 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005e2c:	bf00      	nop
 8005e2e:	e002      	b.n	8005e36 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005e30:	bf00      	nop
 8005e32:	e000      	b.n	8005e36 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005e34:	bf00      	nop
	return res;
 8005e36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3724      	adds	r7, #36	; 0x24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd90      	pop	{r4, r7, pc}

08005e40 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d904      	bls.n	8005e66 <remove_chain+0x26>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d301      	bcc.n	8005e6a <remove_chain+0x2a>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e04b      	b.n	8005f02 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00c      	beq.n	8005e8a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	69b8      	ldr	r0, [r7, #24]
 8005e78:	f7ff fef6 	bl	8005c68 <put_fat>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005e80:	7ffb      	ldrb	r3, [r7, #31]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <remove_chain+0x4a>
 8005e86:	7ffb      	ldrb	r3, [r7, #31]
 8005e88:	e03b      	b.n	8005f02 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff fe43 	bl	8005b18 <get_fat>
 8005e92:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d031      	beq.n	8005efe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <remove_chain+0x64>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e02e      	b.n	8005f02 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d101      	bne.n	8005eb0 <remove_chain+0x70>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e028      	b.n	8005f02 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	69b8      	ldr	r0, [r7, #24]
 8005eb6:	f7ff fed7 	bl	8005c68 <put_fat>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ebe:	7ffb      	ldrb	r3, [r7, #31]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <remove_chain+0x88>
 8005ec4:	7ffb      	ldrb	r3, [r7, #31]
 8005ec6:	e01c      	b.n	8005f02 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	3b02      	subs	r3, #2
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20b      	bcs.n	8005eee <remove_chain+0xae>
			fs->free_clst++;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	791b      	ldrb	r3, [r3, #4]
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3c6      	bcc.n	8005e8a <remove_chain+0x4a>
 8005efc:	e000      	b.n	8005f00 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005efe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <create_chain+0x2c>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d31b      	bcc.n	8005f6e <create_chain+0x64>
 8005f36:	2301      	movs	r3, #1
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e018      	b.n	8005f6e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fdea 	bl	8005b18 <get_fat>
 8005f44:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d801      	bhi.n	8005f50 <create_chain+0x46>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e070      	b.n	8006032 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d101      	bne.n	8005f5c <create_chain+0x52>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	e06a      	b.n	8006032 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d201      	bcs.n	8005f6a <create_chain+0x60>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	e063      	b.n	8006032 <create_chain+0x128>
		scl = clst;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3301      	adds	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d307      	bcc.n	8005f92 <create_chain+0x88>
				ncl = 2;
 8005f82:	2302      	movs	r3, #2
 8005f84:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d901      	bls.n	8005f92 <create_chain+0x88>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e04f      	b.n	8006032 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f92:	69f9      	ldr	r1, [r7, #28]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff fdbf 	bl	8005b18 <get_fat>
 8005f9a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00e      	beq.n	8005fc0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d003      	beq.n	8005fb0 <create_chain+0xa6>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d101      	bne.n	8005fb4 <create_chain+0xaa>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	e03e      	b.n	8006032 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d1da      	bne.n	8005f72 <create_chain+0x68>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e038      	b.n	8006032 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005fc0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	69f9      	ldr	r1, [r7, #28]
 8005fc8:	6938      	ldr	r0, [r7, #16]
 8005fca:	f7ff fe4d 	bl	8005c68 <put_fat>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <create_chain+0xe2>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6938      	ldr	r0, [r7, #16]
 8005fe4:	f7ff fe40 	bl	8005c68 <put_fat>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d116      	bne.n	8006020 <create_chain+0x116>
		fs->last_clst = ncl;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	3b02      	subs	r3, #2
 8006002:	429a      	cmp	r2, r3
 8006004:	d804      	bhi.n	8006010 <create_chain+0x106>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	1e5a      	subs	r2, r3, #1
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	791b      	ldrb	r3, [r3, #4]
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	711a      	strb	r2, [r3, #4]
 800601e:	e007      	b.n	8006030 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d102      	bne.n	800602c <create_chain+0x122>
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	e000      	b.n	800602e <create_chain+0x124>
 800602c:	2301      	movs	r3, #1
 800602e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006030:	69fb      	ldr	r3, [r7, #28]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800603a:	b480      	push	{r7}
 800603c:	b087      	sub	sp, #28
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	3304      	adds	r3, #4
 8006050:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	0a5b      	lsrs	r3, r3, #9
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	8952      	ldrh	r2, [r2, #10]
 800605a:	fbb3 f3f2 	udiv	r3, r3, r2
 800605e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	613a      	str	r2, [r7, #16]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <clmt_clust+0x3a>
 8006070:	2300      	movs	r3, #0
 8006072:	e010      	b.n	8006096 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	d307      	bcc.n	800608c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3304      	adds	r3, #4
 8006088:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800608a:	e7e9      	b.n	8006060 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800608c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
}
 8006096:	4618      	mov	r0, r3
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060b6:	d204      	bcs.n	80060c2 <dir_sdi+0x22>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80060c2:	2302      	movs	r3, #2
 80060c4:	e063      	b.n	800618e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <dir_sdi+0x46>
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d902      	bls.n	80060e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10c      	bne.n	8006106 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	8912      	ldrh	r2, [r2, #8]
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d301      	bcc.n	80060fc <dir_sdi+0x5c>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e048      	b.n	800618e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	61da      	str	r2, [r3, #28]
 8006104:	e029      	b.n	800615a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	895b      	ldrh	r3, [r3, #10]
 800610a:	025b      	lsls	r3, r3, #9
 800610c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800610e:	e019      	b.n	8006144 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fcff 	bl	8005b18 <get_fat>
 800611a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d101      	bne.n	8006128 <dir_sdi+0x88>
 8006124:	2301      	movs	r3, #1
 8006126:	e032      	b.n	800618e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d904      	bls.n	8006138 <dir_sdi+0x98>
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	429a      	cmp	r2, r3
 8006136:	d301      	bcc.n	800613c <dir_sdi+0x9c>
 8006138:	2302      	movs	r3, #2
 800613a:	e028      	b.n	800618e <dir_sdi+0xee>
			ofs -= csz;
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	429a      	cmp	r2, r3
 800614a:	d2e1      	bcs.n	8006110 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800614c:	6979      	ldr	r1, [r7, #20]
 800614e:	6938      	ldr	r0, [r7, #16]
 8006150:	f7ff fcc4 	bl	8005adc <clust2sect>
 8006154:	4602      	mov	r2, r0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <dir_sdi+0xcc>
 8006168:	2302      	movs	r3, #2
 800616a:	e010      	b.n	800618e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	0a5b      	lsrs	r3, r3, #9
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006186:	441a      	add	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	3320      	adds	r3, #32
 80061ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <dir_next+0x28>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061bc:	d301      	bcc.n	80061c2 <dir_next+0x2c>
 80061be:	2304      	movs	r3, #4
 80061c0:	e0aa      	b.n	8006318 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 8098 	bne.w	80062fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	8912      	ldrh	r2, [r2, #8]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	f0c0 8088 	bcc.w	80062fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	61da      	str	r2, [r3, #28]
 80061f4:	2304      	movs	r3, #4
 80061f6:	e08f      	b.n	8006318 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	0a5b      	lsrs	r3, r3, #9
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	8952      	ldrh	r2, [r2, #10]
 8006200:	3a01      	subs	r2, #1
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d17a      	bne.n	80062fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7ff fc81 	bl	8005b18 <get_fat>
 8006216:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d801      	bhi.n	8006222 <dir_next+0x8c>
 800621e:	2302      	movs	r3, #2
 8006220:	e07a      	b.n	8006318 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d101      	bne.n	800622e <dir_next+0x98>
 800622a:	2301      	movs	r3, #1
 800622c:	e074      	b.n	8006318 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	429a      	cmp	r2, r3
 8006236:	d358      	bcc.n	80062ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	61da      	str	r2, [r3, #28]
 8006244:	2304      	movs	r3, #4
 8006246:	e067      	b.n	8006318 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f7ff fe5a 	bl	8005f0a <create_chain>
 8006256:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <dir_next+0xcc>
 800625e:	2307      	movs	r3, #7
 8006260:	e05a      	b.n	8006318 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <dir_next+0xd6>
 8006268:	2302      	movs	r3, #2
 800626a:	e055      	b.n	8006318 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d101      	bne.n	8006278 <dir_next+0xe2>
 8006274:	2301      	movs	r3, #1
 8006276:	e04f      	b.n	8006318 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fb4f 	bl	800591c <sync_window>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <dir_next+0xf2>
 8006284:	2301      	movs	r3, #1
 8006286:	e047      	b.n	8006318 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3334      	adds	r3, #52	; 0x34
 800628c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff f950 	bl	8005538 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	6979      	ldr	r1, [r7, #20]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fc1c 	bl	8005adc <clust2sect>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
 80062aa:	e012      	b.n	80062d2 <dir_next+0x13c>
						fs->wflag = 1;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fb32 	bl	800591c <sync_window>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <dir_next+0x12c>
 80062be:	2301      	movs	r3, #1
 80062c0:	e02a      	b.n	8006318 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	3301      	adds	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	895b      	ldrh	r3, [r3, #10]
 80062d6:	461a      	mov	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4293      	cmp	r3, r2
 80062dc:	d3e6      	bcc.n	80062ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad2      	subs	r2, r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80062f0:	6979      	ldr	r1, [r7, #20]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fbf2 	bl	8005adc <clust2sect>
 80062f8:	4602      	mov	r2, r0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006310:	441a      	add	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff feb4 	bl	80060a0 <dir_sdi>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d12b      	bne.n	800639a <dir_alloc+0x7a>
		n = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4619      	mov	r1, r3
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff fb29 	bl	80059a4 <move_window>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11d      	bne.n	8006398 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2be5      	cmp	r3, #229	; 0xe5
 8006364:	d004      	beq.n	8006370 <dir_alloc+0x50>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3301      	adds	r3, #1
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d102      	bne.n	8006384 <dir_alloc+0x64>
 800637e:	e00c      	b.n	800639a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006384:	2101      	movs	r1, #1
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ff05 	bl	8006196 <dir_next>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0d7      	beq.n	8006346 <dir_alloc+0x26>
 8006396:	e000      	b.n	800639a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006398:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d101      	bne.n	80063a4 <dir_alloc+0x84>
 80063a0:	2307      	movs	r3, #7
 80063a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	331a      	adds	r3, #26
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff f81d 	bl	80053fc <ld_word>
 80063c2:	4603      	mov	r3, r0
 80063c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d109      	bne.n	80063e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff f812 	bl	80053fc <ld_word>
 80063d8:	4603      	mov	r3, r0
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	331a      	adds	r3, #26
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	b292      	uxth	r2, r2
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff f833 	bl	800546e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d109      	bne.n	8006424 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f103 0214 	add.w	r2, r3, #20
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0c1b      	lsrs	r3, r3, #16
 800641a:	b29b      	uxth	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7ff f825 	bl	800546e <st_word>
	}
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fe2f 	bl	80060a0 <dir_sdi>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <dir_find+0x24>
 800644c:	7dfb      	ldrb	r3, [r7, #23]
 800644e:	e03e      	b.n	80064ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	4619      	mov	r1, r3
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f7ff faa4 	bl	80059a4 <move_window>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d12f      	bne.n	80064c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <dir_find+0x4e>
 8006474:	2304      	movs	r3, #4
 8006476:	75fb      	strb	r3, [r7, #23]
 8006478:	e028      	b.n	80064cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	330b      	adds	r3, #11
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006486:	b2da      	uxtb	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	330b      	adds	r3, #11
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <dir_find+0x86>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a18      	ldr	r0, [r3, #32]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	220b      	movs	r2, #11
 80064a6:	4619      	mov	r1, r3
 80064a8:	f7ff f860 	bl	800556c <mem_cmp>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fe6e 	bl	8006196 <dir_next>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0c5      	beq.n	8006450 <dir_find+0x24>
 80064c4:	e002      	b.n	80064cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80064ca:	bf00      	nop

	return res;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80064e4:	2101      	movs	r1, #1
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ff1a 	bl	8006320 <dir_alloc>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11c      	bne.n	8006530 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4619      	mov	r1, r3
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f7ff fa51 	bl	80059a4 <move_window>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d111      	bne.n	8006530 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	2220      	movs	r2, #32
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff f80f 	bl	8005538 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a18      	ldr	r0, [r3, #32]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3324      	adds	r3, #36	; 0x24
 8006522:	220b      	movs	r2, #11
 8006524:	4619      	mov	r1, r3
 8006526:	f7fe ffe7 	bl	80054f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2201      	movs	r2, #1
 800652e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3324      	adds	r3, #36	; 0x24
 8006550:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006552:	220b      	movs	r2, #11
 8006554:	2120      	movs	r1, #32
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7fe ffee 	bl	8005538 <mem_set>
	si = i = 0; ni = 8;
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	2308      	movs	r3, #8
 8006566:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006576:	7efb      	ldrb	r3, [r7, #27]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d94e      	bls.n	800661a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800657c:	7efb      	ldrb	r3, [r7, #27]
 800657e:	2b2f      	cmp	r3, #47	; 0x2f
 8006580:	d006      	beq.n	8006590 <create_name+0x54>
 8006582:	7efb      	ldrb	r3, [r7, #27]
 8006584:	2b5c      	cmp	r3, #92	; 0x5c
 8006586:	d110      	bne.n	80065aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006588:	e002      	b.n	8006590 <create_name+0x54>
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b2f      	cmp	r3, #47	; 0x2f
 800659a:	d0f6      	beq.n	800658a <create_name+0x4e>
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b5c      	cmp	r3, #92	; 0x5c
 80065a6:	d0f0      	beq.n	800658a <create_name+0x4e>
			break;
 80065a8:	e038      	b.n	800661c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80065aa:	7efb      	ldrb	r3, [r7, #27]
 80065ac:	2b2e      	cmp	r3, #46	; 0x2e
 80065ae:	d003      	beq.n	80065b8 <create_name+0x7c>
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d30c      	bcc.n	80065d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b0b      	cmp	r3, #11
 80065bc:	d002      	beq.n	80065c4 <create_name+0x88>
 80065be:	7efb      	ldrb	r3, [r7, #27]
 80065c0:	2b2e      	cmp	r3, #46	; 0x2e
 80065c2:	d001      	beq.n	80065c8 <create_name+0x8c>
 80065c4:	2306      	movs	r3, #6
 80065c6:	e044      	b.n	8006652 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80065c8:	2308      	movs	r3, #8
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	230b      	movs	r3, #11
 80065ce:	617b      	str	r3, [r7, #20]
			continue;
 80065d0:	e022      	b.n	8006618 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80065d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da04      	bge.n	80065e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80065da:	7efb      	ldrb	r3, [r7, #27]
 80065dc:	3b80      	subs	r3, #128	; 0x80
 80065de:	4a1f      	ldr	r2, [pc, #124]	; (800665c <create_name+0x120>)
 80065e0:	5cd3      	ldrb	r3, [r2, r3]
 80065e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	4619      	mov	r1, r3
 80065e8:	481d      	ldr	r0, [pc, #116]	; (8006660 <create_name+0x124>)
 80065ea:	f7fe ffe5 	bl	80055b8 <chk_chr>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <create_name+0xbc>
 80065f4:	2306      	movs	r3, #6
 80065f6:	e02c      	b.n	8006652 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80065f8:	7efb      	ldrb	r3, [r7, #27]
 80065fa:	2b60      	cmp	r3, #96	; 0x60
 80065fc:	d905      	bls.n	800660a <create_name+0xce>
 80065fe:	7efb      	ldrb	r3, [r7, #27]
 8006600:	2b7a      	cmp	r3, #122	; 0x7a
 8006602:	d802      	bhi.n	800660a <create_name+0xce>
 8006604:	7efb      	ldrb	r3, [r7, #27]
 8006606:	3b20      	subs	r3, #32
 8006608:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	613a      	str	r2, [r7, #16]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	4413      	add	r3, r2
 8006614:	7efa      	ldrb	r2, [r7, #27]
 8006616:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006618:	e7a6      	b.n	8006568 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800661a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	441a      	add	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <create_name+0xf4>
 800662c:	2306      	movs	r3, #6
 800662e:	e010      	b.n	8006652 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2be5      	cmp	r3, #229	; 0xe5
 8006636:	d102      	bne.n	800663e <create_name+0x102>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2205      	movs	r2, #5
 800663c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800663e:	7efb      	ldrb	r3, [r7, #27]
 8006640:	2b20      	cmp	r3, #32
 8006642:	d801      	bhi.n	8006648 <create_name+0x10c>
 8006644:	2204      	movs	r2, #4
 8006646:	e000      	b.n	800664a <create_name+0x10e>
 8006648:	2200      	movs	r2, #0
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	330b      	adds	r3, #11
 800664e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006650:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	0800b160 	.word	0x0800b160
 8006660:	0800b0f0 	.word	0x0800b0f0

08006664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006678:	e002      	b.n	8006680 <follow_path+0x1c>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b2f      	cmp	r3, #47	; 0x2f
 8006686:	d0f8      	beq.n	800667a <follow_path+0x16>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b5c      	cmp	r3, #92	; 0x5c
 800668e:	d0f4      	beq.n	800667a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2200      	movs	r2, #0
 8006694:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b1f      	cmp	r3, #31
 800669c:	d80a      	bhi.n	80066b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2280      	movs	r2, #128	; 0x80
 80066a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fcf9 	bl	80060a0 <dir_sdi>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75fb      	strb	r3, [r7, #23]
 80066b2:	e043      	b.n	800673c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066b4:	463b      	mov	r3, r7
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff3f 	bl	800653c <create_name>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d134      	bne.n	8006732 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff feaf 	bl	800642c <dir_find>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80066d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d127      	bne.n	8006736 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d122      	bne.n	8006736 <follow_path+0xd2>
 80066f0:	2305      	movs	r3, #5
 80066f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80066f4:	e01f      	b.n	8006736 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11c      	bne.n	800673a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	799b      	ldrb	r3, [r3, #6]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800670c:	2305      	movs	r3, #5
 800670e:	75fb      	strb	r3, [r7, #23]
 8006710:	e014      	b.n	800673c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	4413      	add	r3, r2
 8006722:	4619      	mov	r1, r3
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff fe42 	bl	80063ae <ld_clust>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006730:	e7c0      	b.n	80066b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <follow_path+0xd8>
				break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800673a:	bf00      	nop
			}
		}
	}

	return res;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d031      	beq.n	80067c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e002      	b.n	800676a <get_ldnumber+0x24>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3301      	adds	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b20      	cmp	r3, #32
 8006770:	d903      	bls.n	800677a <get_ldnumber+0x34>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b3a      	cmp	r3, #58	; 0x3a
 8006778:	d1f4      	bne.n	8006764 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b3a      	cmp	r3, #58	; 0x3a
 8006780:	d11c      	bne.n	80067bc <get_ldnumber+0x76>
			tp = *path;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	60fa      	str	r2, [r7, #12]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	3b30      	subs	r3, #48	; 0x30
 8006792:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b09      	cmp	r3, #9
 8006798:	d80e      	bhi.n	80067b8 <get_ldnumber+0x72>
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d10a      	bne.n	80067b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d107      	bne.n	80067b8 <get_ldnumber+0x72>
					vol = (int)i;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3301      	adds	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	e002      	b.n	80067c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80067c0:	693b      	ldr	r3, [r7, #16]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	70da      	strb	r2, [r3, #3]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff f8dc 	bl	80059a4 <move_window>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <check_fs+0x2a>
 80067f2:	2304      	movs	r3, #4
 80067f4:	e038      	b.n	8006868 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3334      	adds	r3, #52	; 0x34
 80067fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fdfc 	bl	80053fc <ld_word>
 8006804:	4603      	mov	r3, r0
 8006806:	461a      	mov	r2, r3
 8006808:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <check_fs+0x48>
 8006810:	2303      	movs	r3, #3
 8006812:	e029      	b.n	8006868 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800681a:	2be9      	cmp	r3, #233	; 0xe9
 800681c:	d009      	beq.n	8006832 <check_fs+0x66>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006824:	2beb      	cmp	r3, #235	; 0xeb
 8006826:	d11e      	bne.n	8006866 <check_fs+0x9a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800682e:	2b90      	cmp	r3, #144	; 0x90
 8006830:	d119      	bne.n	8006866 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3334      	adds	r3, #52	; 0x34
 8006836:	3336      	adds	r3, #54	; 0x36
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fdf6 	bl	800542a <ld_dword>
 800683e:	4603      	mov	r3, r0
 8006840:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006844:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <check_fs+0xa4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <check_fs+0x82>
 800684a:	2300      	movs	r3, #0
 800684c:	e00c      	b.n	8006868 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3334      	adds	r3, #52	; 0x34
 8006852:	3352      	adds	r3, #82	; 0x52
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe fde8 	bl	800542a <ld_dword>
 800685a:	4603      	mov	r3, r0
 800685c:	4a05      	ldr	r2, [pc, #20]	; (8006874 <check_fs+0xa8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d101      	bne.n	8006866 <check_fs+0x9a>
 8006862:	2300      	movs	r3, #0
 8006864:	e000      	b.n	8006868 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006866:	2302      	movs	r3, #2
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	00544146 	.word	0x00544146
 8006874:	33544146 	.word	0x33544146

08006878 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b096      	sub	sp, #88	; 0x58
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff ff5a 	bl	8006746 <get_ldnumber>
 8006892:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006896:	2b00      	cmp	r3, #0
 8006898:	da01      	bge.n	800689e <find_volume+0x26>
 800689a:	230b      	movs	r3, #11
 800689c:	e235      	b.n	8006d0a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800689e:	4aa5      	ldr	r2, [pc, #660]	; (8006b34 <find_volume+0x2bc>)
 80068a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <find_volume+0x3a>
 80068ae:	230c      	movs	r3, #12
 80068b0:	e22b      	b.n	8006d0a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80068b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068b4:	f7fe fe9a 	bl	80055ec <lock_fs>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <find_volume+0x4a>
 80068be:	230f      	movs	r3, #15
 80068c0:	e223      	b.n	8006d0a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01a      	beq.n	800690e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fcef 	bl	80052c0 <disk_status>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10c      	bne.n	800690e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <find_volume+0x92>
 80068fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006906:	230a      	movs	r3, #10
 8006908:	e1ff      	b.n	8006d0a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800690a:	2300      	movs	r3, #0
 800690c:	e1fd      	b.n	8006d0a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	b2da      	uxtb	r2, r3
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fce7 	bl	80052f4 <disk_initialize>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800692c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006938:	2303      	movs	r3, #3
 800693a:	e1e6      	b.n	8006d0a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <find_volume+0xda>
 8006942:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800694e:	230a      	movs	r3, #10
 8006950:	e1db      	b.n	8006d0a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006956:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800695a:	f7ff ff37 	bl	80067cc <check_fs>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006968:	2b02      	cmp	r3, #2
 800696a:	d149      	bne.n	8006a00 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800696c:	2300      	movs	r3, #0
 800696e:	643b      	str	r3, [r7, #64]	; 0x40
 8006970:	e01e      	b.n	80069b0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006980:	4413      	add	r3, r2
 8006982:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	3304      	adds	r3, #4
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d006      	beq.n	800699c <find_volume+0x124>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	3308      	adds	r3, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fd49 	bl	800542a <ld_dword>
 8006998:	4602      	mov	r2, r0
 800699a:	e000      	b.n	800699e <find_volume+0x126>
 800699c:	2200      	movs	r2, #0
 800699e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	3358      	adds	r3, #88	; 0x58
 80069a4:	443b      	add	r3, r7
 80069a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ac:	3301      	adds	r3, #1
 80069ae:	643b      	str	r3, [r7, #64]	; 0x40
 80069b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d9dd      	bls.n	8006972 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80069b6:	2300      	movs	r3, #0
 80069b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80069ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <find_volume+0x14e>
 80069c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c2:	3b01      	subs	r3, #1
 80069c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80069c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	3358      	adds	r3, #88	; 0x58
 80069cc:	443b      	add	r3, r7
 80069ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80069d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <find_volume+0x16e>
 80069da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069de:	f7ff fef5 	bl	80067cc <check_fs>
 80069e2:	4603      	mov	r3, r0
 80069e4:	e000      	b.n	80069e8 <find_volume+0x170>
 80069e6:	2303      	movs	r3, #3
 80069e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80069ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d905      	bls.n	8006a00 <find_volume+0x188>
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	3301      	adds	r3, #1
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
 80069fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d9e2      	bls.n	80069c6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d101      	bne.n	8006a0c <find_volume+0x194>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e17e      	b.n	8006d0a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d901      	bls.n	8006a18 <find_volume+0x1a0>
 8006a14:	230d      	movs	r3, #13
 8006a16:	e178      	b.n	8006d0a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	3334      	adds	r3, #52	; 0x34
 8006a1c:	330b      	adds	r3, #11
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fcec 	bl	80053fc <ld_word>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2a:	d001      	beq.n	8006a30 <find_volume+0x1b8>
 8006a2c:	230d      	movs	r3, #13
 8006a2e:	e16c      	b.n	8006d0a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	3334      	adds	r3, #52	; 0x34
 8006a34:	3316      	adds	r3, #22
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fce0 	bl	80053fc <ld_word>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <find_volume+0x1dc>
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	3334      	adds	r3, #52	; 0x34
 8006a4a:	3324      	adds	r3, #36	; 0x24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe fcec 	bl	800542a <ld_dword>
 8006a52:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a58:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	789b      	ldrb	r3, [r3, #2]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d005      	beq.n	8006a78 <find_volume+0x200>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	789b      	ldrb	r3, [r3, #2]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d001      	beq.n	8006a78 <find_volume+0x200>
 8006a74:	230d      	movs	r3, #13
 8006a76:	e148      	b.n	8006d0a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	789b      	ldrb	r3, [r3, #2]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	fb02 f303 	mul.w	r3, r2, r3
 8006a84:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	895b      	ldrh	r3, [r3, #10]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <find_volume+0x234>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	895b      	ldrh	r3, [r3, #10]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	895b      	ldrh	r3, [r3, #10]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <find_volume+0x238>
 8006aac:	230d      	movs	r3, #13
 8006aae:	e12c      	b.n	8006d0a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	3334      	adds	r3, #52	; 0x34
 8006ab4:	3311      	adds	r3, #17
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fca0 	bl	80053fc <ld_word>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	891b      	ldrh	r3, [r3, #8]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <find_volume+0x25e>
 8006ad2:	230d      	movs	r3, #13
 8006ad4:	e119      	b.n	8006d0a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	3334      	adds	r3, #52	; 0x34
 8006ada:	3313      	adds	r3, #19
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fc8d 	bl	80053fc <ld_word>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <find_volume+0x282>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	3334      	adds	r3, #52	; 0x34
 8006af0:	3320      	adds	r3, #32
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fc99 	bl	800542a <ld_dword>
 8006af8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	3334      	adds	r3, #52	; 0x34
 8006afe:	330e      	adds	r3, #14
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fc7b 	bl	80053fc <ld_word>
 8006b06:	4603      	mov	r3, r0
 8006b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <find_volume+0x29c>
 8006b10:	230d      	movs	r3, #13
 8006b12:	e0fa      	b.n	8006d0a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	4413      	add	r3, r2
 8006b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1c:	8912      	ldrh	r2, [r2, #8]
 8006b1e:	0912      	lsrs	r2, r2, #4
 8006b20:	b292      	uxth	r2, r2
 8006b22:	4413      	add	r3, r2
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d204      	bcs.n	8006b38 <find_volume+0x2c0>
 8006b2e:	230d      	movs	r3, #13
 8006b30:	e0eb      	b.n	8006d0a <find_volume+0x492>
 8006b32:	bf00      	nop
 8006b34:	20001280 	.word	0x20001280
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b40:	8952      	ldrh	r2, [r2, #10]
 8006b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <find_volume+0x2da>
 8006b4e:	230d      	movs	r3, #13
 8006b50:	e0db      	b.n	8006d0a <find_volume+0x492>
		fmt = FS_FAT32;
 8006b52:	2303      	movs	r3, #3
 8006b54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d802      	bhi.n	8006b68 <find_volume+0x2f0>
 8006b62:	2302      	movs	r3, #2
 8006b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d802      	bhi.n	8006b78 <find_volume+0x300>
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b84:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8a:	441a      	add	r2, r3
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006b90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	441a      	add	r2, r3
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d11e      	bne.n	8006be0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	3334      	adds	r3, #52	; 0x34
 8006ba6:	332a      	adds	r3, #42	; 0x2a
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe fc27 	bl	80053fc <ld_word>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <find_volume+0x340>
 8006bb4:	230d      	movs	r3, #13
 8006bb6:	e0a8      	b.n	8006d0a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	891b      	ldrh	r3, [r3, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <find_volume+0x34c>
 8006bc0:	230d      	movs	r3, #13
 8006bc2:	e0a2      	b.n	8006d0a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	3334      	adds	r3, #52	; 0x34
 8006bc8:	332c      	adds	r3, #44	; 0x2c
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fc2d 	bl	800542a <ld_dword>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bde:	e01f      	b.n	8006c20 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	891b      	ldrh	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <find_volume+0x374>
 8006be8:	230d      	movs	r3, #13
 8006bea:	e08e      	b.n	8006d0a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf2:	441a      	add	r2, r3
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d103      	bne.n	8006c08 <find_volume+0x390>
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	e00a      	b.n	8006c1e <find_volume+0x3a6>
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	085a      	lsrs	r2, r3, #1
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c1e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c2a:	0a5b      	lsrs	r3, r3, #9
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d201      	bcs.n	8006c34 <find_volume+0x3bc>
 8006c30:	230d      	movs	r3, #13
 8006c32:	e06a      	b.n	8006d0a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	615a      	str	r2, [r3, #20]
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	695a      	ldr	r2, [r3, #20]
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	2280      	movs	r2, #128	; 0x80
 8006c48:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d149      	bne.n	8006ce6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	3334      	adds	r3, #52	; 0x34
 8006c56:	3330      	adds	r3, #48	; 0x30
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fbcf 	bl	80053fc <ld_word>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d140      	bne.n	8006ce6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c66:	3301      	adds	r3, #1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c6c:	f7fe fe9a 	bl	80059a4 <move_window>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d137      	bne.n	8006ce6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	2200      	movs	r2, #0
 8006c7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	3334      	adds	r3, #52	; 0x34
 8006c80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fbb9 	bl	80053fc <ld_word>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d127      	bne.n	8006ce6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	3334      	adds	r3, #52	; 0x34
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fbc5 	bl	800542a <ld_dword>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <find_volume+0x49c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d11e      	bne.n	8006ce6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	3334      	adds	r3, #52	; 0x34
 8006cac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe fbba 	bl	800542a <ld_dword>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <find_volume+0x4a0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d113      	bne.n	8006ce6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	3334      	adds	r3, #52	; 0x34
 8006cc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fbaf 	bl	800542a <ld_dword>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	3334      	adds	r3, #52	; 0x34
 8006cd6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe fba5 	bl	800542a <ld_dword>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006cec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <find_volume+0x4a4>)
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <find_volume+0x4a4>)
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <find_volume+0x4a4>)
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d04:	f7fe fde6 	bl	80058d4 <clear_lock>
#endif
	return FR_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3758      	adds	r7, #88	; 0x58
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	41615252 	.word	0x41615252
 8006d18:	61417272 	.word	0x61417272
 8006d1c:	20001284 	.word	0x20001284

08006d20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d2a:	2309      	movs	r3, #9
 8006d2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d02e      	beq.n	8006d92 <validate+0x72>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d02a      	beq.n	8006d92 <validate+0x72>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d025      	beq.n	8006d92 <validate+0x72>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	889a      	ldrh	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	88db      	ldrh	r3, [r3, #6]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d11e      	bne.n	8006d92 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe fc47 	bl	80055ec <lock_fs>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d014      	beq.n	8006d8e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	785b      	ldrb	r3, [r3, #1]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe faa8 	bl	80052c0 <disk_status>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <validate+0x60>
				res = FR_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e008      	b.n	8006d92 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fc46 	bl	8005618 <unlock_fs>
 8006d8c:	e001      	b.n	8006d92 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8006d8e:	230f      	movs	r3, #15
 8006d90:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <validate+0x7e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	e000      	b.n	8006da0 <validate+0x80>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	6013      	str	r3, [r2, #0]
	return res;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006dc2:	f107 0310 	add.w	r3, r7, #16
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fcbd 	bl	8006746 <get_ldnumber>
 8006dcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	da01      	bge.n	8006dd8 <f_mount+0x28>
 8006dd4:	230b      	movs	r3, #11
 8006dd6:	e048      	b.n	8006e6a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006dd8:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <f_mount+0xc4>)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00f      	beq.n	8006e08 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006de8:	69b8      	ldr	r0, [r7, #24]
 8006dea:	f7fe fd73 	bl	80058d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fef7 	bl	8007be6 <ff_del_syncobj>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <f_mount+0x52>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e033      	b.n	8006e6a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00f      	beq.n	8006e2e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	330c      	adds	r3, #12
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f000 fec1 	bl	8007ba6 <ff_cre_syncobj>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <f_mount+0x7e>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e01d      	b.n	8006e6a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4910      	ldr	r1, [pc, #64]	; (8006e74 <f_mount+0xc4>)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <f_mount+0x94>
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d001      	beq.n	8006e48 <f_mount+0x98>
 8006e44:	2300      	movs	r3, #0
 8006e46:	e010      	b.n	8006e6a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e48:	f107 010c 	add.w	r1, r7, #12
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	2200      	movs	r2, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fd10 	bl	8006878 <find_volume>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	7dfa      	ldrb	r2, [r7, #23]
 8006e60:	4611      	mov	r1, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fbd8 	bl	8005618 <unlock_fs>
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20001280 	.word	0x20001280

08006e78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b098      	sub	sp, #96	; 0x60
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <f_open+0x18>
 8006e8c:	2309      	movs	r3, #9
 8006e8e:	e1b4      	b.n	80071fa <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e98:	79fa      	ldrb	r2, [r7, #7]
 8006e9a:	f107 0110 	add.w	r1, r7, #16
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fce8 	bl	8006878 <find_volume>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 8191 	bne.w	80071da <f_open+0x362>
		dj.obj.fs = fs;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	f107 0314 	add.w	r3, r7, #20
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fbcd 	bl	8006664 <follow_path>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d11a      	bne.n	8006f0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006ed8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006edc:	b25b      	sxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da03      	bge.n	8006eea <f_open+0x72>
				res = FR_INVALID_NAME;
 8006ee2:	2306      	movs	r3, #6
 8006ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ee8:	e011      	b.n	8006f0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	f023 0301 	bic.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bf14      	ite	ne
 8006ef4:	2301      	movne	r3, #1
 8006ef6:	2300      	moveq	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fba4 	bl	8005650 <chk_lock>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	f003 031c 	and.w	r3, r3, #28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d07f      	beq.n	8007018 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d10e      	bne.n	8006f46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f28:	f7fe fbec 	bl	8005704 <enq_lock>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <f_open+0xc8>
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff facd 	bl	80064d6 <dir_register>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	e000      	b.n	8006f42 <f_open+0xca>
 8006f40:	2312      	movs	r3, #18
 8006f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	71fb      	strb	r3, [r7, #7]
 8006f4e:	e010      	b.n	8006f72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f50:	7ebb      	ldrb	r3, [r7, #26]
 8006f52:	f003 0311 	and.w	r3, r3, #17
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <f_open+0xea>
					res = FR_DENIED;
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f60:	e007      	b.n	8006f72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <f_open+0xfa>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d168      	bne.n	800704c <f_open+0x1d4>
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d063      	beq.n	800704c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006f84:	f7fe f88c 	bl	80050a0 <get_fattime>
 8006f88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8c:	330e      	adds	r3, #14
 8006f8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fa86 	bl	80054a2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f98:	3316      	adds	r3, #22
 8006f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fa80 	bl	80054a2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa4:	330b      	adds	r3, #11
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff f9fc 	bl	80063ae <ld_clust>
 8006fb6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fa14 	bl	80063ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc6:	331c      	adds	r3, #28
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fa69 	bl	80054a2 <st_dword>
					fs->wflag = 1;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d037      	beq.n	800704c <f_open+0x1d4>
						dw = fs->winsect;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006fe2:	f107 0314 	add.w	r3, r7, #20
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe ff28 	bl	8005e40 <remove_chain>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d126      	bne.n	800704c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fcce 	bl	80059a4 <move_window>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007012:	3a01      	subs	r2, #1
 8007014:	611a      	str	r2, [r3, #16]
 8007016:	e019      	b.n	800704c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701c:	2b00      	cmp	r3, #0
 800701e:	d115      	bne.n	800704c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007020:	7ebb      	ldrb	r3, [r7, #26]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <f_open+0x1ba>
					res = FR_NO_FILE;
 800702a:	2304      	movs	r3, #4
 800702c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007030:	e00c      	b.n	800704c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <f_open+0x1d4>
 800703c:	7ebb      	ldrb	r3, [r7, #26]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <f_open+0x1d4>
						res = FR_DENIED;
 8007046:	2307      	movs	r3, #7
 8007048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800704c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d128      	bne.n	80070a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007064:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800706e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	f023 0301 	bic.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	f107 0314 	add.w	r3, r7, #20
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fb59 	bl	8005744 <inc_lock>
 8007092:	4602      	mov	r2, r0
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <f_open+0x22e>
 80070a0:	2302      	movs	r3, #2
 80070a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 8095 	bne.w	80071da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f979 	bl	80063ae <ld_clust>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	331c      	adds	r3, #28
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe f9af 	bl	800542a <ld_dword>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	88da      	ldrh	r2, [r3, #6]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	79fa      	ldrb	r2, [r7, #7]
 80070ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3330      	adds	r3, #48	; 0x30
 8007102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007106:	2100      	movs	r1, #0
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fa15 	bl	8005538 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d060      	beq.n	80071da <f_open+0x362>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05c      	beq.n	80071da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	895b      	ldrh	r3, [r3, #10]
 800712c:	025b      	lsls	r3, r3, #9
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	657b      	str	r3, [r7, #84]	; 0x54
 800713c:	e016      	b.n	800716c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fce8 	bl	8005b18 <get_fat>
 8007148:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800714a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800714c:	2b01      	cmp	r3, #1
 800714e:	d802      	bhi.n	8007156 <f_open+0x2de>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d102      	bne.n	8007164 <f_open+0x2ec>
 800715e:	2301      	movs	r3, #1
 8007160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007164:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	657b      	str	r3, [r7, #84]	; 0x54
 800716c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <f_open+0x304>
 8007174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007178:	429a      	cmp	r2, r3
 800717a:	d8e0      	bhi.n	800713e <f_open+0x2c6>
				}
				fp->clust = clst;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007180:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007186:	2b00      	cmp	r3, #0
 8007188:	d127      	bne.n	80071da <f_open+0x362>
 800718a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800718c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007190:	2b00      	cmp	r3, #0
 8007192:	d022      	beq.n	80071da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe fc9f 	bl	8005adc <clust2sect>
 800719e:	6478      	str	r0, [r7, #68]	; 0x44
 80071a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <f_open+0x336>
						res = FR_INT_ERR;
 80071a6:	2302      	movs	r3, #2
 80071a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80071ac:	e015      	b.n	80071da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80071ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b0:	0a5a      	lsrs	r2, r3, #9
 80071b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	7858      	ldrb	r0, [r3, #1]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	2301      	movs	r3, #1
 80071ca:	f7fe f8b9 	bl	8005340 <disk_read>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <f_open+0x362>
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80071da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <f_open+0x370>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe fa11 	bl	8005618 <unlock_fs>
 80071f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3760      	adds	r7, #96	; 0x60
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08e      	sub	sp, #56	; 0x38
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f107 0214 	add.w	r2, r7, #20
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fd7c 	bl	8006d20 <validate>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800722e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007232:	2b00      	cmp	r3, #0
 8007234:	d107      	bne.n	8007246 <f_read+0x44>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	7d5b      	ldrb	r3, [r3, #21]
 800723a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800723e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <f_read+0x58>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe f9e2 	bl	8005618 <unlock_fs>
 8007254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007258:	e13d      	b.n	80074d6 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7d1b      	ldrb	r3, [r3, #20]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <f_read+0x72>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2107      	movs	r1, #7
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe f9d4 	bl	8005618 <unlock_fs>
 8007270:	2307      	movs	r3, #7
 8007272:	e130      	b.n	80074d6 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	429a      	cmp	r2, r3
 8007286:	f240 811c 	bls.w	80074c2 <f_read+0x2c0>
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800728e:	e118      	b.n	80074c2 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007298:	2b00      	cmp	r3, #0
 800729a:	f040 80e4 	bne.w	8007466 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	0a5b      	lsrs	r3, r3, #9
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	8952      	ldrh	r2, [r2, #10]
 80072a8:	3a01      	subs	r2, #1
 80072aa:	4013      	ands	r3, r2
 80072ac:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d139      	bne.n	8007328 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
 80072c2:	e013      	b.n	80072ec <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	4619      	mov	r1, r3
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7fe feb1 	bl	800603a <clmt_clust>
 80072d8:	6338      	str	r0, [r7, #48]	; 0x30
 80072da:	e007      	b.n	80072ec <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fe fc17 	bl	8005b18 <get_fat>
 80072ea:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d809      	bhi.n	8007306 <f_read+0x104>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	755a      	strb	r2, [r3, #21]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2102      	movs	r1, #2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe f98b 	bl	8005618 <unlock_fs>
 8007302:	2302      	movs	r3, #2
 8007304:	e0e7      	b.n	80074d6 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d109      	bne.n	8007322 <f_read+0x120>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	755a      	strb	r2, [r3, #21]
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2101      	movs	r1, #1
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe f97d 	bl	8005618 <unlock_fs>
 800731e:	2301      	movs	r3, #1
 8007320:	e0d9      	b.n	80074d6 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007326:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7fe fbd3 	bl	8005adc <clust2sect>
 8007336:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <f_read+0x150>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2202      	movs	r2, #2
 8007342:	755a      	strb	r2, [r3, #21]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2102      	movs	r1, #2
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe f965 	bl	8005618 <unlock_fs>
 800734e:	2302      	movs	r3, #2
 8007350:	e0c1      	b.n	80074d6 <f_read+0x2d4>
			sect += csect;
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0a5b      	lsrs	r3, r3, #9
 800735e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d03e      	beq.n	80073e4 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	4413      	add	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	8952      	ldrh	r2, [r2, #10]
 8007370:	4293      	cmp	r3, r2
 8007372:	d905      	bls.n	8007380 <f_read+0x17e>
					cc = fs->csize - csect;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	895b      	ldrh	r3, [r3, #10]
 8007378:	461a      	mov	r2, r3
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	7858      	ldrb	r0, [r3, #1]
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800738a:	f7fd ffd9 	bl	8005340 <disk_read>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d009      	beq.n	80073a8 <f_read+0x1a6>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	755a      	strb	r2, [r3, #21]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2101      	movs	r1, #1
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe f93a 	bl	8005618 <unlock_fs>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e096      	b.n	80074d6 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	7d1b      	ldrb	r3, [r3, #20]
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da14      	bge.n	80073dc <f_read+0x1da>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073bc:	429a      	cmp	r2, r3
 80073be:	d90d      	bls.n	80073dc <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a1a      	ldr	r2, [r3, #32]
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	025b      	lsls	r3, r3, #9
 80073ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073cc:	18d0      	adds	r0, r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3330      	adds	r3, #48	; 0x30
 80073d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073d6:	4619      	mov	r1, r3
 80073d8:	f7fe f88e 	bl	80054f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	025b      	lsls	r3, r3, #9
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80073e2:	e05a      	b.n	800749a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d038      	beq.n	8007460 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	7d1b      	ldrb	r3, [r3, #20]
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da1d      	bge.n	8007434 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	7858      	ldrb	r0, [r3, #1]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	2301      	movs	r3, #1
 8007408:	f7fd ffba 	bl	8005380 <disk_write>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <f_read+0x224>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	755a      	strb	r2, [r3, #21]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2101      	movs	r1, #1
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe f8fb 	bl	8005618 <unlock_fs>
 8007422:	2301      	movs	r3, #1
 8007424:	e057      	b.n	80074d6 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	7d1b      	ldrb	r3, [r3, #20]
 800742a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	7858      	ldrb	r0, [r3, #1]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800743e:	2301      	movs	r3, #1
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	f7fd ff7d 	bl	8005340 <disk_read>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <f_read+0x25e>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	755a      	strb	r2, [r3, #21]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe f8de 	bl	8005618 <unlock_fs>
 800745c:	2301      	movs	r3, #1
 800745e:	e03a      	b.n	80074d6 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d901      	bls.n	8007480 <f_read+0x27e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	4413      	add	r3, r2
 8007490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007492:	4619      	mov	r1, r3
 8007494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007496:	f7fe f82f 	bl	80054f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800749a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	4413      	add	r3, r2
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	441a      	add	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	619a      	str	r2, [r3, #24]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	441a      	add	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f47f aee3 	bne.w	8007290 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe f8a2 	bl	8005618 <unlock_fs>
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3738      	adds	r7, #56	; 0x38
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f107 0208 	add.w	r2, r7, #8
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fc16 	bl	8006d20 <validate>
 80074f4:	4603      	mov	r3, r0
 80074f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d16d      	bne.n	80075da <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7d1b      	ldrb	r3, [r3, #20]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d067      	beq.n	80075da <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7d1b      	ldrb	r3, [r3, #20]
 800750e:	b25b      	sxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	da1a      	bge.n	800754a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	7858      	ldrb	r0, [r3, #1]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	2301      	movs	r3, #1
 8007524:	f7fd ff2c 	bl	8005380 <disk_write>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d006      	beq.n	800753c <f_sync+0x5e>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe f870 	bl	8005618 <unlock_fs>
 8007538:	2301      	movs	r3, #1
 800753a:	e055      	b.n	80075e8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7d1b      	ldrb	r3, [r3, #20]
 8007540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007544:	b2da      	uxtb	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800754a:	f7fd fda9 	bl	80050a0 <get_fattime>
 800754e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7fe fa23 	bl	80059a4 <move_window>
 800755e:	4603      	mov	r3, r0
 8007560:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007562:	7dfb      	ldrb	r3, [r7, #23]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d138      	bne.n	80075da <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	330b      	adds	r3, #11
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	330b      	adds	r3, #11
 8007578:	f042 0220 	orr.w	r2, r2, #32
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	461a      	mov	r2, r3
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	f7fe ff2e 	bl	80063ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f103 021c 	add.w	r2, r3, #28
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f7fd ff80 	bl	80054a2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3316      	adds	r3, #22
 80075a6:	6939      	ldr	r1, [r7, #16]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fd ff7a 	bl	80054a2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3312      	adds	r3, #18
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fd ff5a 	bl	800546e <st_word>
					fs->wflag = 1;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2201      	movs	r2, #1
 80075be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fa1c 	bl	8005a00 <sync_fs>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7d1b      	ldrb	r3, [r3, #20]
 80075d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	7dfa      	ldrb	r2, [r7, #23]
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe f819 	bl	8005618 <unlock_fs>
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff70 	bl	80074de <f_sync>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11d      	bne.n	8007644 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f107 0208 	add.w	r2, r7, #8
 800760e:	4611      	mov	r1, r2
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fb85 	bl	8006d20 <validate>
 8007616:	4603      	mov	r3, r0
 8007618:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d111      	bne.n	8007644 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe f91b 	bl	8005860 <dec_lock>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd ffea 	bl	8005618 <unlock_fs>
#endif
		}
	}
	return res;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b090      	sub	sp, #64	; 0x40
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f107 0208 	add.w	r2, r7, #8
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fb5d 	bl	8006d20 <validate>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800766c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <f_lseek+0x2e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7d5b      	ldrb	r3, [r3, #21]
 8007678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800767c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <f_lseek+0x4a>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd ffc3 	bl	8005618 <unlock_fs>
 8007692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007696:	e229      	b.n	8007aec <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 80ea 	beq.w	8007876 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d164      	bne.n	8007774 <f_lseek+0x126>
			tbl = fp->cltbl;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	627a      	str	r2, [r7, #36]	; 0x24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	2302      	movs	r3, #2
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d044      	beq.n	8007754 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	2300      	movs	r3, #0
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	3302      	adds	r3, #2
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	3301      	adds	r3, #1
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fa16 	bl	8005b18 <get_fat>
 80076ec:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d809      	bhi.n	8007708 <f_lseek+0xba>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	755a      	strb	r2, [r3, #21]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2102      	movs	r1, #2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd ff8a 	bl	8005618 <unlock_fs>
 8007704:	2302      	movs	r3, #2
 8007706:	e1f1      	b.n	8007aec <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d109      	bne.n	8007724 <f_lseek+0xd6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	755a      	strb	r2, [r3, #21]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2101      	movs	r1, #1
 800771a:	4618      	mov	r0, r3
 800771c:	f7fd ff7c 	bl	8005618 <unlock_fs>
 8007720:	2301      	movs	r3, #1
 8007722:	e1e3      	b.n	8007aec <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772a:	429a      	cmp	r2, r3
 800772c:	d0d4      	beq.n	80076d8 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800772e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	429a      	cmp	r2, r3
 8007734:	d809      	bhi.n	800774a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	627a      	str	r2, [r7, #36]	; 0x24
 800773c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	627a      	str	r2, [r7, #36]	; 0x24
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007750:	429a      	cmp	r2, r3
 8007752:	d3ba      	bcc.n	80076ca <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800775c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	d803      	bhi.n	800776c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e1b6      	b.n	8007ada <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800776c:	2311      	movs	r3, #17
 800776e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007772:	e1b2      	b.n	8007ada <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d902      	bls.n	8007784 <f_lseek+0x136>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 81a4 	beq.w	8007ada <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	3b01      	subs	r3, #1
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fe fc4e 	bl	800603a <clmt_clust>
 800779e:	4602      	mov	r2, r0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe f995 	bl	8005adc <clust2sect>
 80077b2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <f_lseek+0x180>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	755a      	strb	r2, [r3, #21]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2102      	movs	r1, #2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd ff27 	bl	8005618 <unlock_fs>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e18e      	b.n	8007aec <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	0a5b      	lsrs	r3, r3, #9
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	8952      	ldrh	r2, [r2, #10]
 80077d8:	3a01      	subs	r2, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4413      	add	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8175 	beq.w	8007ada <f_lseek+0x48c>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	f000 816f 	beq.w	8007ada <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7d1b      	ldrb	r3, [r3, #20]
 8007800:	b25b      	sxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	da1d      	bge.n	8007842 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	7858      	ldrb	r0, [r3, #1]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	2301      	movs	r3, #1
 8007816:	f7fd fdb3 	bl	8005380 <disk_write>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <f_lseek+0x1e6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	755a      	strb	r2, [r3, #21]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd fef4 	bl	8005618 <unlock_fs>
 8007830:	2301      	movs	r3, #1
 8007832:	e15b      	b.n	8007aec <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783c:	b2da      	uxtb	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	7858      	ldrb	r0, [r3, #1]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800784c:	2301      	movs	r3, #1
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	f7fd fd76 	bl	8005340 <disk_read>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <f_lseek+0x220>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	755a      	strb	r2, [r3, #21]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2101      	movs	r1, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f7fd fed7 	bl	8005618 <unlock_fs>
 800786a:	2301      	movs	r3, #1
 800786c:	e13e      	b.n	8007aec <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	621a      	str	r2, [r3, #32]
 8007874:	e131      	b.n	8007ada <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d908      	bls.n	8007892 <f_lseek+0x244>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7d1b      	ldrb	r3, [r3, #20]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80c0 	beq.w	8007a2a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	895b      	ldrh	r3, [r3, #10]
 80078ae:	025b      	lsls	r3, r3, #9
 80078b0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01b      	beq.n	80078f0 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	fbb2 f2f3 	udiv	r2, r2, r3
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	1e59      	subs	r1, r3, #1
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d30f      	bcc.n	80078f0 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	1e5a      	subs	r2, r3, #1
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	425b      	negs	r3, r3
 80078d8:	401a      	ands	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ee:	e02c      	b.n	800794a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d123      	bne.n	8007944 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f7fe fb02 	bl	8005f0a <create_chain>
 8007906:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	2b01      	cmp	r3, #1
 800790c:	d109      	bne.n	8007922 <f_lseek+0x2d4>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	755a      	strb	r2, [r3, #21]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2102      	movs	r1, #2
 8007918:	4618      	mov	r0, r3
 800791a:	f7fd fe7d 	bl	8005618 <unlock_fs>
 800791e:	2302      	movs	r3, #2
 8007920:	e0e4      	b.n	8007aec <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d109      	bne.n	800793e <f_lseek+0x2f0>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	755a      	strb	r2, [r3, #21]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2101      	movs	r1, #1
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd fe6f 	bl	8005618 <unlock_fs>
 800793a:	2301      	movs	r3, #1
 800793c:	e0d6      	b.n	8007aec <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007942:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007948:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	2b00      	cmp	r3, #0
 800794e:	d06c      	beq.n	8007a2a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8007950:	e044      	b.n	80079dc <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	441a      	add	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7d1b      	ldrb	r3, [r3, #20]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fac7 	bl	8005f0a <create_chain>
 800797c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	2b00      	cmp	r3, #0
 8007982:	d108      	bne.n	8007996 <f_lseek+0x348>
							ofs = 0; break;
 8007984:	2300      	movs	r3, #0
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	e02c      	b.n	80079e4 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe f8c2 	bl	8005b18 <get_fat>
 8007994:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d109      	bne.n	80079b2 <f_lseek+0x364>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	755a      	strb	r2, [r3, #21]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2101      	movs	r1, #1
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fd fe35 	bl	8005618 <unlock_fs>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e09c      	b.n	8007aec <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d904      	bls.n	80079c2 <f_lseek+0x374>
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079be:	429a      	cmp	r2, r3
 80079c0:	d309      	bcc.n	80079d6 <f_lseek+0x388>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	755a      	strb	r2, [r3, #21]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2102      	movs	r1, #2
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fe23 	bl	8005618 <unlock_fs>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e08a      	b.n	8007aec <f_lseek+0x49e>
					fp->clust = clst;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079da:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d8b6      	bhi.n	8007952 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699a      	ldr	r2, [r3, #24]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	441a      	add	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d017      	beq.n	8007a2a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe f86c 	bl	8005adc <clust2sect>
 8007a04:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d109      	bne.n	8007a20 <f_lseek+0x3d2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	755a      	strb	r2, [r3, #21]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2102      	movs	r1, #2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fd fdfe 	bl	8005618 <unlock_fs>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e065      	b.n	8007aec <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	0a5b      	lsrs	r3, r3, #9
 8007a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a26:	4413      	add	r3, r2
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d90a      	bls.n	8007a4c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7d1b      	ldrb	r3, [r3, #20]
 8007a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d040      	beq.n	8007ada <f_lseek+0x48c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d03b      	beq.n	8007ada <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7d1b      	ldrb	r3, [r3, #20]
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da1d      	bge.n	8007aa8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	7858      	ldrb	r0, [r3, #1]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1a      	ldr	r2, [r3, #32]
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f7fd fc80 	bl	8005380 <disk_write>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <f_lseek+0x44c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	755a      	strb	r2, [r3, #21]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2101      	movs	r1, #1
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fd fdc1 	bl	8005618 <unlock_fs>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e028      	b.n	8007aec <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7d1b      	ldrb	r3, [r3, #20]
 8007a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	7858      	ldrb	r0, [r3, #1]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab6:	f7fd fc43 	bl	8005340 <disk_read>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <f_lseek+0x486>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	755a      	strb	r2, [r3, #21]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2101      	movs	r1, #1
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fd fda4 	bl	8005618 <unlock_fs>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e00b      	b.n	8007aec <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ad8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fd fd98 	bl	8005618 <unlock_fs>
 8007ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3740      	adds	r7, #64	; 0x40
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b0c:	7a5b      	ldrb	r3, [r3, #9]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d131      	bne.n	8007b78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b16:	7a5b      	ldrb	r3, [r3, #9]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b1e:	2100      	movs	r1, #0
 8007b20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b22:	4b18      	ldr	r3, [pc, #96]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b24:	7a5b      	ldrb	r3, [r3, #9]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b32:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b34:	7a5b      	ldrb	r3, [r3, #9]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b3c:	4413      	add	r3, r2
 8007b3e:	79fa      	ldrb	r2, [r7, #7]
 8007b40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b44:	7a5b      	ldrb	r3, [r3, #9]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	b2d1      	uxtb	r1, r2
 8007b4c:	4a0d      	ldr	r2, [pc, #52]	; (8007b84 <FATFS_LinkDriverEx+0x90>)
 8007b4e:	7251      	strb	r1, [r2, #9]
 8007b50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b52:	7dbb      	ldrb	r3, [r7, #22]
 8007b54:	3330      	adds	r3, #48	; 0x30
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	223a      	movs	r2, #58	; 0x3a
 8007b62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	3302      	adds	r3, #2
 8007b68:	222f      	movs	r2, #47	; 0x2f
 8007b6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3303      	adds	r3, #3
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr
 8007b84:	200012a8 	.word	0x200012a8

08007b88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b92:	2200      	movs	r2, #0
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff ffac 	bl	8007af4 <FATFS_LinkDriverEx>
 8007b9c:	4603      	mov	r3, r0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b086      	sub	sp, #24
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	4603      	mov	r3, r0
 8007bae:	6039      	str	r1, [r7, #0]
 8007bb0:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007bba:	f107 030c 	add.w	r3, r7, #12
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f84d 	bl	8007c60 <osSemaphoreCreate>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf14      	ite	ne
 8007bd4:	2301      	movne	r3, #1
 8007bd6:	2300      	moveq	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	617b      	str	r3, [r7, #20]

    return ret;
 8007bdc:	697b      	ldr	r3, [r7, #20]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8ec 	bl	8007dcc <osSemaphoreDelete>
    return 1;
 8007bf4:	2301      	movs	r3, #1
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8007c0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f858 	bl	8007cc4 <osSemaphoreWait>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <ff_req_grant+0x20>
  {
    ret = 1;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f895 	bl	8007d60 <osSemaphoreRelease>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c44:	f3ef 8305 	mrs	r3, IPSR
 8007c48:	607b      	str	r3, [r7, #4]
  return(result);
 8007c4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00f      	beq.n	8007c92 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10a      	bne.n	8007c8e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	9200      	str	r2, [sp, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	2001      	movs	r0, #1
 8007c86:	f000 f9cb 	bl	8008020 <xQueueGenericCreateStatic>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	e016      	b.n	8007cbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e014      	b.n	8007cbc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d110      	bne.n	8007cba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007c98:	2203      	movs	r2, #3
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f000 fa36 	bl	800810e <xQueueGenericCreate>
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <osSemaphoreCreate+0x56>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2200      	movs	r2, #0
 8007cae:	2100      	movs	r1, #0
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fa89 	bl	80081c8 <xQueueGenericSend>
      return sema;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	e000      	b.n	8007cbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007cba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	e03a      	b.n	8007d52 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d103      	bne.n	8007cf0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	e009      	b.n	8007d04 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d006      	beq.n	8007d04 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <osSemaphoreWait+0x40>
      ticks = 1;
 8007d00:	2301      	movs	r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007d04:	f7ff ff9b 	bl	8007c3e <inHandlerMode>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d017      	beq.n	8007d3e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007d0e:	f107 0308 	add.w	r3, r7, #8
 8007d12:	461a      	mov	r2, r3
 8007d14:	2100      	movs	r1, #0
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fcee 	bl	80086f8 <xQueueReceiveFromISR>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d001      	beq.n	8007d26 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007d22:	23ff      	movs	r3, #255	; 0xff
 8007d24:	e015      	b.n	8007d52 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d011      	beq.n	8007d50 <osSemaphoreWait+0x8c>
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <osSemaphoreWait+0x98>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	e008      	b.n	8007d50 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fbcd 	bl	80084e0 <xQueueSemaphoreTake>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d001      	beq.n	8007d50 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007d4c:	23ff      	movs	r3, #255	; 0xff
 8007d4e:	e000      	b.n	8007d52 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007d70:	f7ff ff65 	bl	8007c3e <inHandlerMode>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d016      	beq.n	8007da8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fb1f 	bl	80083c4 <xQueueGiveFromISR>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d001      	beq.n	8007d90 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007d8c:	23ff      	movs	r3, #255	; 0xff
 8007d8e:	e017      	b.n	8007dc0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d013      	beq.n	8007dbe <osSemaphoreRelease+0x5e>
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <osSemaphoreRelease+0x68>)
 8007d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	e00a      	b.n	8007dbe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007da8:	2300      	movs	r3, #0
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa0a 	bl	80081c8 <xQueueGenericSend>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d001      	beq.n	8007dbe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007dba:	23ff      	movs	r3, #255	; 0xff
 8007dbc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007dd4:	f7ff ff33 	bl	8007c3e <inHandlerMode>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007dde:	2382      	movs	r3, #130	; 0x82
 8007de0:	e003      	b.n	8007dea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fd08 	bl	80087f8 <vQueueDelete>

  return osOK; 
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f103 0208 	add.w	r2, r3, #8
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f103 0208 	add.w	r2, r3, #8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f103 0208 	add.w	r2, r3, #8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr

08007e48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e00c      	b.n	8007ec8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <vListInsert+0x2e>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d2f6      	bcs.n	8007eb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6892      	ldr	r2, [r2, #8]
 8007f14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6852      	ldr	r2, [r2, #4]
 8007f1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d103      	bne.n	8007f32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	1e5a      	subs	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f7a:	f002 f85f 	bl	800a03c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	441a      	add	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	3b01      	subs	r3, #1
 8007fac:	68f9      	ldr	r1, [r7, #12]
 8007fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	441a      	add	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	22ff      	movs	r2, #255	; 0xff
 8007fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d114      	bne.n	8007ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01a      	beq.n	800800e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3310      	adds	r3, #16
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fb3b 	bl	8009658 <xTaskRemoveFromEventList>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d012      	beq.n	800800e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <xQueueGenericReset+0xcc>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	e009      	b.n	800800e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fef7 	bl	8007df2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3324      	adds	r3, #36	; 0x24
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fef2 	bl	8007df2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800800e:	f002 f845 	bl	800a09c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008012:	2301      	movs	r3, #1
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08e      	sub	sp, #56	; 0x38
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <xQueueGenericCreateStatic+0x52>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <xQueueGenericCreateStatic+0x56>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericCreateStatic+0x58>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <xQueueGenericCreateStatic+0x7e>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <xQueueGenericCreateStatic+0x82>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <xQueueGenericCreateStatic+0x84>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	61fb      	str	r3, [r7, #28]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080be:	2348      	movs	r3, #72	; 0x48
 80080c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b48      	cmp	r3, #72	; 0x48
 80080c6:	d00a      	beq.n	80080de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	61bb      	str	r3, [r7, #24]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00d      	beq.n	8008104 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 f843 	bl	800818a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3730      	adds	r7, #48	; 0x30
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800810e:	b580      	push	{r7, lr}
 8008110:	b08a      	sub	sp, #40	; 0x28
 8008112:	af02      	add	r7, sp, #8
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	4613      	mov	r3, r2
 800811a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	613b      	str	r3, [r7, #16]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e004      	b.n	800814e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3348      	adds	r3, #72	; 0x48
 8008152:	4618      	mov	r0, r3
 8008154:	f002 f872 	bl	800a23c <pvPortMalloc>
 8008158:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00f      	beq.n	8008180 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	3348      	adds	r3, #72	; 0x48
 8008164:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800816e:	79fa      	ldrb	r2, [r7, #7]
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f805 	bl	800818a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008180:	69bb      	ldr	r3, [r7, #24]
	}
 8008182:	4618      	mov	r0, r3
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	e002      	b.n	80081ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081b8:	2101      	movs	r1, #1
 80081ba:	69b8      	ldr	r0, [r7, #24]
 80081bc:	f7ff fec8 	bl	8007f50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xQueueGenericSend+0x32>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <xQueueGenericSend+0x40>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <xQueueGenericSend+0x44>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <xQueueGenericSend+0x46>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xQueueGenericSend+0x60>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d103      	bne.n	8008236 <xQueueGenericSend+0x6e>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <xQueueGenericSend+0x72>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueGenericSend+0x74>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueGenericSend+0x8e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008256:	f001 fbbf 	bl	80099d8 <xTaskGetSchedulerState>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <xQueueGenericSend+0x9e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <xQueueGenericSend+0xa2>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueGenericSend+0xa4>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericSend+0xbe>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61fb      	str	r3, [r7, #28]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008286:	f001 fed9 	bl	800a03c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <xQueueGenericSend+0xd4>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d129      	bne.n	80082f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a2:	f000 fae3 	bl	800886c <prvCopyDataToQueue>
 80082a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d010      	beq.n	80082d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	3324      	adds	r3, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f9cf 	bl	8009658 <xTaskRemoveFromEventList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d013      	beq.n	80082e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082c0:	4b3f      	ldr	r3, [pc, #252]	; (80083c0 <xQueueGenericSend+0x1f8>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	e00a      	b.n	80082e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d8:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <xQueueGenericSend+0x1f8>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e8:	f001 fed8 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e063      	b.n	80083b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082f6:	f001 fed1 	bl	800a09c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e05c      	b.n	80083b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	4618      	mov	r0, r3
 800830a:	f001 fa07 	bl	800971c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800830e:	2301      	movs	r3, #1
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008312:	f001 fec3 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008316:	f000 ffb9 	bl	800928c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800831a:	f001 fe8f 	bl	800a03c <vPortEnterCritical>
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d103      	bne.n	8008334 <xQueueGenericSend+0x16c>
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800833a:	b25b      	sxtb	r3, r3
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d103      	bne.n	800834a <xQueueGenericSend+0x182>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800834a:	f001 fea7 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834e:	1d3a      	adds	r2, r7, #4
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f9f6 	bl	8009748 <xTaskCheckForTimeOut>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d124      	bne.n	80083ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008364:	f000 fb7a 	bl	8008a5c <prvIsQueueFull>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d018      	beq.n	80083a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	3310      	adds	r3, #16
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f94a 	bl	8009610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800837c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837e:	f000 fb05 	bl	800898c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008382:	f000 ff91 	bl	80092a8 <xTaskResumeAll>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f af7c 	bne.w	8008286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800838e:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <xQueueGenericSend+0x1f8>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	e772      	b.n	8008286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a2:	f000 faf3 	bl	800898c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a6:	f000 ff7f 	bl	80092a8 <xTaskResumeAll>
 80083aa:	e76c      	b.n	8008286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ae:	f000 faed 	bl	800898c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b2:	f000 ff79 	bl	80092a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
		}
	}
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3738      	adds	r7, #56	; 0x38
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08e      	sub	sp, #56	; 0x38
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xQueueGiveFromISR+0x2a>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	623b      	str	r3, [r7, #32]
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <xQueueGiveFromISR+0x48>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	61fb      	str	r3, [r7, #28]
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <xQueueGiveFromISR+0x58>
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <xQueueGiveFromISR+0x5c>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <xQueueGiveFromISR+0x5e>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <xQueueGiveFromISR+0x78>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	61bb      	str	r3, [r7, #24]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800843c:	f001 fec0 	bl	800a1c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008440:	f3ef 8211 	mrs	r2, BASEPRI
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	617a      	str	r2, [r7, #20]
 8008456:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008458:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008468:	429a      	cmp	r2, r3
 800846a:	d22b      	bcs.n	80084c4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800847e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d112      	bne.n	80084ae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d016      	beq.n	80084be <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	3324      	adds	r3, #36	; 0x24
 8008494:	4618      	mov	r0, r3
 8008496:	f001 f8df 	bl	8009658 <xTaskRemoveFromEventList>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00e      	beq.n	80084be <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00b      	beq.n	80084be <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	e007      	b.n	80084be <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b2:	3301      	adds	r3, #1
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	b25a      	sxtb	r2, r3
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084be:	2301      	movs	r3, #1
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
 80084c2:	e001      	b.n	80084c8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3738      	adds	r7, #56	; 0x38
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	; 0x38
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	623b      	str	r3, [r7, #32]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	61fb      	str	r3, [r7, #28]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008530:	f001 fa52 	bl	80099d8 <xTaskGetSchedulerState>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <xQueueSemaphoreTake+0x60>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <xQueueSemaphoreTake+0x64>
 8008540:	2301      	movs	r3, #1
 8008542:	e000      	b.n	8008546 <xQueueSemaphoreTake+0x66>
 8008544:	2300      	movs	r3, #0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	61bb      	str	r3, [r7, #24]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008560:	f001 fd6c 	bl	800a03c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	d024      	beq.n	80085ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	1e5a      	subs	r2, r3, #1
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008576:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008580:	f001 fbf4 	bl	8009d6c <pvTaskIncrementMutexHeldCount>
 8008584:	4602      	mov	r2, r0
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00f      	beq.n	80085b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	3310      	adds	r3, #16
 8008596:	4618      	mov	r0, r3
 8008598:	f001 f85e 	bl	8009658 <xTaskRemoveFromEventList>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085a2:	4b54      	ldr	r3, [pc, #336]	; (80086f4 <xQueueSemaphoreTake+0x214>)
 80085a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085b2:	f001 fd73 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e097      	b.n	80086ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d111      	bne.n	80085e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	617b      	str	r3, [r7, #20]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085dc:	f001 fd5e 	bl	800a09c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e082      	b.n	80086ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 f894 	bl	800971c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085f8:	f001 fd50 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085fc:	f000 fe46 	bl	800928c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008600:	f001 fd1c 	bl	800a03c <vPortEnterCritical>
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860a:	b25b      	sxtb	r3, r3
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d103      	bne.n	800861a <xQueueSemaphoreTake+0x13a>
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008620:	b25b      	sxtb	r3, r3
 8008622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008626:	d103      	bne.n	8008630 <xQueueSemaphoreTake+0x150>
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008630:	f001 fd34 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008634:	463a      	mov	r2, r7
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f001 f883 	bl	8009748 <xTaskCheckForTimeOut>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d132      	bne.n	80086ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800864a:	f000 f9f1 	bl	8008a30 <prvIsQueueEmpty>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d026      	beq.n	80086a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800865c:	f001 fcee 	bl	800a03c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4618      	mov	r0, r3
 8008666:	f001 f9d5 	bl	8009a14 <xTaskPriorityInherit>
 800866a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800866c:	f001 fd16 	bl	800a09c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	3324      	adds	r3, #36	; 0x24
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	4611      	mov	r1, r2
 8008678:	4618      	mov	r0, r3
 800867a:	f000 ffc9 	bl	8009610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800867e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008680:	f000 f984 	bl	800898c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008684:	f000 fe10 	bl	80092a8 <xTaskResumeAll>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	f47f af68 	bne.w	8008560 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008690:	4b18      	ldr	r3, [pc, #96]	; (80086f4 <xQueueSemaphoreTake+0x214>)
 8008692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	e75e      	b.n	8008560 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086a4:	f000 f972 	bl	800898c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086a8:	f000 fdfe 	bl	80092a8 <xTaskResumeAll>
 80086ac:	e758      	b.n	8008560 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086b0:	f000 f96c 	bl	800898c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b4:	f000 fdf8 	bl	80092a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086ba:	f000 f9b9 	bl	8008a30 <prvIsQueueEmpty>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f43f af4d 	beq.w	8008560 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80086cc:	f001 fcb6 	bl	800a03c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086d2:	f000 f8b4 	bl	800883e <prvGetDisinheritPriorityAfterTimeout>
 80086d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 faa4 	bl	8009c2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086e4:	f001 fcda 	bl	800a09c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3738      	adds	r7, #56	; 0x38
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	; 0x38
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	623b      	str	r3, [r7, #32]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <xQueueReceiveFromISR+0x3a>
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <xQueueReceiveFromISR+0x3e>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <xQueueReceiveFromISR+0x40>
 8008736:	2300      	movs	r3, #0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	61fb      	str	r3, [r7, #28]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008752:	f001 fd35 	bl	800a1c0 <vPortValidateInterruptPriority>
	__asm volatile
 8008756:	f3ef 8211 	mrs	r2, BASEPRI
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	61ba      	str	r2, [r7, #24]
 800876c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800876e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d02f      	beq.n	80087de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800878c:	f000 f8d8 	bl	8008940 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	1e5a      	subs	r2, r3, #1
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a0:	d112      	bne.n	80087c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d016      	beq.n	80087d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	3310      	adds	r3, #16
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 ff52 	bl	8009658 <xTaskRemoveFromEventList>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00e      	beq.n	80087d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e007      	b.n	80087d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087cc:	3301      	adds	r3, #1
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	b25a      	sxtb	r2, r3
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087d8:	2301      	movs	r3, #1
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
 80087dc:	e001      	b.n	80087e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80087de:	2300      	movs	r3, #0
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f383 8811 	msr	BASEPRI, r3
}
 80087ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3738      	adds	r7, #56	; 0x38
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <vQueueDelete+0x28>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	60bb      	str	r3, [r7, #8]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f933 	bl	8008a8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f001 fdc7 	bl	800a3c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	d006      	beq.n	800885c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f1c3 0307 	rsb	r3, r3, #7
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e001      	b.n	8008860 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008860:	68fb      	ldr	r3, [r7, #12]
	}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10d      	bne.n	80088a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d14d      	bne.n	800892e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4618      	mov	r0, r3
 8008898:	f001 f942 	bl	8009b20 <xTaskPriorityDisinherit>
 800889c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	605a      	str	r2, [r3, #4]
 80088a4:	e043      	b.n	800892e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d119      	bne.n	80088e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6898      	ldr	r0, [r3, #8]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b4:	461a      	mov	r2, r3
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	f001 fec2 	bl	800a640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	441a      	add	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d32b      	bcc.n	800892e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	609a      	str	r2, [r3, #8]
 80088de:	e026      	b.n	800892e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68d8      	ldr	r0, [r3, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	461a      	mov	r2, r3
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	f001 fea8 	bl	800a640 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	425b      	negs	r3, r3
 80088fa:	441a      	add	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d207      	bcs.n	800891c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	425b      	negs	r3, r3
 8008916:	441a      	add	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d105      	bne.n	800892e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	3b01      	subs	r3, #1
 800892c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008936:	697b      	ldr	r3, [r7, #20]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d018      	beq.n	8008984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	441a      	add	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	429a      	cmp	r2, r3
 800896a:	d303      	bcc.n	8008974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68d9      	ldr	r1, [r3, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	461a      	mov	r2, r3
 800897e:	6838      	ldr	r0, [r7, #0]
 8008980:	f001 fe5e 	bl	800a640 <memcpy>
	}
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008994:	f001 fb52 	bl	800a03c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800899e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a0:	e011      	b.n	80089c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d012      	beq.n	80089d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3324      	adds	r3, #36	; 0x24
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fe52 	bl	8009658 <xTaskRemoveFromEventList>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089ba:	f000 ff27 	bl	800980c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dce9      	bgt.n	80089a2 <prvUnlockQueue+0x16>
 80089ce:	e000      	b.n	80089d2 <prvUnlockQueue+0x46>
					break;
 80089d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089da:	f001 fb5f 	bl	800a09c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089de:	f001 fb2d 	bl	800a03c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ea:	e011      	b.n	8008a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d012      	beq.n	8008a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3310      	adds	r3, #16
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fe2d 	bl	8009658 <xTaskRemoveFromEventList>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a04:	f000 ff02 	bl	800980c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dce9      	bgt.n	80089ec <prvUnlockQueue+0x60>
 8008a18:	e000      	b.n	8008a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	22ff      	movs	r2, #255	; 0xff
 8008a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a24:	f001 fb3a 	bl	800a09c <vPortExitCritical>
}
 8008a28:	bf00      	nop
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a38:	f001 fb00 	bl	800a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d102      	bne.n	8008a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	e001      	b.n	8008a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a4e:	f001 fb25 	bl	800a09c <vPortExitCritical>

	return xReturn;
 8008a52:	68fb      	ldr	r3, [r7, #12]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a64:	f001 faea 	bl	800a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d102      	bne.n	8008a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	e001      	b.n	8008a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a7e:	f001 fb0d 	bl	800a09c <vPortExitCritical>

	return xReturn;
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e016      	b.n	8008ac8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a9a:	4a10      	ldr	r2, [pc, #64]	; (8008adc <vQueueUnregisterQueue+0x50>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d10b      	bne.n	8008ac2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	; (8008adc <vQueueUnregisterQueue+0x50>)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ab4:	4a09      	ldr	r2, [pc, #36]	; (8008adc <vQueueUnregisterQueue+0x50>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	4413      	add	r3, r2
 8008abc:	2200      	movs	r2, #0
 8008abe:	605a      	str	r2, [r3, #4]
				break;
 8008ac0:	e006      	b.n	8008ad0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b07      	cmp	r3, #7
 8008acc:	d9e5      	bls.n	8008a9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	200012b4 	.word	0x200012b4

08008ae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08e      	sub	sp, #56	; 0x38
 8008ae4:	af04      	add	r7, sp, #16
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	623b      	str	r3, [r7, #32]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <xTaskCreateStatic+0x46>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	61fb      	str	r3, [r7, #28]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b26:	2354      	movs	r3, #84	; 0x54
 8008b28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2b54      	cmp	r3, #84	; 0x54
 8008b2e:	d00a      	beq.n	8008b46 <xTaskCreateStatic+0x66>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	61bb      	str	r3, [r7, #24]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01e      	beq.n	8008b8a <xTaskCreateStatic+0xaa>
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01b      	beq.n	8008b8a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b64:	2300      	movs	r3, #0
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	f107 0314 	add.w	r3, r7, #20
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f850 	bl	8008c22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b84:	f000 f8cc 	bl	8008d20 <prvAddNewTaskToReadyList>
 8008b88:	e001      	b.n	8008b8e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b8e:	697b      	ldr	r3, [r7, #20]
	}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3728      	adds	r7, #40	; 0x28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08c      	sub	sp, #48	; 0x30
 8008b9c:	af04      	add	r7, sp, #16
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 fb45 	bl	800a23c <pvPortMalloc>
 8008bb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00e      	beq.n	8008bd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008bba:	2054      	movs	r0, #84	; 0x54
 8008bbc:	f001 fb3e 	bl	800a23c <pvPortMalloc>
 8008bc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8008bce:	e005      	b.n	8008bdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bd0:	6978      	ldr	r0, [r7, #20]
 8008bd2:	f001 fbf7 	bl	800a3c4 <vPortFree>
 8008bd6:	e001      	b.n	8008bdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d017      	beq.n	8008c12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	2300      	movs	r3, #0
 8008bee:	9303      	str	r3, [sp, #12]
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	9302      	str	r3, [sp, #8]
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 f80e 	bl	8008c22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c06:	69f8      	ldr	r0, [r7, #28]
 8008c08:	f000 f88a 	bl	8008d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	61bb      	str	r3, [r7, #24]
 8008c10:	e002      	b.n	8008c18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c18:	69bb      	ldr	r3, [r7, #24]
	}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b088      	sub	sp, #32
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	f023 0307 	bic.w	r3, r3, #7
 8008c48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <prvInitialiseNewTask+0x48>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	617b      	str	r3, [r7, #20]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	e012      	b.n	8008c96 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	7819      	ldrb	r1, [r3, #0]
 8008c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3334      	adds	r3, #52	; 0x34
 8008c80:	460a      	mov	r2, r1
 8008c82:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	3301      	adds	r3, #1
 8008c94:	61fb      	str	r3, [r7, #28]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2b0f      	cmp	r3, #15
 8008c9a:	d9e9      	bls.n	8008c70 <prvInitialiseNewTask+0x4e>
 8008c9c:	e000      	b.n	8008ca0 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008c9e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b06      	cmp	r3, #6
 8008cac:	d901      	bls.n	8008cb2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cae:	2306      	movs	r3, #6
 8008cb0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cbc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff f8b1 	bl	8007e30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	3318      	adds	r3, #24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff f8ac 	bl	8007e30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	f1c3 0207 	rsb	r2, r3, #7
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	69b8      	ldr	r0, [r7, #24]
 8008d02:	f001 f8ad 	bl	8009e60 <pxPortInitialiseStack>
 8008d06:	4602      	mov	r2, r0
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d18:	bf00      	nop
 8008d1a:	3720      	adds	r7, #32
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d28:	f001 f988 	bl	800a03c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	; (8008dd8 <prvAddNewTaskToReadyList+0xb8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	4a29      	ldr	r2, [pc, #164]	; (8008dd8 <prvAddNewTaskToReadyList+0xb8>)
 8008d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d36:	4b29      	ldr	r3, [pc, #164]	; (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d3e:	4a27      	ldr	r2, [pc, #156]	; (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d44:	4b24      	ldr	r3, [pc, #144]	; (8008dd8 <prvAddNewTaskToReadyList+0xb8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d110      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d4c:	f000 fd82 	bl	8009854 <prvInitialiseTaskLists>
 8008d50:	e00d      	b.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d52:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <prvAddNewTaskToReadyList+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d5a:	4b20      	ldr	r3, [pc, #128]	; (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d802      	bhi.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d68:	4a1c      	ldr	r2, [pc, #112]	; (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d6e:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a1b      	ldr	r2, [pc, #108]	; (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	409a      	lsls	r2, r3
 8008d80:	4b19      	ldr	r3, [pc, #100]	; (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	4a18      	ldr	r2, [pc, #96]	; (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a15      	ldr	r2, [pc, #84]	; (8008dec <prvAddNewTaskToReadyList+0xcc>)
 8008d98:	441a      	add	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7ff f851 	bl	8007e48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008da6:	f001 f979 	bl	800a09c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <prvAddNewTaskToReadyList+0xc0>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db2:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d207      	bcs.n	8008dd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <prvAddNewTaskToReadyList+0xd0>)
 8008dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	200013f4 	.word	0x200013f4
 8008ddc:	200012f4 	.word	0x200012f4
 8008de0:	20001400 	.word	0x20001400
 8008de4:	20001410 	.word	0x20001410
 8008de8:	200013fc 	.word	0x200013fc
 8008dec:	200012f8 	.word	0x200012f8
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b06      	cmp	r3, #6
 8008e06:	d90a      	bls.n	8008e1e <vTaskPrioritySet+0x2a>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b06      	cmp	r3, #6
 8008e22:	d901      	bls.n	8008e28 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e24:	2306      	movs	r3, #6
 8008e26:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008e28:	f001 f908 	bl	800a03c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <vTaskPrioritySet+0x44>
 8008e32:	4b43      	ldr	r3, [pc, #268]	; (8008f40 <vTaskPrioritySet+0x14c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	e000      	b.n	8008e3a <vTaskPrioritySet+0x46>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e40:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d074      	beq.n	8008f34 <vTaskPrioritySet+0x140>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d90d      	bls.n	8008e6e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8008e52:	4b3b      	ldr	r3, [pc, #236]	; (8008f40 <vTaskPrioritySet+0x14c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d00f      	beq.n	8008e7c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008e5c:	4b38      	ldr	r3, [pc, #224]	; (8008f40 <vTaskPrioritySet+0x14c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d309      	bcc.n	8008e7c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e006      	b.n	8008e7c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8008e6e:	4b34      	ldr	r3, [pc, #208]	; (8008f40 <vTaskPrioritySet+0x14c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d101      	bne.n	8008e7c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d102      	bne.n	8008e94 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	db04      	blt.n	8008eac <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	f1c3 0207 	rsb	r2, r3, #7
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	6959      	ldr	r1, [r3, #20]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4a22      	ldr	r2, [pc, #136]	; (8008f44 <vTaskPrioritySet+0x150>)
 8008ebc:	4413      	add	r3, r2
 8008ebe:	4299      	cmp	r1, r3
 8008ec0:	d101      	bne.n	8008ec6 <vTaskPrioritySet+0xd2>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <vTaskPrioritySet+0xd4>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d028      	beq.n	8008f1e <vTaskPrioritySet+0x12a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff f814 	bl	8007efe <uxListRemove>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d109      	bne.n	8008ef0 <vTaskPrioritySet+0xfc>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8008edc:	2201      	movs	r2, #1
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee4:	43da      	mvns	r2, r3
 8008ee6:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <vTaskPrioritySet+0x154>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4013      	ands	r3, r2
 8008eec:	4a16      	ldr	r2, [pc, #88]	; (8008f48 <vTaskPrioritySet+0x154>)
 8008eee:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	409a      	lsls	r2, r3
 8008ef8:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <vTaskPrioritySet+0x154>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	4a12      	ldr	r2, [pc, #72]	; (8008f48 <vTaskPrioritySet+0x154>)
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4a0d      	ldr	r2, [pc, #52]	; (8008f44 <vTaskPrioritySet+0x150>)
 8008f10:	441a      	add	r2, r3
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7fe ff95 	bl	8007e48 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d007      	beq.n	8008f34 <vTaskPrioritySet+0x140>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8008f24:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <vTaskPrioritySet+0x158>)
 8008f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8008f34:	f001 f8b2 	bl	800a09c <vPortExitCritical>
	}
 8008f38:	bf00      	nop
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	200012f4 	.word	0x200012f4
 8008f44:	200012f8 	.word	0x200012f8
 8008f48:	200013fc 	.word	0x200013fc
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f58:	f001 f870 	bl	800a03c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <vTaskSuspend+0x18>
 8008f62:	4b3c      	ldr	r3, [pc, #240]	; (8009054 <vTaskSuspend+0x104>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	e000      	b.n	8008f6a <vTaskSuspend+0x1a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe ffc4 	bl	8007efe <uxListRemove>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d115      	bne.n	8008fa8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4935      	ldr	r1, [pc, #212]	; (8009058 <vTaskSuspend+0x108>)
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <vTaskSuspend+0x58>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	2201      	movs	r2, #1
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	43da      	mvns	r2, r3
 8008f9e:	4b2f      	ldr	r3, [pc, #188]	; (800905c <vTaskSuspend+0x10c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	4a2d      	ldr	r2, [pc, #180]	; (800905c <vTaskSuspend+0x10c>)
 8008fa6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3318      	adds	r3, #24
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe ffa2 	bl	8007efe <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4827      	ldr	r0, [pc, #156]	; (8009060 <vTaskSuspend+0x110>)
 8008fc2:	f7fe ff41 	bl	8007e48 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d103      	bne.n	8008fda <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008fda:	f001 f85f 	bl	800a09c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008fde:	4b21      	ldr	r3, [pc, #132]	; (8009064 <vTaskSuspend+0x114>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008fe6:	f001 f829 	bl	800a03c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008fea:	f000 fcd1 	bl	8009990 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008fee:	f001 f855 	bl	800a09c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008ff2:	4b18      	ldr	r3, [pc, #96]	; (8009054 <vTaskSuspend+0x104>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d127      	bne.n	800904c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8008ffc:	4b19      	ldr	r3, [pc, #100]	; (8009064 <vTaskSuspend+0x114>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d017      	beq.n	8009034 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009004:	4b18      	ldr	r3, [pc, #96]	; (8009068 <vTaskSuspend+0x118>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vTaskSuspend+0xd2>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8009022:	4b12      	ldr	r3, [pc, #72]	; (800906c <vTaskSuspend+0x11c>)
 8009024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009032:	e00b      	b.n	800904c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009034:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <vTaskSuspend+0x110>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <vTaskSuspend+0x120>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d103      	bne.n	8009048 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8009040:	4b04      	ldr	r3, [pc, #16]	; (8009054 <vTaskSuspend+0x104>)
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
	}
 8009046:	e001      	b.n	800904c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8009048:	f000 fa88 	bl	800955c <vTaskSwitchContext>
	}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	200012f4 	.word	0x200012f4
 8009058:	200012f8 	.word	0x200012f8
 800905c:	200013fc 	.word	0x200013fc
 8009060:	200013e0 	.word	0x200013e0
 8009064:	20001400 	.word	0x20001400
 8009068:	2000141c 	.word	0x2000141c
 800906c:	e000ed04 	.word	0xe000ed04
 8009070:	200013f4 	.word	0x200013f4

08009074 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	60fb      	str	r3, [r7, #12]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	4a0e      	ldr	r2, [pc, #56]	; (80090e0 <prvTaskIsTaskSuspended+0x6c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d101      	bne.n	80090ae <prvTaskIsTaskSuspended+0x3a>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e000      	b.n	80090b0 <prvTaskIsTaskSuspended+0x3c>
 80090ae:	2300      	movs	r3, #0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00f      	beq.n	80090d4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b8:	4a0a      	ldr	r2, [pc, #40]	; (80090e4 <prvTaskIsTaskSuspended+0x70>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00a      	beq.n	80090d4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <prvTaskIsTaskSuspended+0x56>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e000      	b.n	80090cc <prvTaskIsTaskSuspended+0x58>
 80090ca:	2300      	movs	r3, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090d4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80090d6:	4618      	mov	r0, r3
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr
 80090e0:	200013e0 	.word	0x200013e0
 80090e4:	200013b4 	.word	0x200013b4

080090e8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	61bb      	str	r3, [r7, #24]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009114:	f001 f854 	bl	800a1c0 <vPortValidateInterruptPriority>
	__asm volatile
 8009118:	f3ef 8211 	mrs	r2, BASEPRI
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	617a      	str	r2, [r7, #20]
 800912e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009130:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009132:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009134:	6a38      	ldr	r0, [r7, #32]
 8009136:	f7ff ff9d 	bl	8009074 <prvTaskIsTaskSuspended>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d02f      	beq.n	80091a0 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009140:	4b1d      	ldr	r3, [pc, #116]	; (80091b8 <xTaskResumeFromISR+0xd0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d125      	bne.n	8009194 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4b1b      	ldr	r3, [pc, #108]	; (80091bc <xTaskResumeFromISR+0xd4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	429a      	cmp	r2, r3
 8009154:	d301      	bcc.n	800915a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8009156:	2301      	movs	r3, #1
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	3304      	adds	r3, #4
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fecd 	bl	8007efe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	2201      	movs	r2, #1
 800916a:	409a      	lsls	r2, r3
 800916c:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <xTaskResumeFromISR+0xd8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4313      	orrs	r3, r2
 8009172:	4a13      	ldr	r2, [pc, #76]	; (80091c0 <xTaskResumeFromISR+0xd8>)
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4a10      	ldr	r2, [pc, #64]	; (80091c4 <xTaskResumeFromISR+0xdc>)
 8009184:	441a      	add	r2, r3
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	3304      	adds	r3, #4
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f7fe fe5b 	bl	8007e48 <vListInsertEnd>
 8009192:	e005      	b.n	80091a0 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	3318      	adds	r3, #24
 8009198:	4619      	mov	r1, r3
 800919a:	480b      	ldr	r0, [pc, #44]	; (80091c8 <xTaskResumeFromISR+0xe0>)
 800919c:	f7fe fe54 	bl	8007e48 <vListInsertEnd>
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f383 8811 	msr	BASEPRI, r3
}
 80091aa:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3728      	adds	r7, #40	; 0x28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	2000141c 	.word	0x2000141c
 80091bc:	200012f4 	.word	0x200012f4
 80091c0:	200013fc 	.word	0x200013fc
 80091c4:	200012f8 	.word	0x200012f8
 80091c8:	200013b4 	.word	0x200013b4

080091cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091da:	463a      	mov	r2, r7
 80091dc:	1d39      	adds	r1, r7, #4
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f7 fa18 	bl	8000618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	9202      	str	r2, [sp, #8]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	2300      	movs	r3, #0
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	460a      	mov	r2, r1
 80091fa:	491e      	ldr	r1, [pc, #120]	; (8009274 <vTaskStartScheduler+0xa8>)
 80091fc:	481e      	ldr	r0, [pc, #120]	; (8009278 <vTaskStartScheduler+0xac>)
 80091fe:	f7ff fc6f 	bl	8008ae0 <xTaskCreateStatic>
 8009202:	4603      	mov	r3, r0
 8009204:	4a1d      	ldr	r2, [pc, #116]	; (800927c <vTaskStartScheduler+0xb0>)
 8009206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009208:	4b1c      	ldr	r3, [pc, #112]	; (800927c <vTaskStartScheduler+0xb0>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e001      	b.n	800921a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d116      	bne.n	800924e <vTaskStartScheduler+0x82>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	613b      	str	r3, [r7, #16]
}
 8009232:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009234:	4b12      	ldr	r3, [pc, #72]	; (8009280 <vTaskStartScheduler+0xb4>)
 8009236:	f04f 32ff 	mov.w	r2, #4294967295
 800923a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800923c:	4b11      	ldr	r3, [pc, #68]	; (8009284 <vTaskStartScheduler+0xb8>)
 800923e:	2201      	movs	r2, #1
 8009240:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009242:	4b11      	ldr	r3, [pc, #68]	; (8009288 <vTaskStartScheduler+0xbc>)
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009248:	f000 fe86 	bl	8009f58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800924c:	e00e      	b.n	800926c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d10a      	bne.n	800926c <vTaskStartScheduler+0xa0>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	60fb      	str	r3, [r7, #12]
}
 8009268:	bf00      	nop
 800926a:	e7fe      	b.n	800926a <vTaskStartScheduler+0x9e>
}
 800926c:	bf00      	nop
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	0800b134 	.word	0x0800b134
 8009278:	08009825 	.word	0x08009825
 800927c:	20001418 	.word	0x20001418
 8009280:	20001414 	.word	0x20001414
 8009284:	20001400 	.word	0x20001400
 8009288:	200013f8 	.word	0x200013f8

0800928c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009290:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <vTaskSuspendAll+0x18>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a03      	ldr	r2, [pc, #12]	; (80092a4 <vTaskSuspendAll+0x18>)
 8009298:	6013      	str	r3, [r2, #0]
}
 800929a:	bf00      	nop
 800929c:	46bd      	mov	sp, r7
 800929e:	bc80      	pop	{r7}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	2000141c 	.word	0x2000141c

080092a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <xTaskResumeAll+0x114>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	603b      	str	r3, [r7, #0]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092d4:	f000 feb2 	bl	800a03c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092d8:	4b38      	ldr	r3, [pc, #224]	; (80093bc <xTaskResumeAll+0x114>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3b01      	subs	r3, #1
 80092de:	4a37      	ldr	r2, [pc, #220]	; (80093bc <xTaskResumeAll+0x114>)
 80092e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e2:	4b36      	ldr	r3, [pc, #216]	; (80093bc <xTaskResumeAll+0x114>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d161      	bne.n	80093ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092ea:	4b35      	ldr	r3, [pc, #212]	; (80093c0 <xTaskResumeAll+0x118>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d05d      	beq.n	80093ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092f2:	e02e      	b.n	8009352 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80092f4:	4b33      	ldr	r3, [pc, #204]	; (80093c4 <xTaskResumeAll+0x11c>)
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3318      	adds	r3, #24
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe fdfc 	bl	8007efe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3304      	adds	r3, #4
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fdf7 	bl	8007efe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	2201      	movs	r2, #1
 8009316:	409a      	lsls	r2, r3
 8009318:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <xTaskResumeAll+0x120>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4313      	orrs	r3, r2
 800931e:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <xTaskResumeAll+0x120>)
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	4613      	mov	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4a27      	ldr	r2, [pc, #156]	; (80093cc <xTaskResumeAll+0x124>)
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fe fd85 	bl	8007e48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009342:	4b23      	ldr	r3, [pc, #140]	; (80093d0 <xTaskResumeAll+0x128>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	429a      	cmp	r2, r3
 800934a:	d302      	bcc.n	8009352 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800934c:	4b21      	ldr	r3, [pc, #132]	; (80093d4 <xTaskResumeAll+0x12c>)
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009352:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <xTaskResumeAll+0x11c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1cc      	bne.n	80092f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009360:	f000 fb16 	bl	8009990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009364:	4b1c      	ldr	r3, [pc, #112]	; (80093d8 <xTaskResumeAll+0x130>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d010      	beq.n	8009392 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009370:	f000 f836 	bl	80093e0 <xTaskIncrementTick>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800937a:	4b16      	ldr	r3, [pc, #88]	; (80093d4 <xTaskResumeAll+0x12c>)
 800937c:	2201      	movs	r2, #1
 800937e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3b01      	subs	r3, #1
 8009384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1f1      	bne.n	8009370 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800938c:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <xTaskResumeAll+0x130>)
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009392:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <xTaskResumeAll+0x12c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800939a:	2301      	movs	r3, #1
 800939c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <xTaskResumeAll+0x134>)
 80093a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093ae:	f000 fe75 	bl	800a09c <vPortExitCritical>

	return xAlreadyYielded;
 80093b2:	68bb      	ldr	r3, [r7, #8]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	2000141c 	.word	0x2000141c
 80093c0:	200013f4 	.word	0x200013f4
 80093c4:	200013b4 	.word	0x200013b4
 80093c8:	200013fc 	.word	0x200013fc
 80093cc:	200012f8 	.word	0x200012f8
 80093d0:	200012f4 	.word	0x200012f4
 80093d4:	20001408 	.word	0x20001408
 80093d8:	20001404 	.word	0x20001404
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ea:	4b51      	ldr	r3, [pc, #324]	; (8009530 <xTaskIncrementTick+0x150>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 808d 	bne.w	800950e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093f4:	4b4f      	ldr	r3, [pc, #316]	; (8009534 <xTaskIncrementTick+0x154>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093fc:	4a4d      	ldr	r2, [pc, #308]	; (8009534 <xTaskIncrementTick+0x154>)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d120      	bne.n	800944a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009408:	4b4b      	ldr	r3, [pc, #300]	; (8009538 <xTaskIncrementTick+0x158>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <xTaskIncrementTick+0x48>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	603b      	str	r3, [r7, #0]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <xTaskIncrementTick+0x46>
 8009428:	4b43      	ldr	r3, [pc, #268]	; (8009538 <xTaskIncrementTick+0x158>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	4b43      	ldr	r3, [pc, #268]	; (800953c <xTaskIncrementTick+0x15c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a41      	ldr	r2, [pc, #260]	; (8009538 <xTaskIncrementTick+0x158>)
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	4a41      	ldr	r2, [pc, #260]	; (800953c <xTaskIncrementTick+0x15c>)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	4b40      	ldr	r3, [pc, #256]	; (8009540 <xTaskIncrementTick+0x160>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	4a3f      	ldr	r2, [pc, #252]	; (8009540 <xTaskIncrementTick+0x160>)
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	f000 faa3 	bl	8009990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800944a:	4b3e      	ldr	r3, [pc, #248]	; (8009544 <xTaskIncrementTick+0x164>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	429a      	cmp	r2, r3
 8009452:	d34d      	bcc.n	80094f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009454:	4b38      	ldr	r3, [pc, #224]	; (8009538 <xTaskIncrementTick+0x158>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <xTaskIncrementTick+0x82>
 800945e:	2301      	movs	r3, #1
 8009460:	e000      	b.n	8009464 <xTaskIncrementTick+0x84>
 8009462:	2300      	movs	r3, #0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009468:	4b36      	ldr	r3, [pc, #216]	; (8009544 <xTaskIncrementTick+0x164>)
 800946a:	f04f 32ff 	mov.w	r2, #4294967295
 800946e:	601a      	str	r2, [r3, #0]
					break;
 8009470:	e03e      	b.n	80094f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009472:	4b31      	ldr	r3, [pc, #196]	; (8009538 <xTaskIncrementTick+0x158>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d203      	bcs.n	8009492 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800948a:	4a2e      	ldr	r2, [pc, #184]	; (8009544 <xTaskIncrementTick+0x164>)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6013      	str	r3, [r2, #0]
						break;
 8009490:	e02e      	b.n	80094f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	3304      	adds	r3, #4
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fd31 	bl	8007efe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	3318      	adds	r3, #24
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fd28 	bl	8007efe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	2201      	movs	r2, #1
 80094b4:	409a      	lsls	r2, r3
 80094b6:	4b24      	ldr	r3, [pc, #144]	; (8009548 <xTaskIncrementTick+0x168>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	4a22      	ldr	r2, [pc, #136]	; (8009548 <xTaskIncrementTick+0x168>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4a1f      	ldr	r2, [pc, #124]	; (800954c <xTaskIncrementTick+0x16c>)
 80094ce:	441a      	add	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fe fcb6 	bl	8007e48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <xTaskIncrementTick+0x170>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d3b4      	bcc.n	8009454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ee:	e7b1      	b.n	8009454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <xTaskIncrementTick+0x170>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f6:	4915      	ldr	r1, [pc, #84]	; (800954c <xTaskIncrementTick+0x16c>)
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d907      	bls.n	8009518 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e004      	b.n	8009518 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800950e:	4b11      	ldr	r3, [pc, #68]	; (8009554 <xTaskIncrementTick+0x174>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3301      	adds	r3, #1
 8009514:	4a0f      	ldr	r2, [pc, #60]	; (8009554 <xTaskIncrementTick+0x174>)
 8009516:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009518:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <xTaskIncrementTick+0x178>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009520:	2301      	movs	r3, #1
 8009522:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009524:	697b      	ldr	r3, [r7, #20]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	2000141c 	.word	0x2000141c
 8009534:	200013f8 	.word	0x200013f8
 8009538:	200013ac 	.word	0x200013ac
 800953c:	200013b0 	.word	0x200013b0
 8009540:	2000140c 	.word	0x2000140c
 8009544:	20001414 	.word	0x20001414
 8009548:	200013fc 	.word	0x200013fc
 800954c:	200012f8 	.word	0x200012f8
 8009550:	200012f4 	.word	0x200012f4
 8009554:	20001404 	.word	0x20001404
 8009558:	20001408 	.word	0x20001408

0800955c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009562:	4b26      	ldr	r3, [pc, #152]	; (80095fc <vTaskSwitchContext+0xa0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800956a:	4b25      	ldr	r3, [pc, #148]	; (8009600 <vTaskSwitchContext+0xa4>)
 800956c:	2201      	movs	r2, #1
 800956e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009570:	e03f      	b.n	80095f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009572:	4b23      	ldr	r3, [pc, #140]	; (8009600 <vTaskSwitchContext+0xa4>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009578:	4b22      	ldr	r3, [pc, #136]	; (8009604 <vTaskSwitchContext+0xa8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	fab3 f383 	clz	r3, r3
 8009584:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009586:	7afb      	ldrb	r3, [r7, #11]
 8009588:	f1c3 031f 	rsb	r3, r3, #31
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	491e      	ldr	r1, [pc, #120]	; (8009608 <vTaskSwitchContext+0xac>)
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10a      	bne.n	80095b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	607b      	str	r3, [r7, #4]
}
 80095b4:	bf00      	nop
 80095b6:	e7fe      	b.n	80095b6 <vTaskSwitchContext+0x5a>
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4a11      	ldr	r2, [pc, #68]	; (8009608 <vTaskSwitchContext+0xac>)
 80095c4:	4413      	add	r3, r2
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	605a      	str	r2, [r3, #4]
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	3308      	adds	r3, #8
 80095da:	429a      	cmp	r2, r3
 80095dc:	d104      	bne.n	80095e8 <vTaskSwitchContext+0x8c>
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	605a      	str	r2, [r3, #4]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	4a07      	ldr	r2, [pc, #28]	; (800960c <vTaskSwitchContext+0xb0>)
 80095f0:	6013      	str	r3, [r2, #0]
}
 80095f2:	bf00      	nop
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr
 80095fc:	2000141c 	.word	0x2000141c
 8009600:	20001408 	.word	0x20001408
 8009604:	200013fc 	.word	0x200013fc
 8009608:	200012f8 	.word	0x200012f8
 800960c:	200012f4 	.word	0x200012f4

08009610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60fb      	str	r3, [r7, #12]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <vTaskPlaceOnEventList+0x44>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3318      	adds	r3, #24
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7fe fc25 	bl	8007e8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009644:	2101      	movs	r1, #1
 8009646:	6838      	ldr	r0, [r7, #0]
 8009648:	f000 fba4 	bl	8009d94 <prvAddCurrentTaskToDelayedList>
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	200012f4 	.word	0x200012f4

08009658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	60fb      	str	r3, [r7, #12]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	3318      	adds	r3, #24
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe fc38 	bl	8007efe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800968e:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <xTaskRemoveFromEventList+0xac>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d11c      	bne.n	80096d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	3304      	adds	r3, #4
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fc2f 	bl	8007efe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	2201      	movs	r2, #1
 80096a6:	409a      	lsls	r2, r3
 80096a8:	4b17      	ldr	r3, [pc, #92]	; (8009708 <xTaskRemoveFromEventList+0xb0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	4a16      	ldr	r2, [pc, #88]	; (8009708 <xTaskRemoveFromEventList+0xb0>)
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4a13      	ldr	r2, [pc, #76]	; (800970c <xTaskRemoveFromEventList+0xb4>)
 80096c0:	441a      	add	r2, r3
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7fe fbbd 	bl	8007e48 <vListInsertEnd>
 80096ce:	e005      	b.n	80096dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	3318      	adds	r3, #24
 80096d4:	4619      	mov	r1, r3
 80096d6:	480e      	ldr	r0, [pc, #56]	; (8009710 <xTaskRemoveFromEventList+0xb8>)
 80096d8:	f7fe fbb6 	bl	8007e48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <xTaskRemoveFromEventList+0xbc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d905      	bls.n	80096f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096ea:	2301      	movs	r3, #1
 80096ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <xTaskRemoveFromEventList+0xc0>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e001      	b.n	80096fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80096fa:	697b      	ldr	r3, [r7, #20]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	2000141c 	.word	0x2000141c
 8009708:	200013fc 	.word	0x200013fc
 800970c:	200012f8 	.word	0x200012f8
 8009710:	200013b4 	.word	0x200013b4
 8009714:	200012f4 	.word	0x200012f4
 8009718:	20001408 	.word	0x20001408

0800971c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <vTaskInternalSetTimeOutState+0x24>)
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <vTaskInternalSetTimeOutState+0x28>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	605a      	str	r2, [r3, #4]
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	2000140c 	.word	0x2000140c
 8009744:	200013f8 	.word	0x200013f8

08009748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	613b      	str	r3, [r7, #16]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800978a:	f000 fc57 	bl	800a03c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800978e:	4b1d      	ldr	r3, [pc, #116]	; (8009804 <xTaskCheckForTimeOut+0xbc>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d102      	bne.n	80097ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61fb      	str	r3, [r7, #28]
 80097ac:	e023      	b.n	80097f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	4b15      	ldr	r3, [pc, #84]	; (8009808 <xTaskCheckForTimeOut+0xc0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d007      	beq.n	80097ca <xTaskCheckForTimeOut+0x82>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d302      	bcc.n	80097ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097c4:	2301      	movs	r3, #1
 80097c6:	61fb      	str	r3, [r7, #28]
 80097c8:	e015      	b.n	80097f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d20b      	bcs.n	80097ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	1ad2      	subs	r2, r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff9b 	bl	800971c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	e004      	b.n	80097f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097f2:	2301      	movs	r3, #1
 80097f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097f6:	f000 fc51 	bl	800a09c <vPortExitCritical>

	return xReturn;
 80097fa:	69fb      	ldr	r3, [r7, #28]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3720      	adds	r7, #32
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	200013f8 	.word	0x200013f8
 8009808:	2000140c 	.word	0x2000140c

0800980c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009810:	4b03      	ldr	r3, [pc, #12]	; (8009820 <vTaskMissedYield+0x14>)
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
}
 8009816:	bf00      	nop
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	20001408 	.word	0x20001408

08009824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800982c:	f000 f852 	bl	80098d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <prvIdleTask+0x28>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d9f9      	bls.n	800982c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009838:	4b05      	ldr	r3, [pc, #20]	; (8009850 <prvIdleTask+0x2c>)
 800983a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009848:	e7f0      	b.n	800982c <prvIdleTask+0x8>
 800984a:	bf00      	nop
 800984c:	200012f8 	.word	0x200012f8
 8009850:	e000ed04 	.word	0xe000ed04

08009854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	e00c      	b.n	800987a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4a12      	ldr	r2, [pc, #72]	; (80098b4 <prvInitialiseTaskLists+0x60>)
 800986c:	4413      	add	r3, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fabf 	bl	8007df2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3301      	adds	r3, #1
 8009878:	607b      	str	r3, [r7, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b06      	cmp	r3, #6
 800987e:	d9ef      	bls.n	8009860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009880:	480d      	ldr	r0, [pc, #52]	; (80098b8 <prvInitialiseTaskLists+0x64>)
 8009882:	f7fe fab6 	bl	8007df2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009886:	480d      	ldr	r0, [pc, #52]	; (80098bc <prvInitialiseTaskLists+0x68>)
 8009888:	f7fe fab3 	bl	8007df2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800988c:	480c      	ldr	r0, [pc, #48]	; (80098c0 <prvInitialiseTaskLists+0x6c>)
 800988e:	f7fe fab0 	bl	8007df2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009892:	480c      	ldr	r0, [pc, #48]	; (80098c4 <prvInitialiseTaskLists+0x70>)
 8009894:	f7fe faad 	bl	8007df2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009898:	480b      	ldr	r0, [pc, #44]	; (80098c8 <prvInitialiseTaskLists+0x74>)
 800989a:	f7fe faaa 	bl	8007df2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800989e:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <prvInitialiseTaskLists+0x78>)
 80098a0:	4a05      	ldr	r2, [pc, #20]	; (80098b8 <prvInitialiseTaskLists+0x64>)
 80098a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098a4:	4b0a      	ldr	r3, [pc, #40]	; (80098d0 <prvInitialiseTaskLists+0x7c>)
 80098a6:	4a05      	ldr	r2, [pc, #20]	; (80098bc <prvInitialiseTaskLists+0x68>)
 80098a8:	601a      	str	r2, [r3, #0]
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	200012f8 	.word	0x200012f8
 80098b8:	20001384 	.word	0x20001384
 80098bc:	20001398 	.word	0x20001398
 80098c0:	200013b4 	.word	0x200013b4
 80098c4:	200013c8 	.word	0x200013c8
 80098c8:	200013e0 	.word	0x200013e0
 80098cc:	200013ac 	.word	0x200013ac
 80098d0:	200013b0 	.word	0x200013b0

080098d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098da:	e019      	b.n	8009910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098dc:	f000 fbae 	bl	800a03c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098e0:	4b10      	ldr	r3, [pc, #64]	; (8009924 <prvCheckTasksWaitingTermination+0x50>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fe fb06 	bl	8007efe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098f2:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <prvCheckTasksWaitingTermination+0x54>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4a0b      	ldr	r2, [pc, #44]	; (8009928 <prvCheckTasksWaitingTermination+0x54>)
 80098fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098fc:	4b0b      	ldr	r3, [pc, #44]	; (800992c <prvCheckTasksWaitingTermination+0x58>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3b01      	subs	r3, #1
 8009902:	4a0a      	ldr	r2, [pc, #40]	; (800992c <prvCheckTasksWaitingTermination+0x58>)
 8009904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009906:	f000 fbc9 	bl	800a09c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f810 	bl	8009930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <prvCheckTasksWaitingTermination+0x58>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e1      	bne.n	80098dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	200013c8 	.word	0x200013c8
 8009928:	200013f4 	.word	0x200013f4
 800992c:	200013dc 	.word	0x200013dc

08009930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800993e:	2b00      	cmp	r3, #0
 8009940:	d108      	bne.n	8009954 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fd3c 	bl	800a3c4 <vPortFree>
				vPortFree( pxTCB );
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fd39 	bl	800a3c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009952:	e018      	b.n	8009986 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800995a:	2b01      	cmp	r3, #1
 800995c:	d103      	bne.n	8009966 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fd30 	bl	800a3c4 <vPortFree>
	}
 8009964:	e00f      	b.n	8009986 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800996c:	2b02      	cmp	r3, #2
 800996e:	d00a      	beq.n	8009986 <prvDeleteTCB+0x56>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <prvDeleteTCB+0x54>
	}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009996:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <prvResetNextTaskUnblockTime+0x40>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <prvResetNextTaskUnblockTime+0x14>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <prvResetNextTaskUnblockTime+0x16>
 80099a4:	2300      	movs	r3, #0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099aa:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <prvResetNextTaskUnblockTime+0x44>)
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295
 80099b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099b2:	e008      	b.n	80099c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <prvResetNextTaskUnblockTime+0x40>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <prvResetNextTaskUnblockTime+0x44>)
 80099c4:	6013      	str	r3, [r2, #0]
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bc80      	pop	{r7}
 80099ce:	4770      	bx	lr
 80099d0:	200013ac 	.word	0x200013ac
 80099d4:	20001414 	.word	0x20001414

080099d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <xTaskGetSchedulerState+0x34>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099e6:	2301      	movs	r3, #1
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	e008      	b.n	80099fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ec:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <xTaskGetSchedulerState+0x38>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099f4:	2302      	movs	r3, #2
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	e001      	b.n	80099fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099fa:	2300      	movs	r3, #0
 80099fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099fe:	687b      	ldr	r3, [r7, #4]
	}
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bc80      	pop	{r7}
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20001400 	.word	0x20001400
 8009a10:	2000141c 	.word	0x2000141c

08009a14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d06e      	beq.n	8009b08 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	4b39      	ldr	r3, [pc, #228]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d25e      	bcs.n	8009af6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	db06      	blt.n	8009a4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a40:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	f1c3 0207 	rsb	r2, r3, #7
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6959      	ldr	r1, [r3, #20]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4a2e      	ldr	r2, [pc, #184]	; (8009b18 <xTaskPriorityInherit+0x104>)
 8009a60:	4413      	add	r3, r2
 8009a62:	4299      	cmp	r1, r3
 8009a64:	d101      	bne.n	8009a6a <xTaskPriorityInherit+0x56>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <xTaskPriorityInherit+0x58>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d03a      	beq.n	8009ae6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fa42 	bl	8007efe <uxListRemove>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d115      	bne.n	8009aac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	4924      	ldr	r1, [pc, #144]	; (8009b18 <xTaskPriorityInherit+0x104>)
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	440b      	add	r3, r1
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10a      	bne.n	8009aac <xTaskPriorityInherit+0x98>
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	43da      	mvns	r2, r3
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	4a1c      	ldr	r2, [pc, #112]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009aaa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aac:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	2201      	movs	r2, #1
 8009abc:	409a      	lsls	r2, r3
 8009abe:	4b17      	ldr	r3, [pc, #92]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4a10      	ldr	r2, [pc, #64]	; (8009b18 <xTaskPriorityInherit+0x104>)
 8009ad6:	441a      	add	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe f9b2 	bl	8007e48 <vListInsertEnd>
 8009ae4:	e004      	b.n	8009af0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e008      	b.n	8009b08 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afa:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d201      	bcs.n	8009b08 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b08:	68fb      	ldr	r3, [r7, #12]
	}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	200012f4 	.word	0x200012f4
 8009b18:	200012f8 	.word	0x200012f8
 8009b1c:	200013fc 	.word	0x200013fc

08009b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d06e      	beq.n	8009c14 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b36:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <xTaskPriorityDisinherit+0x100>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d00a      	beq.n	8009b56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60bb      	str	r3, [r7, #8]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b78:	1e5a      	subs	r2, r3, #1
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d044      	beq.n	8009c14 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d140      	bne.n	8009c14 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe f9b1 	bl	8007efe <uxListRemove>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d115      	bne.n	8009bce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba6:	491f      	ldr	r1, [pc, #124]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009ba8:	4613      	mov	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	440b      	add	r3, r1
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <xTaskPriorityDisinherit+0xae>
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	43da      	mvns	r2, r3
 8009bc4:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <xTaskPriorityDisinherit+0x108>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4013      	ands	r3, r2
 8009bca:	4a17      	ldr	r2, [pc, #92]	; (8009c28 <xTaskPriorityDisinherit+0x108>)
 8009bcc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	f1c3 0207 	rsb	r2, r3, #7
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be6:	2201      	movs	r2, #1
 8009be8:	409a      	lsls	r2, r3
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <xTaskPriorityDisinherit+0x108>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	4a0d      	ldr	r2, [pc, #52]	; (8009c28 <xTaskPriorityDisinherit+0x108>)
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4a08      	ldr	r2, [pc, #32]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009c02:	441a      	add	r2, r3
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7fe f91c 	bl	8007e48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c14:	697b      	ldr	r3, [r7, #20]
	}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200012f4 	.word	0x200012f4
 8009c24:	200012f8 	.word	0x200012f8
 8009c28:	200013fc 	.word	0x200013fc

08009c2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8088 	beq.w	8009d56 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d902      	bls.n	8009c74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	61fb      	str	r3, [r7, #28]
 8009c72:	e002      	b.n	8009c7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d068      	beq.n	8009d56 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d163      	bne.n	8009d56 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c8e:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d10a      	bne.n	8009cae <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	60bb      	str	r3, [r7, #8]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	69fa      	ldr	r2, [r7, #28]
 8009cb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	db04      	blt.n	8009ccc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	f1c3 0207 	rsb	r2, r3, #7
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	6959      	ldr	r1, [r3, #20]
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4a22      	ldr	r2, [pc, #136]	; (8009d64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009cdc:	4413      	add	r3, r2
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	d101      	bne.n	8009ce6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d034      	beq.n	8009d56 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe f904 	bl	8007efe <uxListRemove>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d115      	bne.n	8009d28 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d00:	4918      	ldr	r1, [pc, #96]	; (8009d64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d02:	4613      	mov	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	2201      	movs	r2, #1
 8009d18:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1c:	43da      	mvns	r2, r3
 8009d1e:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4013      	ands	r3, r2
 8009d24:	4a10      	ldr	r2, [pc, #64]	; (8009d68 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009d26:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	409a      	lsls	r2, r3
 8009d30:	4b0d      	ldr	r3, [pc, #52]	; (8009d68 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	4a0c      	ldr	r2, [pc, #48]	; (8009d68 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4a07      	ldr	r2, [pc, #28]	; (8009d64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d48:	441a      	add	r2, r3
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7fe f879 	bl	8007e48 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d56:	bf00      	nop
 8009d58:	3720      	adds	r7, #32
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	200012f4 	.word	0x200012f4
 8009d64:	200012f8 	.word	0x200012f8
 8009d68:	200013fc 	.word	0x200013fc

08009d6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d78:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d7e:	3201      	adds	r2, #1
 8009d80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009d82:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d84:	681b      	ldr	r3, [r3, #0]
	}
 8009d86:	4618      	mov	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	200012f4 	.word	0x200012f4

08009d94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d9e:	4b29      	ldr	r3, [pc, #164]	; (8009e44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da4:	4b28      	ldr	r3, [pc, #160]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3304      	adds	r3, #4
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe f8a7 	bl	8007efe <uxListRemove>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10b      	bne.n	8009dce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009db6:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc2:	43da      	mvns	r2, r3
 8009dc4:	4b21      	ldr	r3, [pc, #132]	; (8009e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4013      	ands	r3, r2
 8009dca:	4a20      	ldr	r2, [pc, #128]	; (8009e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d10a      	bne.n	8009dec <prvAddCurrentTaskToDelayedList+0x58>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d007      	beq.n	8009dec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ddc:	4b1a      	ldr	r3, [pc, #104]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4619      	mov	r1, r3
 8009de4:	481a      	ldr	r0, [pc, #104]	; (8009e50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009de6:	f7fe f82f 	bl	8007e48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dea:	e026      	b.n	8009e3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4413      	add	r3, r2
 8009df2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009df4:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d209      	bcs.n	8009e18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e04:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b0f      	ldr	r3, [pc, #60]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fe f83c 	bl	8007e8e <vListInsert>
}
 8009e16:	e010      	b.n	8009e3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e18:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3304      	adds	r3, #4
 8009e22:	4619      	mov	r1, r3
 8009e24:	4610      	mov	r0, r2
 8009e26:	f7fe f832 	bl	8007e8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d202      	bcs.n	8009e3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e34:	4a09      	ldr	r2, [pc, #36]	; (8009e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6013      	str	r3, [r2, #0]
}
 8009e3a:	bf00      	nop
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	200013f8 	.word	0x200013f8
 8009e48:	200012f4 	.word	0x200012f4
 8009e4c:	200013fc 	.word	0x200013fc
 8009e50:	200013e0 	.word	0x200013e0
 8009e54:	200013b0 	.word	0x200013b0
 8009e58:	200013ac 	.word	0x200013ac
 8009e5c:	20001414 	.word	0x20001414

08009e60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3b04      	subs	r3, #4
 8009e70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3b04      	subs	r3, #4
 8009e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f023 0201 	bic.w	r2, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e90:	4a08      	ldr	r2, [pc, #32]	; (8009eb4 <pxPortInitialiseStack+0x54>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3b14      	subs	r3, #20
 8009e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3b20      	subs	r3, #32
 8009ea6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bc80      	pop	{r7}
 8009eb2:	4770      	bx	lr
 8009eb4:	08009eb9 	.word	0x08009eb9

08009eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <prvTaskExitError+0x54>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eca:	d00a      	beq.n	8009ee2 <prvTaskExitError+0x2a>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	60fb      	str	r3, [r7, #12]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <prvTaskExitError+0x28>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	60bb      	str	r3, [r7, #8]
}
 8009ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ef6:	bf00      	nop
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0fc      	beq.n	8009ef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009efe:	bf00      	nop
 8009f00:	bf00      	nop
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	200000dc 	.word	0x200000dc

08009f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <pxCurrentTCBConst2>)
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f1a:	f380 8809 	msr	PSP, r0
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8811 	msr	BASEPRI, r0
 8009f2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009f2e:	4770      	bx	lr

08009f30 <pxCurrentTCBConst2>:
 8009f30:	200012f4 	.word	0x200012f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009f38:	4806      	ldr	r0, [pc, #24]	; (8009f54 <prvPortStartFirstTask+0x1c>)
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f380 8808 	msr	MSP, r0
 8009f42:	b662      	cpsie	i
 8009f44:	b661      	cpsie	f
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	df00      	svc	0
 8009f50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f52:	bf00      	nop
 8009f54:	e000ed08 	.word	0xe000ed08

08009f58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f5e:	4b32      	ldr	r3, [pc, #200]	; (800a028 <xPortStartScheduler+0xd0>)
 8009f60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	22ff      	movs	r2, #255	; 0xff
 8009f6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	4b2a      	ldr	r3, [pc, #168]	; (800a02c <xPortStartScheduler+0xd4>)
 8009f84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f86:	4b2a      	ldr	r3, [pc, #168]	; (800a030 <xPortStartScheduler+0xd8>)
 8009f88:	2207      	movs	r2, #7
 8009f8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f8c:	e009      	b.n	8009fa2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009f8e:	4b28      	ldr	r3, [pc, #160]	; (800a030 <xPortStartScheduler+0xd8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	4a26      	ldr	r2, [pc, #152]	; (800a030 <xPortStartScheduler+0xd8>)
 8009f96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009faa:	2b80      	cmp	r3, #128	; 0x80
 8009fac:	d0ef      	beq.n	8009f8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fae:	4b20      	ldr	r3, [pc, #128]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f1c3 0307 	rsb	r3, r3, #7
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d00a      	beq.n	8009fd0 <xPortStartScheduler+0x78>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	60bb      	str	r3, [r7, #8]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fd0:	4b17      	ldr	r3, [pc, #92]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	4a16      	ldr	r2, [pc, #88]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fda:	4b15      	ldr	r3, [pc, #84]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fe2:	4a13      	ldr	r2, [pc, #76]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fe4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <xPortStartScheduler+0xdc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a10      	ldr	r2, [pc, #64]	; (800a034 <xPortStartScheduler+0xdc>)
 8009ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ff8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ffa:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <xPortStartScheduler+0xdc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a0d      	ldr	r2, [pc, #52]	; (800a034 <xPortStartScheduler+0xdc>)
 800a000:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a004:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a006:	f000 f8b9 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <xPortStartScheduler+0xe0>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a010:	f7ff ff92 	bl	8009f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a014:	f7ff faa2 	bl	800955c <vTaskSwitchContext>
	prvTaskExitError();
 800a018:	f7ff ff4e 	bl	8009eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	e000e400 	.word	0xe000e400
 800a02c:	20001420 	.word	0x20001420
 800a030:	20001424 	.word	0x20001424
 800a034:	e000ed20 	.word	0xe000ed20
 800a038:	200000dc 	.word	0x200000dc

0800a03c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	607b      	str	r3, [r7, #4]
}
 800a054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a056:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <vPortEnterCritical+0x58>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3301      	adds	r3, #1
 800a05c:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <vPortEnterCritical+0x58>)
 800a05e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a060:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <vPortEnterCritical+0x58>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d10f      	bne.n	800a088 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <vPortEnterCritical+0x5c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <vPortEnterCritical+0x4c>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	603b      	str	r3, [r7, #0]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <vPortEnterCritical+0x4a>
	}
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bc80      	pop	{r7}
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	200000dc 	.word	0x200000dc
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0a2:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10a      	bne.n	800a0c0 <vPortExitCritical+0x24>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	4a08      	ldr	r2, [pc, #32]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0ca:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <vPortExitCritical+0x42>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	f383 8811 	msr	BASEPRI, r3
}
 800a0dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bc80      	pop	{r7}
 800a0e6:	4770      	bx	lr
 800a0e8:	200000dc 	.word	0x200000dc
 800a0ec:	00000000 	.word	0x00000000

0800a0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0f0:	f3ef 8009 	mrs	r0, PSP
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <pxCurrentTCBConst>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a100:	6010      	str	r0, [r2, #0]
 800a102:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a106:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a10a:	f380 8811 	msr	BASEPRI, r0
 800a10e:	f7ff fa25 	bl	800955c <vTaskSwitchContext>
 800a112:	f04f 0000 	mov.w	r0, #0
 800a116:	f380 8811 	msr	BASEPRI, r0
 800a11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a11e:	6819      	ldr	r1, [r3, #0]
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a126:	f380 8809 	msr	PSP, r0
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	4770      	bx	lr

0800a130 <pxCurrentTCBConst>:
 800a130:	200012f4 	.word	0x200012f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7ff f945 	bl	80093e0 <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <SysTick_Handler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <vPortSetupTimerInterrupt+0x30>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a09      	ldr	r2, [pc, #36]	; (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <vPortSetupTimerInterrupt+0x30>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr
 800a1ac:	e000e010 	.word	0xe000e010
 800a1b0:	e000e018 	.word	0xe000e018
 800a1b4:	200000b8 	.word	0x200000b8
 800a1b8:	10624dd3 	.word	0x10624dd3
 800a1bc:	e000e014 	.word	0xe000e014

0800a1c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1c6:	f3ef 8305 	mrs	r3, IPSR
 800a1ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d914      	bls.n	800a1fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1d2:	4a16      	ldr	r2, [pc, #88]	; (800a22c <vPortValidateInterruptPriority+0x6c>)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <vPortValidateInterruptPriority+0x70>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	7afa      	ldrb	r2, [r7, #11]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d20a      	bcs.n	800a1fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	607b      	str	r3, [r7, #4]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <vPortValidateInterruptPriority+0x74>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a204:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <vPortValidateInterruptPriority+0x78>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d90a      	bls.n	800a222 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	603b      	str	r3, [r7, #0]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <vPortValidateInterruptPriority+0x60>
	}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr
 800a22c:	e000e3f0 	.word	0xe000e3f0
 800a230:	20001420 	.word	0x20001420
 800a234:	e000ed0c 	.word	0xe000ed0c
 800a238:	20001424 	.word	0x20001424

0800a23c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	; 0x28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a248:	f7ff f820 	bl	800928c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a24c:	4b58      	ldr	r3, [pc, #352]	; (800a3b0 <pvPortMalloc+0x174>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a254:	f000 f910 	bl	800a478 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a258:	4b56      	ldr	r3, [pc, #344]	; (800a3b4 <pvPortMalloc+0x178>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4013      	ands	r3, r2
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 808e 	bne.w	800a382 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01d      	beq.n	800a2a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a26c:	2208      	movs	r2, #8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d014      	beq.n	800a2a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	3308      	adds	r3, #8
 800a286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <pvPortMalloc+0x6c>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	617b      	str	r3, [r7, #20]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d069      	beq.n	800a382 <pvPortMalloc+0x146>
 800a2ae:	4b42      	ldr	r3, [pc, #264]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d864      	bhi.n	800a382 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2b8:	4b40      	ldr	r3, [pc, #256]	; (800a3bc <pvPortMalloc+0x180>)
 800a2ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2bc:	4b3f      	ldr	r3, [pc, #252]	; (800a3bc <pvPortMalloc+0x180>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2c2:	e004      	b.n	800a2ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d903      	bls.n	800a2e0 <pvPortMalloc+0xa4>
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f1      	bne.n	800a2c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2e0:	4b33      	ldr	r3, [pc, #204]	; (800a3b0 <pvPortMalloc+0x174>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d04b      	beq.n	800a382 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2208      	movs	r2, #8
 800a2f0:	4413      	add	r3, r2
 800a2f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	1ad2      	subs	r2, r2, r3
 800a304:	2308      	movs	r3, #8
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	429a      	cmp	r2, r3
 800a30a:	d91f      	bls.n	800a34c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4413      	add	r3, r2
 800a312:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <pvPortMalloc+0xf8>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	613b      	str	r3, [r7, #16]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	1ad2      	subs	r2, r2, r3
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a346:	69b8      	ldr	r0, [r7, #24]
 800a348:	f000 f8f8 	bl	800a53c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a34c:	4b1a      	ldr	r3, [pc, #104]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	4a18      	ldr	r2, [pc, #96]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a358:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a35a:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	4b18      	ldr	r3, [pc, #96]	; (800a3c0 <pvPortMalloc+0x184>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d203      	bcs.n	800a36e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a366:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a15      	ldr	r2, [pc, #84]	; (800a3c0 <pvPortMalloc+0x184>)
 800a36c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	4b10      	ldr	r3, [pc, #64]	; (800a3b4 <pvPortMalloc+0x178>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	431a      	orrs	r2, r3
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a382:	f7fe ff91 	bl	80092a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	f003 0307 	and.w	r3, r3, #7
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00a      	beq.n	800a3a6 <pvPortMalloc+0x16a>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	60fb      	str	r3, [r7, #12]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <pvPortMalloc+0x168>
	return pvReturn;
 800a3a6:	69fb      	ldr	r3, [r7, #28]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3728      	adds	r7, #40	; 0x28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20004430 	.word	0x20004430
 800a3b4:	2000443c 	.word	0x2000443c
 800a3b8:	20004434 	.word	0x20004434
 800a3bc:	20004428 	.word	0x20004428
 800a3c0:	20004438 	.word	0x20004438

0800a3c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d048      	beq.n	800a468 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3d6:	2308      	movs	r3, #8
 800a3d8:	425b      	negs	r3, r3
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4413      	add	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	4b21      	ldr	r3, [pc, #132]	; (800a470 <vPortFree+0xac>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <vPortFree+0x44>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	60fb      	str	r3, [r7, #12]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00a      	beq.n	800a426 <vPortFree+0x62>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60bb      	str	r3, [r7, #8]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <vPortFree+0xac>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4013      	ands	r3, r2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d019      	beq.n	800a468 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d115      	bne.n	800a468 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <vPortFree+0xac>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	43db      	mvns	r3, r3
 800a446:	401a      	ands	r2, r3
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a44c:	f7fe ff1e 	bl	800928c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	4b07      	ldr	r3, [pc, #28]	; (800a474 <vPortFree+0xb0>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	4a06      	ldr	r2, [pc, #24]	; (800a474 <vPortFree+0xb0>)
 800a45c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f000 f86c 	bl	800a53c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a464:	f7fe ff20 	bl	80092a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a468:	bf00      	nop
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	2000443c 	.word	0x2000443c
 800a474:	20004434 	.word	0x20004434

0800a478 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a47e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a482:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a484:	4b27      	ldr	r3, [pc, #156]	; (800a524 <prvHeapInit+0xac>)
 800a486:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00c      	beq.n	800a4ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3307      	adds	r3, #7
 800a496:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0307 	bic.w	r3, r3, #7
 800a49e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <prvHeapInit+0xac>)
 800a4a8:	4413      	add	r3, r2
 800a4aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4b0:	4a1d      	ldr	r2, [pc, #116]	; (800a528 <prvHeapInit+0xb0>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4b6:	4b1c      	ldr	r3, [pc, #112]	; (800a528 <prvHeapInit+0xb0>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4a15      	ldr	r2, [pc, #84]	; (800a52c <prvHeapInit+0xb4>)
 800a4d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4da:	4b14      	ldr	r3, [pc, #80]	; (800a52c <prvHeapInit+0xb4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <prvHeapInit+0xb4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	1ad2      	subs	r2, r2, r3
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <prvHeapInit+0xb4>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	4a0a      	ldr	r2, [pc, #40]	; (800a530 <prvHeapInit+0xb8>)
 800a506:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4a09      	ldr	r2, [pc, #36]	; (800a534 <prvHeapInit+0xbc>)
 800a50e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a510:	4b09      	ldr	r3, [pc, #36]	; (800a538 <prvHeapInit+0xc0>)
 800a512:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a516:	601a      	str	r2, [r3, #0]
}
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	20001428 	.word	0x20001428
 800a528:	20004428 	.word	0x20004428
 800a52c:	20004430 	.word	0x20004430
 800a530:	20004438 	.word	0x20004438
 800a534:	20004434 	.word	0x20004434
 800a538:	2000443c 	.word	0x2000443c

0800a53c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a544:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <prvInsertBlockIntoFreeList+0xa8>)
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e002      	b.n	800a550 <prvInsertBlockIntoFreeList+0x14>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d8f7      	bhi.n	800a54a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	4413      	add	r3, r2
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d108      	bne.n	800a57e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	441a      	add	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	441a      	add	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d118      	bne.n	800a5c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <prvInsertBlockIntoFreeList+0xac>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d00d      	beq.n	800a5ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	441a      	add	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e008      	b.n	800a5cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <prvInsertBlockIntoFreeList+0xac>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	e003      	b.n	800a5cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d002      	beq.n	800a5da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5da:	bf00      	nop
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr
 800a5e4:	20004428 	.word	0x20004428
 800a5e8:	20004430 	.word	0x20004430

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	; (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	200000e0 	.word	0x200000e0

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	2600      	movs	r6, #0
 800a5fc:	4d0c      	ldr	r5, [pc, #48]	; (800a630 <__libc_init_array+0x38>)
 800a5fe:	4c0d      	ldr	r4, [pc, #52]	; (800a634 <__libc_init_array+0x3c>)
 800a600:	1b64      	subs	r4, r4, r5
 800a602:	10a4      	asrs	r4, r4, #2
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	f000 fca4 	bl	800af54 <_init>
 800a60c:	2600      	movs	r6, #0
 800a60e:	4d0a      	ldr	r5, [pc, #40]	; (800a638 <__libc_init_array+0x40>)
 800a610:	4c0a      	ldr	r4, [pc, #40]	; (800a63c <__libc_init_array+0x44>)
 800a612:	1b64      	subs	r4, r4, r5
 800a614:	10a4      	asrs	r4, r4, #2
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	0800b21c 	.word	0x0800b21c
 800a634:	0800b21c 	.word	0x0800b21c
 800a638:	0800b21c 	.word	0x0800b21c
 800a63c:	0800b220 	.word	0x0800b220

0800a640 <memcpy>:
 800a640:	440a      	add	r2, r1
 800a642:	4291      	cmp	r1, r2
 800a644:	f100 33ff 	add.w	r3, r0, #4294967295
 800a648:	d100      	bne.n	800a64c <memcpy+0xc>
 800a64a:	4770      	bx	lr
 800a64c:	b510      	push	{r4, lr}
 800a64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a652:	4291      	cmp	r1, r2
 800a654:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a658:	d1f9      	bne.n	800a64e <memcpy+0xe>
 800a65a:	bd10      	pop	{r4, pc}

0800a65c <memset>:
 800a65c:	4603      	mov	r3, r0
 800a65e:	4402      	add	r2, r0
 800a660:	4293      	cmp	r3, r2
 800a662:	d100      	bne.n	800a666 <memset+0xa>
 800a664:	4770      	bx	lr
 800a666:	f803 1b01 	strb.w	r1, [r3], #1
 800a66a:	e7f9      	b.n	800a660 <memset+0x4>

0800a66c <siprintf>:
 800a66c:	b40e      	push	{r1, r2, r3}
 800a66e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a672:	b500      	push	{lr}
 800a674:	b09c      	sub	sp, #112	; 0x70
 800a676:	ab1d      	add	r3, sp, #116	; 0x74
 800a678:	9002      	str	r0, [sp, #8]
 800a67a:	9006      	str	r0, [sp, #24]
 800a67c:	9107      	str	r1, [sp, #28]
 800a67e:	9104      	str	r1, [sp, #16]
 800a680:	4808      	ldr	r0, [pc, #32]	; (800a6a4 <siprintf+0x38>)
 800a682:	4909      	ldr	r1, [pc, #36]	; (800a6a8 <siprintf+0x3c>)
 800a684:	f853 2b04 	ldr.w	r2, [r3], #4
 800a688:	9105      	str	r1, [sp, #20]
 800a68a:	6800      	ldr	r0, [r0, #0]
 800a68c:	a902      	add	r1, sp, #8
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	f000 f870 	bl	800a774 <_svfiprintf_r>
 800a694:	2200      	movs	r2, #0
 800a696:	9b02      	ldr	r3, [sp, #8]
 800a698:	701a      	strb	r2, [r3, #0]
 800a69a:	b01c      	add	sp, #112	; 0x70
 800a69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a0:	b003      	add	sp, #12
 800a6a2:	4770      	bx	lr
 800a6a4:	200000e0 	.word	0x200000e0
 800a6a8:	ffff0208 	.word	0xffff0208

0800a6ac <strcpy>:
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6b2:	f803 2b01 	strb.w	r2, [r3], #1
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1f9      	bne.n	800a6ae <strcpy+0x2>
 800a6ba:	4770      	bx	lr

0800a6bc <__ssputs_r>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	688e      	ldr	r6, [r1, #8]
 800a6c2:	4682      	mov	sl, r0
 800a6c4:	429e      	cmp	r6, r3
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	4690      	mov	r8, r2
 800a6ca:	461f      	mov	r7, r3
 800a6cc:	d838      	bhi.n	800a740 <__ssputs_r+0x84>
 800a6ce:	898a      	ldrh	r2, [r1, #12]
 800a6d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d4:	d032      	beq.n	800a73c <__ssputs_r+0x80>
 800a6d6:	6825      	ldr	r5, [r4, #0]
 800a6d8:	6909      	ldr	r1, [r1, #16]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	eba5 0901 	sub.w	r9, r5, r1
 800a6e0:	6965      	ldr	r5, [r4, #20]
 800a6e2:	444b      	add	r3, r9
 800a6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ec:	106d      	asrs	r5, r5, #1
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	bf38      	it	cc
 800a6f2:	461d      	movcc	r5, r3
 800a6f4:	0553      	lsls	r3, r2, #21
 800a6f6:	d531      	bpl.n	800a75c <__ssputs_r+0xa0>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f000 fb61 	bl	800adc0 <_malloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	b950      	cbnz	r0, 800a718 <__ssputs_r+0x5c>
 800a702:	230c      	movs	r3, #12
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	f8ca 3000 	str.w	r3, [sl]
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a712:	81a3      	strh	r3, [r4, #12]
 800a714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a718:	464a      	mov	r2, r9
 800a71a:	6921      	ldr	r1, [r4, #16]
 800a71c:	f7ff ff90 	bl	800a640 <memcpy>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	6126      	str	r6, [r4, #16]
 800a72e:	444e      	add	r6, r9
 800a730:	6026      	str	r6, [r4, #0]
 800a732:	463e      	mov	r6, r7
 800a734:	6165      	str	r5, [r4, #20]
 800a736:	eba5 0509 	sub.w	r5, r5, r9
 800a73a:	60a5      	str	r5, [r4, #8]
 800a73c:	42be      	cmp	r6, r7
 800a73e:	d900      	bls.n	800a742 <__ssputs_r+0x86>
 800a740:	463e      	mov	r6, r7
 800a742:	4632      	mov	r2, r6
 800a744:	4641      	mov	r1, r8
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	f000 fab8 	bl	800acbc <memmove>
 800a74c:	68a3      	ldr	r3, [r4, #8]
 800a74e:	2000      	movs	r0, #0
 800a750:	1b9b      	subs	r3, r3, r6
 800a752:	60a3      	str	r3, [r4, #8]
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	4433      	add	r3, r6
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	e7db      	b.n	800a714 <__ssputs_r+0x58>
 800a75c:	462a      	mov	r2, r5
 800a75e:	f000 fba3 	bl	800aea8 <_realloc_r>
 800a762:	4606      	mov	r6, r0
 800a764:	2800      	cmp	r0, #0
 800a766:	d1e1      	bne.n	800a72c <__ssputs_r+0x70>
 800a768:	4650      	mov	r0, sl
 800a76a:	6921      	ldr	r1, [r4, #16]
 800a76c:	f000 fac0 	bl	800acf0 <_free_r>
 800a770:	e7c7      	b.n	800a702 <__ssputs_r+0x46>
	...

0800a774 <_svfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	4698      	mov	r8, r3
 800a77a:	898b      	ldrh	r3, [r1, #12]
 800a77c:	4607      	mov	r7, r0
 800a77e:	061b      	lsls	r3, r3, #24
 800a780:	460d      	mov	r5, r1
 800a782:	4614      	mov	r4, r2
 800a784:	b09d      	sub	sp, #116	; 0x74
 800a786:	d50e      	bpl.n	800a7a6 <_svfiprintf_r+0x32>
 800a788:	690b      	ldr	r3, [r1, #16]
 800a78a:	b963      	cbnz	r3, 800a7a6 <_svfiprintf_r+0x32>
 800a78c:	2140      	movs	r1, #64	; 0x40
 800a78e:	f000 fb17 	bl	800adc0 <_malloc_r>
 800a792:	6028      	str	r0, [r5, #0]
 800a794:	6128      	str	r0, [r5, #16]
 800a796:	b920      	cbnz	r0, 800a7a2 <_svfiprintf_r+0x2e>
 800a798:	230c      	movs	r3, #12
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	e0d1      	b.n	800a946 <_svfiprintf_r+0x1d2>
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	616b      	str	r3, [r5, #20]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7aa:	2320      	movs	r3, #32
 800a7ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b0:	2330      	movs	r3, #48	; 0x30
 800a7b2:	f04f 0901 	mov.w	r9, #1
 800a7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a960 <_svfiprintf_r+0x1ec>
 800a7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c2:	4623      	mov	r3, r4
 800a7c4:	469a      	mov	sl, r3
 800a7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ca:	b10a      	cbz	r2, 800a7d0 <_svfiprintf_r+0x5c>
 800a7cc:	2a25      	cmp	r2, #37	; 0x25
 800a7ce:	d1f9      	bne.n	800a7c4 <_svfiprintf_r+0x50>
 800a7d0:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d4:	d00b      	beq.n	800a7ee <_svfiprintf_r+0x7a>
 800a7d6:	465b      	mov	r3, fp
 800a7d8:	4622      	mov	r2, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	4638      	mov	r0, r7
 800a7de:	f7ff ff6d 	bl	800a6bc <__ssputs_r>
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f000 80aa 	beq.w	800a93c <_svfiprintf_r+0x1c8>
 800a7e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ea:	445a      	add	r2, fp
 800a7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 80a2 	beq.w	800a93c <_svfiprintf_r+0x1c8>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a802:	f10a 0a01 	add.w	sl, sl, #1
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80e:	931a      	str	r3, [sp, #104]	; 0x68
 800a810:	4654      	mov	r4, sl
 800a812:	2205      	movs	r2, #5
 800a814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a818:	4851      	ldr	r0, [pc, #324]	; (800a960 <_svfiprintf_r+0x1ec>)
 800a81a:	f000 fa41 	bl	800aca0 <memchr>
 800a81e:	9a04      	ldr	r2, [sp, #16]
 800a820:	b9d8      	cbnz	r0, 800a85a <_svfiprintf_r+0xe6>
 800a822:	06d0      	lsls	r0, r2, #27
 800a824:	bf44      	itt	mi
 800a826:	2320      	movmi	r3, #32
 800a828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82c:	0711      	lsls	r1, r2, #28
 800a82e:	bf44      	itt	mi
 800a830:	232b      	movmi	r3, #43	; 0x2b
 800a832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a836:	f89a 3000 	ldrb.w	r3, [sl]
 800a83a:	2b2a      	cmp	r3, #42	; 0x2a
 800a83c:	d015      	beq.n	800a86a <_svfiprintf_r+0xf6>
 800a83e:	4654      	mov	r4, sl
 800a840:	2000      	movs	r0, #0
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	9a07      	ldr	r2, [sp, #28]
 800a848:	4621      	mov	r1, r4
 800a84a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84e:	3b30      	subs	r3, #48	; 0x30
 800a850:	2b09      	cmp	r3, #9
 800a852:	d94e      	bls.n	800a8f2 <_svfiprintf_r+0x17e>
 800a854:	b1b0      	cbz	r0, 800a884 <_svfiprintf_r+0x110>
 800a856:	9207      	str	r2, [sp, #28]
 800a858:	e014      	b.n	800a884 <_svfiprintf_r+0x110>
 800a85a:	eba0 0308 	sub.w	r3, r0, r8
 800a85e:	fa09 f303 	lsl.w	r3, r9, r3
 800a862:	4313      	orrs	r3, r2
 800a864:	46a2      	mov	sl, r4
 800a866:	9304      	str	r3, [sp, #16]
 800a868:	e7d2      	b.n	800a810 <_svfiprintf_r+0x9c>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	1d19      	adds	r1, r3, #4
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	9103      	str	r1, [sp, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	bfbb      	ittet	lt
 800a876:	425b      	neglt	r3, r3
 800a878:	f042 0202 	orrlt.w	r2, r2, #2
 800a87c:	9307      	strge	r3, [sp, #28]
 800a87e:	9307      	strlt	r3, [sp, #28]
 800a880:	bfb8      	it	lt
 800a882:	9204      	strlt	r2, [sp, #16]
 800a884:	7823      	ldrb	r3, [r4, #0]
 800a886:	2b2e      	cmp	r3, #46	; 0x2e
 800a888:	d10c      	bne.n	800a8a4 <_svfiprintf_r+0x130>
 800a88a:	7863      	ldrb	r3, [r4, #1]
 800a88c:	2b2a      	cmp	r3, #42	; 0x2a
 800a88e:	d135      	bne.n	800a8fc <_svfiprintf_r+0x188>
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	3402      	adds	r4, #2
 800a894:	1d1a      	adds	r2, r3, #4
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	9203      	str	r2, [sp, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bfb8      	it	lt
 800a89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a964 <_svfiprintf_r+0x1f0>
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	7821      	ldrb	r1, [r4, #0]
 800a8ae:	f000 f9f7 	bl	800aca0 <memchr>
 800a8b2:	b140      	cbz	r0, 800a8c6 <_svfiprintf_r+0x152>
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	eba0 000a 	sub.w	r0, r0, sl
 800a8ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a8be:	9b04      	ldr	r3, [sp, #16]
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	4303      	orrs	r3, r0
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ca:	2206      	movs	r2, #6
 800a8cc:	4826      	ldr	r0, [pc, #152]	; (800a968 <_svfiprintf_r+0x1f4>)
 800a8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d2:	f000 f9e5 	bl	800aca0 <memchr>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d038      	beq.n	800a94c <_svfiprintf_r+0x1d8>
 800a8da:	4b24      	ldr	r3, [pc, #144]	; (800a96c <_svfiprintf_r+0x1f8>)
 800a8dc:	bb1b      	cbnz	r3, 800a926 <_svfiprintf_r+0x1b2>
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	3307      	adds	r3, #7
 800a8e2:	f023 0307 	bic.w	r3, r3, #7
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	9303      	str	r3, [sp, #12]
 800a8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ec:	4433      	add	r3, r6
 800a8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f0:	e767      	b.n	800a7c2 <_svfiprintf_r+0x4e>
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fa:	e7a5      	b.n	800a848 <_svfiprintf_r+0xd4>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4619      	mov	r1, r3
 800a904:	3401      	adds	r4, #1
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	4620      	mov	r0, r4
 800a90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90e:	3a30      	subs	r2, #48	; 0x30
 800a910:	2a09      	cmp	r2, #9
 800a912:	d903      	bls.n	800a91c <_svfiprintf_r+0x1a8>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0c5      	beq.n	800a8a4 <_svfiprintf_r+0x130>
 800a918:	9105      	str	r1, [sp, #20]
 800a91a:	e7c3      	b.n	800a8a4 <_svfiprintf_r+0x130>
 800a91c:	4604      	mov	r4, r0
 800a91e:	2301      	movs	r3, #1
 800a920:	fb0c 2101 	mla	r1, ip, r1, r2
 800a924:	e7f0      	b.n	800a908 <_svfiprintf_r+0x194>
 800a926:	ab03      	add	r3, sp, #12
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	462a      	mov	r2, r5
 800a92c:	4638      	mov	r0, r7
 800a92e:	4b10      	ldr	r3, [pc, #64]	; (800a970 <_svfiprintf_r+0x1fc>)
 800a930:	a904      	add	r1, sp, #16
 800a932:	f3af 8000 	nop.w
 800a936:	1c42      	adds	r2, r0, #1
 800a938:	4606      	mov	r6, r0
 800a93a:	d1d6      	bne.n	800a8ea <_svfiprintf_r+0x176>
 800a93c:	89ab      	ldrh	r3, [r5, #12]
 800a93e:	065b      	lsls	r3, r3, #25
 800a940:	f53f af2c 	bmi.w	800a79c <_svfiprintf_r+0x28>
 800a944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a946:	b01d      	add	sp, #116	; 0x74
 800a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94c:	ab03      	add	r3, sp, #12
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	462a      	mov	r2, r5
 800a952:	4638      	mov	r0, r7
 800a954:	4b06      	ldr	r3, [pc, #24]	; (800a970 <_svfiprintf_r+0x1fc>)
 800a956:	a904      	add	r1, sp, #16
 800a958:	f000 f87c 	bl	800aa54 <_printf_i>
 800a95c:	e7eb      	b.n	800a936 <_svfiprintf_r+0x1c2>
 800a95e:	bf00      	nop
 800a960:	0800b1e0 	.word	0x0800b1e0
 800a964:	0800b1e6 	.word	0x0800b1e6
 800a968:	0800b1ea 	.word	0x0800b1ea
 800a96c:	00000000 	.word	0x00000000
 800a970:	0800a6bd 	.word	0x0800a6bd

0800a974 <_printf_common>:
 800a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a978:	4616      	mov	r6, r2
 800a97a:	4699      	mov	r9, r3
 800a97c:	688a      	ldr	r2, [r1, #8]
 800a97e:	690b      	ldr	r3, [r1, #16]
 800a980:	4607      	mov	r7, r0
 800a982:	4293      	cmp	r3, r2
 800a984:	bfb8      	it	lt
 800a986:	4613      	movlt	r3, r2
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a98e:	460c      	mov	r4, r1
 800a990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a994:	b10a      	cbz	r2, 800a99a <_printf_common+0x26>
 800a996:	3301      	adds	r3, #1
 800a998:	6033      	str	r3, [r6, #0]
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	0699      	lsls	r1, r3, #26
 800a99e:	bf42      	ittt	mi
 800a9a0:	6833      	ldrmi	r3, [r6, #0]
 800a9a2:	3302      	addmi	r3, #2
 800a9a4:	6033      	strmi	r3, [r6, #0]
 800a9a6:	6825      	ldr	r5, [r4, #0]
 800a9a8:	f015 0506 	ands.w	r5, r5, #6
 800a9ac:	d106      	bne.n	800a9bc <_printf_common+0x48>
 800a9ae:	f104 0a19 	add.w	sl, r4, #25
 800a9b2:	68e3      	ldr	r3, [r4, #12]
 800a9b4:	6832      	ldr	r2, [r6, #0]
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	dc28      	bgt.n	800aa0e <_printf_common+0x9a>
 800a9bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9c0:	1e13      	subs	r3, r2, #0
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	bf18      	it	ne
 800a9c6:	2301      	movne	r3, #1
 800a9c8:	0692      	lsls	r2, r2, #26
 800a9ca:	d42d      	bmi.n	800aa28 <_printf_common+0xb4>
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9d4:	47c0      	blx	r8
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d020      	beq.n	800aa1c <_printf_common+0xa8>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	68e5      	ldr	r5, [r4, #12]
 800a9de:	f003 0306 	and.w	r3, r3, #6
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	bf18      	it	ne
 800a9e6:	2500      	movne	r5, #0
 800a9e8:	6832      	ldr	r2, [r6, #0]
 800a9ea:	f04f 0600 	mov.w	r6, #0
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	bf08      	it	eq
 800a9f2:	1aad      	subeq	r5, r5, r2
 800a9f4:	6922      	ldr	r2, [r4, #16]
 800a9f6:	bf08      	it	eq
 800a9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	bfc4      	itt	gt
 800aa00:	1a9b      	subgt	r3, r3, r2
 800aa02:	18ed      	addgt	r5, r5, r3
 800aa04:	341a      	adds	r4, #26
 800aa06:	42b5      	cmp	r5, r6
 800aa08:	d11a      	bne.n	800aa40 <_printf_common+0xcc>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e008      	b.n	800aa20 <_printf_common+0xac>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4652      	mov	r2, sl
 800aa12:	4649      	mov	r1, r9
 800aa14:	4638      	mov	r0, r7
 800aa16:	47c0      	blx	r8
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d103      	bne.n	800aa24 <_printf_common+0xb0>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	3501      	adds	r5, #1
 800aa26:	e7c4      	b.n	800a9b2 <_printf_common+0x3e>
 800aa28:	2030      	movs	r0, #48	; 0x30
 800aa2a:	18e1      	adds	r1, r4, r3
 800aa2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa36:	4422      	add	r2, r4
 800aa38:	3302      	adds	r3, #2
 800aa3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa3e:	e7c5      	b.n	800a9cc <_printf_common+0x58>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4622      	mov	r2, r4
 800aa44:	4649      	mov	r1, r9
 800aa46:	4638      	mov	r0, r7
 800aa48:	47c0      	blx	r8
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d0e6      	beq.n	800aa1c <_printf_common+0xa8>
 800aa4e:	3601      	adds	r6, #1
 800aa50:	e7d9      	b.n	800aa06 <_printf_common+0x92>
	...

0800aa54 <_printf_i>:
 800aa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	7e0f      	ldrb	r7, [r1, #24]
 800aa5a:	4691      	mov	r9, r2
 800aa5c:	2f78      	cmp	r7, #120	; 0x78
 800aa5e:	4680      	mov	r8, r0
 800aa60:	460c      	mov	r4, r1
 800aa62:	469a      	mov	sl, r3
 800aa64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa6a:	d807      	bhi.n	800aa7c <_printf_i+0x28>
 800aa6c:	2f62      	cmp	r7, #98	; 0x62
 800aa6e:	d80a      	bhi.n	800aa86 <_printf_i+0x32>
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	f000 80d9 	beq.w	800ac28 <_printf_i+0x1d4>
 800aa76:	2f58      	cmp	r7, #88	; 0x58
 800aa78:	f000 80a4 	beq.w	800abc4 <_printf_i+0x170>
 800aa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa84:	e03a      	b.n	800aafc <_printf_i+0xa8>
 800aa86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa8a:	2b15      	cmp	r3, #21
 800aa8c:	d8f6      	bhi.n	800aa7c <_printf_i+0x28>
 800aa8e:	a101      	add	r1, pc, #4	; (adr r1, 800aa94 <_printf_i+0x40>)
 800aa90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa94:	0800aaed 	.word	0x0800aaed
 800aa98:	0800ab01 	.word	0x0800ab01
 800aa9c:	0800aa7d 	.word	0x0800aa7d
 800aaa0:	0800aa7d 	.word	0x0800aa7d
 800aaa4:	0800aa7d 	.word	0x0800aa7d
 800aaa8:	0800aa7d 	.word	0x0800aa7d
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800aa7d 	.word	0x0800aa7d
 800aab4:	0800aa7d 	.word	0x0800aa7d
 800aab8:	0800aa7d 	.word	0x0800aa7d
 800aabc:	0800aa7d 	.word	0x0800aa7d
 800aac0:	0800ac0f 	.word	0x0800ac0f
 800aac4:	0800ab31 	.word	0x0800ab31
 800aac8:	0800abf1 	.word	0x0800abf1
 800aacc:	0800aa7d 	.word	0x0800aa7d
 800aad0:	0800aa7d 	.word	0x0800aa7d
 800aad4:	0800ac31 	.word	0x0800ac31
 800aad8:	0800aa7d 	.word	0x0800aa7d
 800aadc:	0800ab31 	.word	0x0800ab31
 800aae0:	0800aa7d 	.word	0x0800aa7d
 800aae4:	0800aa7d 	.word	0x0800aa7d
 800aae8:	0800abf9 	.word	0x0800abf9
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	602a      	str	r2, [r5, #0]
 800aaf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aafc:	2301      	movs	r3, #1
 800aafe:	e0a4      	b.n	800ac4a <_printf_i+0x1f6>
 800ab00:	6820      	ldr	r0, [r4, #0]
 800ab02:	6829      	ldr	r1, [r5, #0]
 800ab04:	0606      	lsls	r6, r0, #24
 800ab06:	f101 0304 	add.w	r3, r1, #4
 800ab0a:	d50a      	bpl.n	800ab22 <_printf_i+0xce>
 800ab0c:	680e      	ldr	r6, [r1, #0]
 800ab0e:	602b      	str	r3, [r5, #0]
 800ab10:	2e00      	cmp	r6, #0
 800ab12:	da03      	bge.n	800ab1c <_printf_i+0xc8>
 800ab14:	232d      	movs	r3, #45	; 0x2d
 800ab16:	4276      	negs	r6, r6
 800ab18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1c:	230a      	movs	r3, #10
 800ab1e:	485e      	ldr	r0, [pc, #376]	; (800ac98 <_printf_i+0x244>)
 800ab20:	e019      	b.n	800ab56 <_printf_i+0x102>
 800ab22:	680e      	ldr	r6, [r1, #0]
 800ab24:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	bf18      	it	ne
 800ab2c:	b236      	sxthne	r6, r6
 800ab2e:	e7ef      	b.n	800ab10 <_printf_i+0xbc>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	6820      	ldr	r0, [r4, #0]
 800ab34:	1d19      	adds	r1, r3, #4
 800ab36:	6029      	str	r1, [r5, #0]
 800ab38:	0601      	lsls	r1, r0, #24
 800ab3a:	d501      	bpl.n	800ab40 <_printf_i+0xec>
 800ab3c:	681e      	ldr	r6, [r3, #0]
 800ab3e:	e002      	b.n	800ab46 <_printf_i+0xf2>
 800ab40:	0646      	lsls	r6, r0, #25
 800ab42:	d5fb      	bpl.n	800ab3c <_printf_i+0xe8>
 800ab44:	881e      	ldrh	r6, [r3, #0]
 800ab46:	2f6f      	cmp	r7, #111	; 0x6f
 800ab48:	bf0c      	ite	eq
 800ab4a:	2308      	moveq	r3, #8
 800ab4c:	230a      	movne	r3, #10
 800ab4e:	4852      	ldr	r0, [pc, #328]	; (800ac98 <_printf_i+0x244>)
 800ab50:	2100      	movs	r1, #0
 800ab52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab56:	6865      	ldr	r5, [r4, #4]
 800ab58:	2d00      	cmp	r5, #0
 800ab5a:	bfa8      	it	ge
 800ab5c:	6821      	ldrge	r1, [r4, #0]
 800ab5e:	60a5      	str	r5, [r4, #8]
 800ab60:	bfa4      	itt	ge
 800ab62:	f021 0104 	bicge.w	r1, r1, #4
 800ab66:	6021      	strge	r1, [r4, #0]
 800ab68:	b90e      	cbnz	r6, 800ab6e <_printf_i+0x11a>
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	d04d      	beq.n	800ac0a <_printf_i+0x1b6>
 800ab6e:	4615      	mov	r5, r2
 800ab70:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab74:	fb03 6711 	mls	r7, r3, r1, r6
 800ab78:	5dc7      	ldrb	r7, [r0, r7]
 800ab7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab7e:	4637      	mov	r7, r6
 800ab80:	42bb      	cmp	r3, r7
 800ab82:	460e      	mov	r6, r1
 800ab84:	d9f4      	bls.n	800ab70 <_printf_i+0x11c>
 800ab86:	2b08      	cmp	r3, #8
 800ab88:	d10b      	bne.n	800aba2 <_printf_i+0x14e>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	07de      	lsls	r6, r3, #31
 800ab8e:	d508      	bpl.n	800aba2 <_printf_i+0x14e>
 800ab90:	6923      	ldr	r3, [r4, #16]
 800ab92:	6861      	ldr	r1, [r4, #4]
 800ab94:	4299      	cmp	r1, r3
 800ab96:	bfde      	ittt	le
 800ab98:	2330      	movle	r3, #48	; 0x30
 800ab9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aba2:	1b52      	subs	r2, r2, r5
 800aba4:	6122      	str	r2, [r4, #16]
 800aba6:	464b      	mov	r3, r9
 800aba8:	4621      	mov	r1, r4
 800abaa:	4640      	mov	r0, r8
 800abac:	f8cd a000 	str.w	sl, [sp]
 800abb0:	aa03      	add	r2, sp, #12
 800abb2:	f7ff fedf 	bl	800a974 <_printf_common>
 800abb6:	3001      	adds	r0, #1
 800abb8:	d14c      	bne.n	800ac54 <_printf_i+0x200>
 800abba:	f04f 30ff 	mov.w	r0, #4294967295
 800abbe:	b004      	add	sp, #16
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	4834      	ldr	r0, [pc, #208]	; (800ac98 <_printf_i+0x244>)
 800abc6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abca:	6829      	ldr	r1, [r5, #0]
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	f851 6b04 	ldr.w	r6, [r1], #4
 800abd2:	6029      	str	r1, [r5, #0]
 800abd4:	061d      	lsls	r5, r3, #24
 800abd6:	d514      	bpl.n	800ac02 <_printf_i+0x1ae>
 800abd8:	07df      	lsls	r7, r3, #31
 800abda:	bf44      	itt	mi
 800abdc:	f043 0320 	orrmi.w	r3, r3, #32
 800abe0:	6023      	strmi	r3, [r4, #0]
 800abe2:	b91e      	cbnz	r6, 800abec <_printf_i+0x198>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	f023 0320 	bic.w	r3, r3, #32
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	2310      	movs	r3, #16
 800abee:	e7af      	b.n	800ab50 <_printf_i+0xfc>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	f043 0320 	orr.w	r3, r3, #32
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	2378      	movs	r3, #120	; 0x78
 800abfa:	4828      	ldr	r0, [pc, #160]	; (800ac9c <_printf_i+0x248>)
 800abfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac00:	e7e3      	b.n	800abca <_printf_i+0x176>
 800ac02:	0659      	lsls	r1, r3, #25
 800ac04:	bf48      	it	mi
 800ac06:	b2b6      	uxthmi	r6, r6
 800ac08:	e7e6      	b.n	800abd8 <_printf_i+0x184>
 800ac0a:	4615      	mov	r5, r2
 800ac0c:	e7bb      	b.n	800ab86 <_printf_i+0x132>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	6826      	ldr	r6, [r4, #0]
 800ac12:	1d18      	adds	r0, r3, #4
 800ac14:	6961      	ldr	r1, [r4, #20]
 800ac16:	6028      	str	r0, [r5, #0]
 800ac18:	0635      	lsls	r5, r6, #24
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	d501      	bpl.n	800ac22 <_printf_i+0x1ce>
 800ac1e:	6019      	str	r1, [r3, #0]
 800ac20:	e002      	b.n	800ac28 <_printf_i+0x1d4>
 800ac22:	0670      	lsls	r0, r6, #25
 800ac24:	d5fb      	bpl.n	800ac1e <_printf_i+0x1ca>
 800ac26:	8019      	strh	r1, [r3, #0]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4615      	mov	r5, r2
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	e7ba      	b.n	800aba6 <_printf_i+0x152>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2100      	movs	r1, #0
 800ac34:	1d1a      	adds	r2, r3, #4
 800ac36:	602a      	str	r2, [r5, #0]
 800ac38:	681d      	ldr	r5, [r3, #0]
 800ac3a:	6862      	ldr	r2, [r4, #4]
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f000 f82f 	bl	800aca0 <memchr>
 800ac42:	b108      	cbz	r0, 800ac48 <_printf_i+0x1f4>
 800ac44:	1b40      	subs	r0, r0, r5
 800ac46:	6060      	str	r0, [r4, #4]
 800ac48:	6863      	ldr	r3, [r4, #4]
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac52:	e7a8      	b.n	800aba6 <_printf_i+0x152>
 800ac54:	462a      	mov	r2, r5
 800ac56:	4649      	mov	r1, r9
 800ac58:	4640      	mov	r0, r8
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	47d0      	blx	sl
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d0ab      	beq.n	800abba <_printf_i+0x166>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	079b      	lsls	r3, r3, #30
 800ac66:	d413      	bmi.n	800ac90 <_printf_i+0x23c>
 800ac68:	68e0      	ldr	r0, [r4, #12]
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	4298      	cmp	r0, r3
 800ac6e:	bfb8      	it	lt
 800ac70:	4618      	movlt	r0, r3
 800ac72:	e7a4      	b.n	800abbe <_printf_i+0x16a>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4632      	mov	r2, r6
 800ac78:	4649      	mov	r1, r9
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	47d0      	blx	sl
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d09b      	beq.n	800abba <_printf_i+0x166>
 800ac82:	3501      	adds	r5, #1
 800ac84:	68e3      	ldr	r3, [r4, #12]
 800ac86:	9903      	ldr	r1, [sp, #12]
 800ac88:	1a5b      	subs	r3, r3, r1
 800ac8a:	42ab      	cmp	r3, r5
 800ac8c:	dcf2      	bgt.n	800ac74 <_printf_i+0x220>
 800ac8e:	e7eb      	b.n	800ac68 <_printf_i+0x214>
 800ac90:	2500      	movs	r5, #0
 800ac92:	f104 0619 	add.w	r6, r4, #25
 800ac96:	e7f5      	b.n	800ac84 <_printf_i+0x230>
 800ac98:	0800b1f1 	.word	0x0800b1f1
 800ac9c:	0800b202 	.word	0x0800b202

0800aca0 <memchr>:
 800aca0:	4603      	mov	r3, r0
 800aca2:	b510      	push	{r4, lr}
 800aca4:	b2c9      	uxtb	r1, r1
 800aca6:	4402      	add	r2, r0
 800aca8:	4293      	cmp	r3, r2
 800acaa:	4618      	mov	r0, r3
 800acac:	d101      	bne.n	800acb2 <memchr+0x12>
 800acae:	2000      	movs	r0, #0
 800acb0:	e003      	b.n	800acba <memchr+0x1a>
 800acb2:	7804      	ldrb	r4, [r0, #0]
 800acb4:	3301      	adds	r3, #1
 800acb6:	428c      	cmp	r4, r1
 800acb8:	d1f6      	bne.n	800aca8 <memchr+0x8>
 800acba:	bd10      	pop	{r4, pc}

0800acbc <memmove>:
 800acbc:	4288      	cmp	r0, r1
 800acbe:	b510      	push	{r4, lr}
 800acc0:	eb01 0402 	add.w	r4, r1, r2
 800acc4:	d902      	bls.n	800accc <memmove+0x10>
 800acc6:	4284      	cmp	r4, r0
 800acc8:	4623      	mov	r3, r4
 800acca:	d807      	bhi.n	800acdc <memmove+0x20>
 800accc:	1e43      	subs	r3, r0, #1
 800acce:	42a1      	cmp	r1, r4
 800acd0:	d008      	beq.n	800ace4 <memmove+0x28>
 800acd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acda:	e7f8      	b.n	800acce <memmove+0x12>
 800acdc:	4601      	mov	r1, r0
 800acde:	4402      	add	r2, r0
 800ace0:	428a      	cmp	r2, r1
 800ace2:	d100      	bne.n	800ace6 <memmove+0x2a>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acee:	e7f7      	b.n	800ace0 <memmove+0x24>

0800acf0 <_free_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4605      	mov	r5, r0
 800acf4:	2900      	cmp	r1, #0
 800acf6:	d040      	beq.n	800ad7a <_free_r+0x8a>
 800acf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acfc:	1f0c      	subs	r4, r1, #4
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bfb8      	it	lt
 800ad02:	18e4      	addlt	r4, r4, r3
 800ad04:	f000 f910 	bl	800af28 <__malloc_lock>
 800ad08:	4a1c      	ldr	r2, [pc, #112]	; (800ad7c <_free_r+0x8c>)
 800ad0a:	6813      	ldr	r3, [r2, #0]
 800ad0c:	b933      	cbnz	r3, 800ad1c <_free_r+0x2c>
 800ad0e:	6063      	str	r3, [r4, #4]
 800ad10:	6014      	str	r4, [r2, #0]
 800ad12:	4628      	mov	r0, r5
 800ad14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad18:	f000 b90c 	b.w	800af34 <__malloc_unlock>
 800ad1c:	42a3      	cmp	r3, r4
 800ad1e:	d908      	bls.n	800ad32 <_free_r+0x42>
 800ad20:	6820      	ldr	r0, [r4, #0]
 800ad22:	1821      	adds	r1, r4, r0
 800ad24:	428b      	cmp	r3, r1
 800ad26:	bf01      	itttt	eq
 800ad28:	6819      	ldreq	r1, [r3, #0]
 800ad2a:	685b      	ldreq	r3, [r3, #4]
 800ad2c:	1809      	addeq	r1, r1, r0
 800ad2e:	6021      	streq	r1, [r4, #0]
 800ad30:	e7ed      	b.n	800ad0e <_free_r+0x1e>
 800ad32:	461a      	mov	r2, r3
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	b10b      	cbz	r3, 800ad3c <_free_r+0x4c>
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	d9fa      	bls.n	800ad32 <_free_r+0x42>
 800ad3c:	6811      	ldr	r1, [r2, #0]
 800ad3e:	1850      	adds	r0, r2, r1
 800ad40:	42a0      	cmp	r0, r4
 800ad42:	d10b      	bne.n	800ad5c <_free_r+0x6c>
 800ad44:	6820      	ldr	r0, [r4, #0]
 800ad46:	4401      	add	r1, r0
 800ad48:	1850      	adds	r0, r2, r1
 800ad4a:	4283      	cmp	r3, r0
 800ad4c:	6011      	str	r1, [r2, #0]
 800ad4e:	d1e0      	bne.n	800ad12 <_free_r+0x22>
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4401      	add	r1, r0
 800ad56:	6011      	str	r1, [r2, #0]
 800ad58:	6053      	str	r3, [r2, #4]
 800ad5a:	e7da      	b.n	800ad12 <_free_r+0x22>
 800ad5c:	d902      	bls.n	800ad64 <_free_r+0x74>
 800ad5e:	230c      	movs	r3, #12
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	e7d6      	b.n	800ad12 <_free_r+0x22>
 800ad64:	6820      	ldr	r0, [r4, #0]
 800ad66:	1821      	adds	r1, r4, r0
 800ad68:	428b      	cmp	r3, r1
 800ad6a:	bf01      	itttt	eq
 800ad6c:	6819      	ldreq	r1, [r3, #0]
 800ad6e:	685b      	ldreq	r3, [r3, #4]
 800ad70:	1809      	addeq	r1, r1, r0
 800ad72:	6021      	streq	r1, [r4, #0]
 800ad74:	6063      	str	r3, [r4, #4]
 800ad76:	6054      	str	r4, [r2, #4]
 800ad78:	e7cb      	b.n	800ad12 <_free_r+0x22>
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20004440 	.word	0x20004440

0800ad80 <sbrk_aligned>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	4e0e      	ldr	r6, [pc, #56]	; (800adbc <sbrk_aligned+0x3c>)
 800ad84:	460c      	mov	r4, r1
 800ad86:	6831      	ldr	r1, [r6, #0]
 800ad88:	4605      	mov	r5, r0
 800ad8a:	b911      	cbnz	r1, 800ad92 <sbrk_aligned+0x12>
 800ad8c:	f000 f8bc 	bl	800af08 <_sbrk_r>
 800ad90:	6030      	str	r0, [r6, #0]
 800ad92:	4621      	mov	r1, r4
 800ad94:	4628      	mov	r0, r5
 800ad96:	f000 f8b7 	bl	800af08 <_sbrk_r>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d00a      	beq.n	800adb4 <sbrk_aligned+0x34>
 800ad9e:	1cc4      	adds	r4, r0, #3
 800ada0:	f024 0403 	bic.w	r4, r4, #3
 800ada4:	42a0      	cmp	r0, r4
 800ada6:	d007      	beq.n	800adb8 <sbrk_aligned+0x38>
 800ada8:	1a21      	subs	r1, r4, r0
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f8ac 	bl	800af08 <_sbrk_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d101      	bne.n	800adb8 <sbrk_aligned+0x38>
 800adb4:	f04f 34ff 	mov.w	r4, #4294967295
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	20004444 	.word	0x20004444

0800adc0 <_malloc_r>:
 800adc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc4:	1ccd      	adds	r5, r1, #3
 800adc6:	f025 0503 	bic.w	r5, r5, #3
 800adca:	3508      	adds	r5, #8
 800adcc:	2d0c      	cmp	r5, #12
 800adce:	bf38      	it	cc
 800add0:	250c      	movcc	r5, #12
 800add2:	2d00      	cmp	r5, #0
 800add4:	4607      	mov	r7, r0
 800add6:	db01      	blt.n	800addc <_malloc_r+0x1c>
 800add8:	42a9      	cmp	r1, r5
 800adda:	d905      	bls.n	800ade8 <_malloc_r+0x28>
 800addc:	230c      	movs	r3, #12
 800adde:	2600      	movs	r6, #0
 800ade0:	603b      	str	r3, [r7, #0]
 800ade2:	4630      	mov	r0, r6
 800ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade8:	4e2e      	ldr	r6, [pc, #184]	; (800aea4 <_malloc_r+0xe4>)
 800adea:	f000 f89d 	bl	800af28 <__malloc_lock>
 800adee:	6833      	ldr	r3, [r6, #0]
 800adf0:	461c      	mov	r4, r3
 800adf2:	bb34      	cbnz	r4, 800ae42 <_malloc_r+0x82>
 800adf4:	4629      	mov	r1, r5
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7ff ffc2 	bl	800ad80 <sbrk_aligned>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	4604      	mov	r4, r0
 800ae00:	d14d      	bne.n	800ae9e <_malloc_r+0xde>
 800ae02:	6834      	ldr	r4, [r6, #0]
 800ae04:	4626      	mov	r6, r4
 800ae06:	2e00      	cmp	r6, #0
 800ae08:	d140      	bne.n	800ae8c <_malloc_r+0xcc>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	4631      	mov	r1, r6
 800ae0e:	4638      	mov	r0, r7
 800ae10:	eb04 0803 	add.w	r8, r4, r3
 800ae14:	f000 f878 	bl	800af08 <_sbrk_r>
 800ae18:	4580      	cmp	r8, r0
 800ae1a:	d13a      	bne.n	800ae92 <_malloc_r+0xd2>
 800ae1c:	6821      	ldr	r1, [r4, #0]
 800ae1e:	3503      	adds	r5, #3
 800ae20:	1a6d      	subs	r5, r5, r1
 800ae22:	f025 0503 	bic.w	r5, r5, #3
 800ae26:	3508      	adds	r5, #8
 800ae28:	2d0c      	cmp	r5, #12
 800ae2a:	bf38      	it	cc
 800ae2c:	250c      	movcc	r5, #12
 800ae2e:	4638      	mov	r0, r7
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7ff ffa5 	bl	800ad80 <sbrk_aligned>
 800ae36:	3001      	adds	r0, #1
 800ae38:	d02b      	beq.n	800ae92 <_malloc_r+0xd2>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	442b      	add	r3, r5
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	e00e      	b.n	800ae60 <_malloc_r+0xa0>
 800ae42:	6822      	ldr	r2, [r4, #0]
 800ae44:	1b52      	subs	r2, r2, r5
 800ae46:	d41e      	bmi.n	800ae86 <_malloc_r+0xc6>
 800ae48:	2a0b      	cmp	r2, #11
 800ae4a:	d916      	bls.n	800ae7a <_malloc_r+0xba>
 800ae4c:	1961      	adds	r1, r4, r5
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	6025      	str	r5, [r4, #0]
 800ae52:	bf18      	it	ne
 800ae54:	6059      	strne	r1, [r3, #4]
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	bf08      	it	eq
 800ae5a:	6031      	streq	r1, [r6, #0]
 800ae5c:	5162      	str	r2, [r4, r5]
 800ae5e:	604b      	str	r3, [r1, #4]
 800ae60:	4638      	mov	r0, r7
 800ae62:	f104 060b 	add.w	r6, r4, #11
 800ae66:	f000 f865 	bl	800af34 <__malloc_unlock>
 800ae6a:	f026 0607 	bic.w	r6, r6, #7
 800ae6e:	1d23      	adds	r3, r4, #4
 800ae70:	1af2      	subs	r2, r6, r3
 800ae72:	d0b6      	beq.n	800ade2 <_malloc_r+0x22>
 800ae74:	1b9b      	subs	r3, r3, r6
 800ae76:	50a3      	str	r3, [r4, r2]
 800ae78:	e7b3      	b.n	800ade2 <_malloc_r+0x22>
 800ae7a:	6862      	ldr	r2, [r4, #4]
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	bf0c      	ite	eq
 800ae80:	6032      	streq	r2, [r6, #0]
 800ae82:	605a      	strne	r2, [r3, #4]
 800ae84:	e7ec      	b.n	800ae60 <_malloc_r+0xa0>
 800ae86:	4623      	mov	r3, r4
 800ae88:	6864      	ldr	r4, [r4, #4]
 800ae8a:	e7b2      	b.n	800adf2 <_malloc_r+0x32>
 800ae8c:	4634      	mov	r4, r6
 800ae8e:	6876      	ldr	r6, [r6, #4]
 800ae90:	e7b9      	b.n	800ae06 <_malloc_r+0x46>
 800ae92:	230c      	movs	r3, #12
 800ae94:	4638      	mov	r0, r7
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	f000 f84c 	bl	800af34 <__malloc_unlock>
 800ae9c:	e7a1      	b.n	800ade2 <_malloc_r+0x22>
 800ae9e:	6025      	str	r5, [r4, #0]
 800aea0:	e7de      	b.n	800ae60 <_malloc_r+0xa0>
 800aea2:	bf00      	nop
 800aea4:	20004440 	.word	0x20004440

0800aea8 <_realloc_r>:
 800aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeac:	4680      	mov	r8, r0
 800aeae:	4614      	mov	r4, r2
 800aeb0:	460e      	mov	r6, r1
 800aeb2:	b921      	cbnz	r1, 800aebe <_realloc_r+0x16>
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	f7ff bf81 	b.w	800adc0 <_malloc_r>
 800aebe:	b92a      	cbnz	r2, 800aecc <_realloc_r+0x24>
 800aec0:	f7ff ff16 	bl	800acf0 <_free_r>
 800aec4:	4625      	mov	r5, r4
 800aec6:	4628      	mov	r0, r5
 800aec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aecc:	f000 f838 	bl	800af40 <_malloc_usable_size_r>
 800aed0:	4284      	cmp	r4, r0
 800aed2:	4607      	mov	r7, r0
 800aed4:	d802      	bhi.n	800aedc <_realloc_r+0x34>
 800aed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeda:	d812      	bhi.n	800af02 <_realloc_r+0x5a>
 800aedc:	4621      	mov	r1, r4
 800aede:	4640      	mov	r0, r8
 800aee0:	f7ff ff6e 	bl	800adc0 <_malloc_r>
 800aee4:	4605      	mov	r5, r0
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d0ed      	beq.n	800aec6 <_realloc_r+0x1e>
 800aeea:	42bc      	cmp	r4, r7
 800aeec:	4622      	mov	r2, r4
 800aeee:	4631      	mov	r1, r6
 800aef0:	bf28      	it	cs
 800aef2:	463a      	movcs	r2, r7
 800aef4:	f7ff fba4 	bl	800a640 <memcpy>
 800aef8:	4631      	mov	r1, r6
 800aefa:	4640      	mov	r0, r8
 800aefc:	f7ff fef8 	bl	800acf0 <_free_r>
 800af00:	e7e1      	b.n	800aec6 <_realloc_r+0x1e>
 800af02:	4635      	mov	r5, r6
 800af04:	e7df      	b.n	800aec6 <_realloc_r+0x1e>
	...

0800af08 <_sbrk_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	2300      	movs	r3, #0
 800af0c:	4d05      	ldr	r5, [pc, #20]	; (800af24 <_sbrk_r+0x1c>)
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f6 ff46 	bl	8001da4 <_sbrk>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_sbrk_r+0x1a>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_sbrk_r+0x1a>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20004448 	.word	0x20004448

0800af28 <__malloc_lock>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__malloc_lock+0x8>)
 800af2a:	f000 b811 	b.w	800af50 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	2000444c 	.word	0x2000444c

0800af34 <__malloc_unlock>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__malloc_unlock+0x8>)
 800af36:	f000 b80c 	b.w	800af52 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	2000444c 	.word	0x2000444c

0800af40 <_malloc_usable_size_r>:
 800af40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af44:	1f18      	subs	r0, r3, #4
 800af46:	2b00      	cmp	r3, #0
 800af48:	bfbc      	itt	lt
 800af4a:	580b      	ldrlt	r3, [r1, r0]
 800af4c:	18c0      	addlt	r0, r0, r3
 800af4e:	4770      	bx	lr

0800af50 <__retarget_lock_acquire_recursive>:
 800af50:	4770      	bx	lr

0800af52 <__retarget_lock_release_recursive>:
 800af52:	4770      	bx	lr

0800af54 <_init>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	bf00      	nop
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr

0800af60 <_fini>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr
